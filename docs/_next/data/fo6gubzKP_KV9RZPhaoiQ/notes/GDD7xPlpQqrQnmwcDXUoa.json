{"pageProps":{"note":{"id":"GDD7xPlpQqrQnmwcDXUoa","title":"Resolver","desc":"","updated":1645740100708,"created":1615250039705,"custom":{},"fname":"graphql.server.resolver","type":"note","vault":{"fsPath":"../main/tech","name":"tech"},"contentHash":"e6de64721d481e83d5980e8db21a1b48","links":[{"type":"wiki","from":{"fname":"graphql.server.resolver","id":"GDD7xPlpQqrQnmwcDXUoa","vaultName":"tech"},"value":"graphql.documents.mutations","alias":"mutation","position":{"start":{"line":8,"column":293,"offset":921},"end":{"line":8,"column":333,"offset":961},"indent":[]},"xvault":false,"sameFile":false,"to":{"fname":"graphql.documents.mutations"}},{"type":"wiki","from":{"fname":"graphql.server.resolver","id":"GDD7xPlpQqrQnmwcDXUoa","vaultName":"tech"},"value":"graphql.server","position":{"start":{"line":51,"column":111,"offset":3694},"end":{"line":51,"column":129,"offset":3712},"indent":[]},"xvault":false,"sameFile":false,"to":{"fname":"graphql.server"}},{"type":"ref","from":{"fname":"graphql.server.resolver","id":"GDD7xPlpQqrQnmwcDXUoa","vaultName":"tech"},"value":"graphql.server.resolver.context","position":{"start":{"line":42,"column":1,"offset":3173},"end":{"line":42,"column":37,"offset":3209},"indent":[]},"xvault":false,"to":{"fname":"graphql.server.resolver.context"}},{"from":{"fname":"type-graphql","id":"GLQ2pmkJUNUa93THBDVsD","vaultName":"tech"},"type":"backlink","position":{"start":{"line":27,"column":21,"offset":1151},"end":{"line":27,"column":66,"offset":1196},"indent":[]},"value":"graphql.server.resolver"},{"from":{"fname":"graphql.server","id":"q3ZzZUfqn8nRhWQXBW8P1","vaultName":"tech"},"type":"backlink","position":{"start":{"line":7,"column":3,"offset":324},"end":{"line":7,"column":48,"offset":369},"indent":[]},"value":"graphql.server.resolver"}],"anchors":{"obj":{"type":"header","text":"obj","value":"obj","line":27,"column":0,"depth":3},"args":{"type":"header","text":"args","value":"args","line":44,"column":0,"depth":3},"context":{"type":"header","text":"context","value":"context","line":47,"column":0,"depth":3},"info":{"type":"header","text":"info","value":"info","line":50,"column":0,"depth":3},"how-graphql-resolves-fields":{"type":"header","text":"How GraphQL resolves fields","value":"how-graphql-resolves-fields","line":56,"column":0,"depth":2},"e-resources":{"type":"header","text":"E Resources","value":"e-resources","line":63,"column":0,"depth":1}},"children":["Luqwbu4DMVwVSCJuJaDBp"],"parent":"q3ZzZUfqn8nRhWQXBW8P1","data":{}},"body":"<h1 id=\"resolver\">Resolver<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#resolver\"></a></h1>\n<p>Resolvers specify how the types and fields in the schema are connected to various backends, making them essentially mini-routers. </p>\n<ul>\n<li>Through these functions, you are able to answer questions such as “How do I get the data regarding Course Authors?” and “Which backend do I need to call with what arguments to get the data regarding Courses?”.</li>\n</ul>\n<p>Each graphql type needs a resolver. The resolver exists to resolve a type from some data layer (field resolvers are the same thing; they just resolve fields on a type)</p>\n<p>If we were converting from a REST API with 20 different endpoints, then we would end up with close to 20 resolvers</p>\n<ul>\n<li>this mapping is not absolute, but is a good rough guide. For example, maybe we want to implement a resolver <code>createOrUpdateBook</code>. RESTful best practice would have us splitting the creation and updating of a book exist as 2 different endpoints, but this would be fine to combine as a single <a href=\"/notes/4IVBdBVIxZ8v6ft1pnsxx\">mutation</a>. In this case, we would implement some logic in the resolver \"if an <code>id</code> is passed as input to the mutation, update the book. Otherwise, create it\".</li>\n</ul>\n<p>A Resolver is a collection of functions whose responsibility is sourcing the data for a particular field. They are responsible for generating a response to the Graphql query.</p>\n<ul>\n<li>the function is mapped to a schema. In other words, each type in the schema has a corresponding resolver</li>\n<li>The schema (made up of queries and mutations) says \"here's what you can look at\", and the resolver says \"here's how you get it\"\n<ul>\n<li>If we had a SQL database, the resolver could be configured to call some REST endpoint, and that REST endpoint would ultimately execute the SQL query.</li>\n</ul>\n</li>\n<li>The resolvers map to your schema and are what GraphQL actually executes to retrieve each piece of data. The resolvers are like controllers in a regular REST API.</li>\n<li>a resolver receives 4 args:\n<ol>\n<li>obj</li>\n<li>args</li>\n<li>context</li>\n<li>info</li>\n</ol>\n</li>\n</ul>\n<h3 id=\"obj\"><code>obj</code><a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#obj\"></a></h3>\n<p>the previous object in the graphql \"tree\" (with the root being <code>query</code> or <code>mutate</code>). It contains the result returned from the resolver on the parent field.</p>\n<ul>\n<li>sometimes aka <code>root</code></li>\n<li>when we are making a resolver function on the root Query type, we probably won't need to use <code>obj</code>.</li>\n<li>All Graphql has to do in order to resolve a query is call the resolvers on the query's fields. This is being done level by level (in other words, from most outdented to most indented; ltr).</li>\n<li><code>obj</code> argument in each resolver call is simply the result of the previous call\n<ul>\n<li>ex. we are querying <code>getNuggetById</code>. <code>obj</code> is the <code>query</code> type at this point. When the backend receives that request, the resolver executes a db query and returns to us <code>{ id: 1, title: 'first nugget' }</code>. With the first field resolved, the value of <code>obj</code> on the second iteration is the <code>nugget</code> type, since that is what was returned by the first iteration. This is precicely the reason why we don't have to explicitly write resolvers for every single field.</li>\n<li>In fact, if we were to console.log <code>obj</code>, on the second iteration we'd have the nugget object.</li>\n</ul>\n</li>\n</ul>\n<pre class=\"language-gql\"><code class=\"language-gql\">query {\n\tnugget(id: $id) {\n\t\tid\n\t\ttitle\n\t}\n}\n</code></pre>\n<h3 id=\"args\"><code>args</code><a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#args\"></a></h3>\n<p>The arguments provided to the field in the GraphQL query</p>\n<h3 id=\"context\"><code>context</code><a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#context\"></a></h3>\n<p></p><p></p><div class=\"portal-container\">\n<div class=\"portal-head\">\n<div class=\"portal-backlink\">\n<div class=\"portal-title\">From <span class=\"portal-text-title\">Context Object</span></div>\n<a href=\"/notes/Luqwbu4DMVwVSCJuJaDBp\" class=\"portal-arrow\">Go to text <span class=\"right-arrow\">→</span></a>\n</div>\n</div>\n<div id=\"portal-parent-anchor\" class=\"portal-parent\" markdown=\"1\">\n<div class=\"portal-parent-fader-top\"></div>\n<div class=\"portal-parent-fader-bottom\"></div><p><code>context</code> is an object that gets passed through the resolver chain that each resolver can read from and write to (basically a means for resolvers to communicate and share information).</p>\n<ul>\n<li>If we were using Apollo Server, we would set the context when initializing a new <code>ApolloServer</code>.</li>\n</ul>\n<p>holds info like... </p>\n<ul>\n<li>currently logged in user, </li>\n<li>current access to the database (which includes postgres user) etc.</li>\n<li>access token</li>\n<li>correlationId</li>\n<li><a href=\"/notes/kMwvXFTpffr1BEHPDFd5k\">data sources</a>\n<ul>\n<li><code>dataSource</code> is part of the constructor for the <code>ApolloServer</code> class. The <code>dataSource</code> instances are used by the resolvers via the <code>context</code> object.</li>\n</ul>\n</li>\n</ul>\n<p>Therefore, we can use the context to provide access to the database</p>\n</div></div><p></p><p></p>\n<h3 id=\"info\"><code>info</code><a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#info\"></a></h3>\n<p>holds field-specific information relevant to the current query as well as the schema details</p>\n<ul>\n<li>The way you form relationships is by defining custom types in your resolvers</li>\n<li>In its most basic form, a GraphQL server will have one resolver function per field in its schema\n<ul>\n<li>Each resolver knows how to fetch the data for its field</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"how-graphql-resolves-fields\">How GraphQL resolves fields<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#how-graphql-resolves-fields\"></a></h2>\n<p>While you certainly can write a resolver for every field in your schema, it's often not necessary because the <a href=\"/notes/q3ZzZUfqn8nRhWQXBW8P1\">Graphql Server</a> uses a default resolver when you don't provide one.</p>\n<ul>\n<li>in most cases, the GraphQL library will just omit simple resolvers and will just assume that if a resolver isn't provided for a field, that a property of the same name should be read and returned.</li>\n<li>what the default resolver does is simple: it looks at the value the parent field resolved to and if that value is a JavaScript object, it looks for a property on that Object with the same name as the field being resolved. If it finds that property, it resolves to the value of that property. Otherwise, it resolves to null.\n<ul>\n<li>This process is the reason why deeply nested queries are more computationally expensive.</li>\n</ul>\n</li>\n<li>GraphQL queries always end at scalar values.</li>\n</ul>\n<h1 id=\"e-resources\">E Resources<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#e-resources\"></a></h1>\n<p><a href=\"https://www.prisma.io/blog/graphql-server-basics-the-schema-ac5e2950214e\">Good breakdown of how schema/resolvers work</a></p>\n<hr>\n<strong>Children</strong>\n<ol>\n<li><a href=\"/notes/Luqwbu4DMVwVSCJuJaDBp\">Context Object</a></li>\n</ol>\n<hr>\n<strong>Backlinks</strong>\n<ul>\n<li><a href=\"/notes/GLQ2pmkJUNUa93THBDVsD\">TypeGraphql</a></li>\n<li><a href=\"/notes/q3ZzZUfqn8nRhWQXBW8P1\">Graphql Server</a></li>\n</ul>","noteIndex":{"id":"olZIVfSs2uLLr3BppFh4K","title":"Digital Garden","desc":"","updated":1674517603573,"created":1615482407722,"custom":{"nav_order":0,"permalink":"/"},"fname":"root","type":"note","vault":{"fsPath":"../main/tech","name":"tech"},"contentHash":"effb007003ca6a91d7fd0c293e1d2436","links":[{"type":"wiki","from":{"fname":"root","id":"olZIVfSs2uLLr3BppFh4K","vaultName":"tech"},"value":"testing.method.unit","alias":"unit testing","position":{"start":{"line":18,"column":121,"offset":1146},"end":{"line":18,"column":157,"offset":1182},"indent":[]},"xvault":false,"sameFile":false,"to":{"fname":"testing.method.unit"}},{"type":"wiki","from":{"fname":"root","id":"olZIVfSs2uLLr3BppFh4K","vaultName":"tech"},"value":"general.arch.microservice","alias":"microservices","position":{"start":{"line":18,"column":188,"offset":1213},"end":{"line":18,"column":231,"offset":1256},"indent":[]},"xvault":false,"sameFile":false,"to":{"fname":"general.arch.microservice"}},{"type":"wiki","from":{"fname":"root","id":"olZIVfSs2uLLr3BppFh4K","vaultName":"tech"},"value":"paradigm.oop","alias":"OOP","position":{"start":{"line":36,"column":227,"offset":2718},"end":{"line":36,"column":247,"offset":2738},"indent":[]},"xvault":false,"sameFile":false,"to":{"fname":"paradigm.oop"}}],"anchors":{"tags":{"type":"header","text":"Tags","value":"tags","line":46,"column":0,"depth":3},"resources":{"type":"header","text":"Resources","value":"resources","line":55,"column":0,"depth":2},"ue-unexamined-resources":{"type":"header","text":"UE (Unexamined) Resources","value":"ue-unexamined-resources","line":56,"column":0,"depth":3},"e-examined-resources":{"type":"header","text":"E (Examined) Resources","value":"e-examined-resources","line":59,"column":0,"depth":3},"resources-1":{"type":"header","text":"Resources","value":"resources-1","line":62,"column":0,"depth":3}},"children":["40ubf88tephzbdjte8cdsa0","zFMjbn3xihVNHjUIdZCD1","IK6NOKemuDjhfstJBovKL","ZaTr28eWk1DrXOEsc1YVb","Vi0WYVLZunVM9iR8XZJn3","ngAbg7gluvbt1bY1UIRsi","RCPPXSakm5TvKka8kOmVp","LIcuGYV0DDt1VWbvH6Sed","MPx8ykTP57I40WTZvTP7f","ZU5WmdTG1bHoE8RcmZXZG","jqWiyYJff92RjXuUQt9PQ","KihijM8OQvZ4pASkkhqzL","F9vyqvls3OBCujtukqKhy","k6jxm2b3edgkhbordpuz6v1","facc2b01-755a-409f-99f6-57bef2d1501f","bZumdyapJ2H0wWWOmJ45i","elqpgoe2r951si4xrhujppj","m5ov42Vm6mR7RQWTvl1NW","cw8cerc0cos8lh871oz8rtf","PZxxZ4iESzSlbbHJKxuAZ","UDu62Pa6BaRqlG8uGoMhy","u3zcndycwqessho5h6x0nz9","ZgCUp366YrF2Tyky2NT73","DVpVUmavSoVDA7UIlPzLX","nMCtMXVvjBsJk3iw1zoIO","ANfx9Z4a6ZA0uJuSHtbIJ","BkG557LKUYbH1DnxprEVT","1TaH8zDTM98FZ9SYaeXLM","02v7ymc144e5c4pv3edkud7","dc79799f-a55d-48ab-a8be-c48adb1b19c0","f6feef57-b8f5-451f-a09a-7b63f6a07183","4sz47Y0LKs1Si73rWtyyh","g7ulqi8no93ezeocbesc3ll","5a9fb1df-478e-4687-9be0-5cb97e61ec57","1374e9e9-1cbc-4e1f-b1ca-66b8569533dd","D8Z3rjXkSj2EOymXQXF4Z","np3c1ykvnjqv5xoombpfwqz","f529cc34-aba0-45ca-ad7e-02ddda318941","0zcauha3il2NqtxZazIo7","9bbd6f68-03b2-41f4-92e4-2ca313e8b450","5a2ab598-fa7e-4471-8bda-9f5831b679ae","uV6w4mZPoohWyZV4Xaad0","QHXEIyeZGIGMVi5Q52UWI","RgE0mZLaUjPftFPZsiAoe","mytCOts26Pidush65tdRW","fwUzxfLSPMH1eL8oBoLWx","wazdsda6h25x66edvfmeuiv","TbW7PM9bg1y5TGkiWwQ8b","xiSIDeEtIc8X0lpUQlppI","0jxgntiLNHWFuCbzqtFGF","GkdMprLUe4QQULBxmGN6V","4SYc6v5hxY5g6Ip6kjpwO","czi7ilt2i1uoqm1f2otbntj","fqVQpS9FBiXgKsZX3R3sJ","L5JUZlGAGvTxrsEBB7DY8","ttyri4pwfyn5lcx0vp9804o","TeTedoeS2LdHPR632eCpM","ulicRRwo3lSFzh3tMfWH9","p7d24vyb8m00ombzn34t50c","e65188a1-177e-4ab2-99f9-75f85d537621","fajYnbVhCRDi74xn0H30R","bArGdGwqo3iFkyKMyE7qR","4Dcp7gbEVoLLgfu7bXFai","5d700782-fb81-416e-83f9-5dd88260e350","zubgzhNFE6KlTgXcjTz6O","8lpdfWa0cbSq1XJQbcYcY","2psluywdc416t7vrql0m058","17I8ZksXvqCH1mRtZDjHp","kF916Ow84qpJJeMRkWMIo","tMLkLcrIHHBz56xVmBLkP","CSePBQ6q7qhowKESqVwt7","laZ4OfLhZNK1Kuy6GaWUr","z5IJblOknQhMzZ5QZh4ye","N36FHxfxzwJfxDY3miWyX","3bb25f58-2b50-4fa3-af55-48ea9f88a081","7x07qjgbitozdfszqzuy7ix","u93Rz4fEWGu6VBR30Zraf","9hjMHnKvYT4jLKvuDSXaV","qC5GxCZBmNb4Ip6c0kU8x","LgW7mTIALODoXc54B3p6S","UYPxfHBFWX7fb6hHU5bB6","74lYtC8NKpCzcyFOZTfR1","sEoBNAEuaTxwSmTXDonZt","dj0jr9mpvs62e2pkg3zc3yy","z8ie0xjogb6ht7gzowav5xr","qxSOd6SPN8qf9ZUojVFDX","WQoMTf6VXBaxCgksXAVsj","2Mw4XgfyCHXHNOX5yoCIY","qcdt2f7jo51muquo5r95dpo","0XJqmcdtcMZu66glBI5O8","lK8r8BXS4ThiUTe4xKIZe","93de42ca-53ea-460a-baa7-b9ec5c47cb1e","Rxs2jaGpdFzqYtP7lAJFJ","aO8W81Z0PyIb6Hs7nOHPW","lhzisalkebu4w5n01np07i0","7b5l4b6fi65n7sv9org5q1l","I01hENHnh8Tqu3Ok8sLzG","03o3n0hz9v9jtb7j889zpd4","evqsPNutOaZ8hcBCqxFQu","zhhxcjZUHdU8uRLwGb9Zh","G1aFACZB2ooWGMGwyd3ZW","YWy1C4tgoaCcw1m8JJsr7","Szj3o5iaNxPpesiCqwrbu","613syb18hb3v0u1ydvor7ru","XhvCDW3fIw6h6MhY5ticq","Q70g7SusFZBQXzkuQifv4","AzfWDH3wp7jFpL2EYxBcW","y0fwpZ9qMqirsLiFyOciU","ZF8xj8wwDUqKlrwTrCFZ1","tAJvhqhdfyZZa87QHq1TU","4hRmipi8lxpBLyzWu5JVB","iTg0C7QjvnmqBZeEigJNs","3babc3d2-79ae-470a-9c06-ab8bba2e684e","bF3UsMFya3fMeXWDspVov","ULkfbL9WpktbVYnzhl6Jw","PpNOO8JYWe6dM8wruSa7x","di40pCxDn7IiqE8lFdD46","rmW0mkerqV35I8QPji6lM","3IFIK1ByzeIxZCByryGLN","iImkYAKfkw3beAl6pLbDn","ecDe8DNWrkeQTwpTEvHje","i2it5id8qwtg27n4usg8bo1","Yqhdd9mSJGN7OJOeyoSD2","Ws5tah8tpeyn9tK8VBTg8","gWAg15uBJgkS2B0wcpMAa","l7V3v2ep1YdDCt7DOr7Ci","yM2PJBdqJnHpD63cPA6sW","qn0bre7eLbi3QMbCfWkUi","fSu0KxFL41IRouotqmbHs","0gtg24Mj1a1bQFPRGQNlO","7iQPBMltLPLbFEz2qbjPu","yoh4pwoXcfELInGKRdYf6","dCGCWXgAmiOZXbdULT1m6","jMavlje07sNa6hSEIE8WA","Xxm0JE4dKHxrQAaZfzvxD","nRb6Im4Kcmc2ZWE7K1jZ1","PAEBZCyFBZJyR7OoMZ41E","PQ6km8RgRCuyICBPOYz8f","x5tm1nfjzyawwzedy3yitgd","2bhftt8rGuxYu4pFgNqru","hjYIZpHQWuXfeEoGeJEKW","K2M9bQqVq2eQfm29eslKL","X8obW1iKwYsvNgKWGyCzy","yJwSC7hqYIezTFHf5i0Ev","c4Z7ETcOHUILRMH32Sfjw","qiR6dIu857b9M9kTqjOyK","fc2coz74cnfy5czzofx4h5x","Ku1OgHMhELajzo61Gx7ye","LUrfhDWo8wuwZu7CN9TV8","osu6JGOnvXJ5gt3tpqWZY","1a6173cd-cf13-4b34-a522-8350bf9a364f","S2sBltrPfd8a7ICuD7CuH","GLQ2pmkJUNUa93THBDVsD","md6xitz4exia2joa06i490b","oWCuBXOg6JWfZzjmKxmNl","jOmhZ8ovLYTPbpM1vqSDx","p9bov84s0isgkl1ysaw93kk","FraC6xzLy1ei91l1ICyc9","6ceBas2RE9Q4787GDngH7","734cd78d-0bc9-426b-803d-1efc84dfffe5","k4Bb09px6r0FxIRs49SXV","oaG3H1S9IUBO644nGZigu","Ka7agQJkUMRSWN0uFdkWK","si3z090WsiLasMhJBa1Az","hs6rwzt4mogiicoc4gcykbi","ljKAVERmdEiKLK9hXGKBm","zxt3lhonfdhglvijd17ua8c","dd7dopve1dudqkoibkqvti4","923tgifqf59ovv5yldtyi0a","vrjwp01goqw47fqctm4f4lo","c99gdmmppju3r1tth8cb2jx","z2pvn5qxdz84zgygqzxage8"],"parent":null,"data":{},"body":"This Dendron vault of tech knowledge is organized according to domains and their sub-domains, along with specific implementation of those domains.\n\nFor instance, Git itself is a domain. Sub-domains of Git would include things like `commit`,\n`tags`, `reflog` etc. implementations of each of those could be `cli`, `strat`\n(strategies), `inner`, and so on.\n\nThe goal of the wiki is to present data in a manner that is from the perspective\nof a querying user. Here, a user is a programmer wanting to get key information\nfrom a specific domain. For instance, if a user wants to use postgres functions\nand hasn't done them in a while, they should be able to query\n`postgres.functions` to see what information is available to them.\n\nThis wiki has been written with myself in mind. While learning each of these\ndomains, I have been sensitive to the \"aha\" moments and have noted down my\ninsights as they arose. I have refrained from capturing information that I\nconsidered obvious or otherwise non-beneficial to my own understanding.\n\nAs a result, I have allowed myself to use potentially arcane concepts to explain other ones. For example, in my note on [[unit testing|testing.method.unit]], I have made reference to the [[microservices|general.arch.microservice]] note. If these notes were made with the public in mind, this would be a very bad strategy, given that you'd have to understand microservices to be able to draw that same parallel that I've already drawn. Since these notes are written for myself, I have been fine with taking these liberties.\n\nWhat I hope to gain from this wiki is the ability to step away from any\ngiven domain for a long period of time, and be able to be passably useful for\nwhatever my goals are within a short period of time. Of course this is all\nvague sounding, and really depends on the domain along with the ends I am\ntrying to reach.\n\nTo achieve this, the system should be steadfast to:\n- be able to put information in relatively easily, without too much thought\n\trequired to its location. While location is important, Dendron makes it easy\n\tto relocate notes, if it becomes apparent that a different place makes more\n\tsense.\n- be able to extract the information that is needed, meaning there is a\n\thigh-degree in confidence in the location of the information. The idea is\n\tthat information loses a large amount of its value when it is unfindable.\n\tTherefore, a relatively strict ideology should be used when determining\n\twhere a piece of information belongs.\n\t- Some concepts might realistically belong to multiple domains. For instance, the concept of *access modifiers* can be found in both `C#` and `Typescript`. Therefore, this note should be abstracted to a common place, such as [[OOP|paradigm.oop]].\n\nThis Dendron vault is the sister component to the [General Second Brain](https://tech.kyletycholiz.com).\n\n### Tags\nThroughout the garden, I have made use of tags, which give semantic meaning to the pieces of information.\n\n- `ex.` - Denotes an *example* of the preceding piece of information\n- `spec:` - Specifies that the preceding information has some degree of *speculation* to it, and may not be 100% factual. Ideally this gets clarified over time as my understanding develops.\n- `anal:` - Denotes an *analogy* of the preceding information. Often I will attempt to link concepts to others that I have previously learned.\n- `mn:` - Denotes a *mnemonic*\n- `expl:` - Denotes an *explanation*\n\n## Resources\n### UE (Unexamined) Resources\nOften, I come across sources of information that I believe to be high-quality. They may be recommendations or found in some other way. No matter their origin, I may be in a position where I don't have the time to fully examine them (and properly extract notes), or I may not require the information at that moment in time. In cases like these, I will add reference to a section of the note called **UE Resources**. The idea is that in the future when I am ready to examine them, I have a list of resources that I can start with. This is an alternative strategy to compiling browser bookmarks, which I've found can quickly become untenable.\n\n### E (Examined) Resources\nOnce a resource has been thoroughly examined and has been mined for notes, it will be moved from *UE Resources* to *E Resources*. This is to indicate that (in my own estimation), there is nothing more to be gained from the resource that is not already in the note.\n\n### Resources\nThis heading is for inexhaustible resources. \n- A prime example would be a quality website that continually posts articles.  - Another example would be a tool, such as software that measures frequencies in a room to help acoustically treat it.\n"},"collectionChildren":null,"customHeadContent":null,"config":{"version":5,"dev":{"enablePreviewV2":true},"commands":{"lookup":{"note":{"selectionMode":"extract","confirmVaultOnCreate":false,"leaveTrace":false,"bubbleUpCreateNew":true,"fuzzThreshold":0.2,"vaultSelectionModeOnCreate":"smart"}},"insertNote":{"initialValue":"templates"},"insertNoteLink":{"aliasMode":"none","enableMultiSelect":false},"insertNoteIndex":{"enableMarker":false},"randomNote":{},"copyNoteLink":{"aliasMode":"title"},"templateHierarchy":"template"},"workspace":{"dendronVersion":"0.83.0","vaults":[{"fsPath":"../main/tech","name":"tech"}],"journal":{"dailyDomain":"daily","name":"journal","dateFormat":"y.MM.dd","addBehavior":"childOfDomain"},"scratch":{"name":"scratch","dateFormat":"y.MM.dd.HHmmss","addBehavior":"asOwnDomain"},"graph":{"zoomSpeed":1,"createStub":false},"enableAutoCreateOnDefinition":false,"enableXVaultWikiLink":false,"enableRemoteVaultInit":true,"workspaceVaultSyncMode":"noCommit","enableAutoFoldFrontmatter":true,"maxPreviewsCached":10,"maxNoteLength":204800,"task":{"name":"","dateFormat":"","addBehavior":"childOfCurrent","statusSymbols":{"":" ","wip":"w","done":"x","assigned":"a","moved":"m","blocked":"b","delegated":"l","dropped":"d","pending":"y"},"prioritySymbols":{"H":"high","M":"medium","L":"low"},"todoIntegration":false,"createTaskSelectionType":"selection2link","taskCompleteStatus":["done","x"]},"enableUserTags":true,"enableHashTags":true,"enableEditorDecorations":true,"enableFullHierarchyNoteTitle":false},"preview":{"enableFMTitle":true,"enableNoteTitleForLink":true,"enableMermaid":true,"enablePrettyRefs":true,"enableKatex":true,"automaticallyShowPreview":false,"enableFrontmatterTags":true,"enableHashesForFMTags":false},"publishing":{"enableFMTitle":true,"enableNoteTitleForLink":true,"enablePrettyRefs":true,"enableKatex":true,"copyAssets":true,"siteHierarchies":["root"],"writeStubs":false,"siteRootDir":"docs","seo":{"title":"Dendron","description":"The Tech Digital Garden of Kyle Tycholiz"},"github":{"cname":"tech.kyletycholiz.com","enableEditLink":true,"editLinkText":"Edit this page on GitHub","editBranch":"master","editViewMode":"tree"},"enableSiteLastModified":true,"enableFrontmatterTags":true,"enableHashesForFMTags":false,"enableRandomlyColoredTags":true,"enableTaskNotes":true,"enablePrettyLinks":true,"searchMode":"lookup","enableMermaid":true,"siteUrl":"https://tech.kyletycholiz.com","duplicateNoteBehavior":{"action":"useVault","payload":["tech"]},"siteFaviconPath":"favicon.ico","siteIndex":"root"}}},"__N_SSG":true}