{"pageProps":{"note":{"id":"ryBzcGWSKyybRXnyKxteV","title":"Kubernetes Service","desc":"","updated":1672156312256,"created":1622066718177,"custom":{},"fname":"k8s.objects.service","type":"note","vault":{"fsPath":"../main/tech","name":"tech"},"contentHash":"9d0db2960f86ef3091878aaba97ccc97","links":[{"type":"wiki","from":{"fname":"k8s.objects.service","id":"ryBzcGWSKyybRXnyKxteV","vaultName":"tech"},"value":"k8s.objects.pod","alias":"pods","position":{"start":{"line":3,"column":60,"offset":75},"end":{"line":3,"column":84,"offset":99},"indent":[]},"xvault":false,"sameFile":false,"to":{"fname":"k8s.objects.pod"}},{"type":"wiki","from":{"fname":"k8s.objects.service","id":"ryBzcGWSKyybRXnyKxteV","vaultName":"tech"},"value":"k8s.objects.pod","alias":"Pods","position":{"start":{"line":13,"column":7,"offset":978},"end":{"line":13,"column":31,"offset":1002},"indent":[]},"xvault":false,"sameFile":false,"to":{"fname":"k8s.objects.pod"}},{"type":"wiki","from":{"fname":"k8s.objects.service","id":"ryBzcGWSKyybRXnyKxteV","vaultName":"tech"},"value":"k8s.objects.pod","alias":"pods","position":{"start":{"line":25,"column":32,"offset":1935},"end":{"line":25,"column":56,"offset":1959},"indent":[]},"xvault":false,"sameFile":false,"to":{"fname":"k8s.objects.pod"}},{"type":"wiki","from":{"fname":"k8s.objects.service","id":"ryBzcGWSKyybRXnyKxteV","vaultName":"tech"},"value":"k8s.node.worker.components.kube-proxy","alias":"Kube Proxy","position":{"start":{"line":32,"column":60,"offset":2502},"end":{"line":32,"column":112,"offset":2554},"indent":[]},"xvault":false,"sameFile":false,"to":{"fname":"k8s.node.worker.components.kube-proxy"}},{"type":"wiki","from":{"fname":"k8s.objects.service","id":"ryBzcGWSKyybRXnyKxteV","vaultName":"tech"},"value":"k8s.addons.kube-dns","alias":"Kube DNS","position":{"start":{"line":32,"column":143,"offset":2585},"end":{"line":32,"column":175,"offset":2617},"indent":[]},"xvault":false,"sameFile":false,"to":{"fname":"k8s.addons.kube-dns"}},{"type":"wiki","from":{"fname":"k8s.objects.service","id":"ryBzcGWSKyybRXnyKxteV","vaultName":"tech"},"value":"k8s.objects.service.types","position":{"start":{"line":45,"column":1,"offset":3845},"end":{"line":45,"column":30,"offset":3874},"indent":[]},"xvault":false,"sameFile":false,"to":{"fname":"k8s.objects.service.types"}},{"type":"wiki","from":{"fname":"k8s.objects.service","id":"ryBzcGWSKyybRXnyKxteV","vaultName":"tech"},"value":"k8s.addons.kube-dns","position":{"start":{"line":51,"column":8,"offset":4354},"end":{"line":51,"column":31,"offset":4377},"indent":[]},"xvault":false,"sameFile":false,"to":{"fname":"k8s.addons.kube-dns"}},{"type":"ref","from":{"fname":"k8s.objects.service","id":"ryBzcGWSKyybRXnyKxteV","vaultName":"tech"},"value":"k8s.kubectl.cli","position":{"start":{"line":63,"column":1,"offset":5011},"end":{"line":63,"column":69,"offset":5079},"indent":[]},"xvault":true,"to":{"fname":"k8s.kubectl.cli","anchorHeader":"list-env-variables-in-a-pod,1:#*","vaultName":"code"}},{"from":{"fname":"k8s.probes","id":"yXKyirBsh45VQgOiWcuC4","vaultName":"tech"},"type":"backlink","position":{"start":{"line":30,"column":20,"offset":1148},"end":{"line":30,"column":52,"offset":1180},"indent":[]},"value":"k8s.objects.service"},{"from":{"fname":"k8s.controllers.endpoint","id":"jfPWYYm0N62ErYEgNJnLh","vaultName":"tech"},"type":"backlink","position":{"start":{"line":2,"column":108,"offset":108},"end":{"line":2,"column":139,"offset":139},"indent":[]},"value":"k8s.objects.service"},{"from":{"fname":"k8s.objects.deployment","id":"ZK0P0va9kOJGsM9X7X2Td","vaultName":"tech"},"type":"backlink","position":{"start":{"line":20,"column":85,"offset":1769},"end":{"line":20,"column":117,"offset":1801},"indent":[]},"value":"k8s.objects.service"},{"from":{"fname":"k8s.objects.ingress","id":"4b0Xz0VUtXbFaFl1Pri9E","vaultName":"tech"},"type":"backlink","position":{"start":{"line":6,"column":144,"offset":478},"end":{"line":6,"column":175,"offset":509},"indent":[]},"value":"k8s.objects.service"},{"from":{"fname":"k8s.objects.ingress","id":"4b0Xz0VUtXbFaFl1Pri9E","vaultName":"tech"},"type":"backlink","position":{"start":{"line":18,"column":96,"offset":1308},"end":{"line":18,"column":128,"offset":1340},"indent":[]},"value":"k8s.objects.service"}],"anchors":{"what-is-it":{"type":"header","text":"What is it?","value":"what-is-it","line":8,"column":0,"depth":2},"service-type":{"type":"header","text":"Service Type","value":"service-type","line":50,"column":0,"depth":2},"service-discovery":{"type":"header","text":"Service discovery","value":"service-discovery","line":53,"column":0,"depth":2},"services-and-env-variables":{"type":"header","text":"Services and Env Variables","value":"services-and-env-variables","line":66,"column":0,"depth":3},"service-discovery-breakdown":{"type":"header","text":"Service discovery breakdown","value":"service-discovery-breakdown","line":75,"column":0,"depth":3},"motivation":{"type":"header","text":"Motivation","value":"motivation","line":90,"column":0,"depth":3},"under-the-hood--adding-a-service":{"type":"header","text":"Under the hood — Adding a service","value":"under-the-hood--adding-a-service","line":96,"column":0,"depth":3},"selector":{"type":"header","text":"Selector","value":"selector","line":110,"column":0,"depth":3},"request-forwarding":{"type":"header","text":"Request forwarding","value":"request-forwarding","line":122,"column":0,"depth":3},"example":{"type":"header","text":"Example","value":"example","line":126,"column":0,"depth":2}},"children":["9YspU1V7eJ9rz91kiTrUN"],"parent":"697fe32a-7fd3-40cb-aa25-9914c7dde11f","data":{}},"body":"<h1 id=\"kubernetes-service\">Kubernetes Service<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#kubernetes-service\"></a></h1>\n<h2 id=\"what-is-it\">What is it?<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#what-is-it\"></a></h2>\n<p>A Service is an abstraction which defines a logical set of <a href=\"/notes/a9WtJDyCZ4NvEaAZ4p3bd\">pods</a>, and the policy by which they can be accessed.</p>\n<ul>\n<li>this \"set\" is determined by a <em>selector</em></li>\n<li>a Service is what allows our consumer pods to not care about which provider pods they are getting data from. In other words, without Services, we'd have to know the IP addresses to connect to. With Services, we (as the consumer pod) get to just say \"connect me to any pod within that Service\".</li>\n</ul>\n<p>Services enable communication between pods</p>\n<ul>\n<li>Without services, the only communication available by default is between containers within a single pod (via localhost)\n<ul>\n<li>this is because pods by nature are ephemeral. While true that a pod could communicate to another pod by knowing its IP address, once that pod is destroyed and recreated it's given a new IP and thus no longer reachable by the previous means.</li>\n</ul>\n</li>\n</ul>\n<p>Services should not be used to enable external access to an application.</p>\n<p>While <a href=\"/notes/a9WtJDyCZ4NvEaAZ4p3bd\">Pods</a> come and go, Services provide a stable endpoint to access them. </p>\n<ul>\n<li>therefore, we generally never send requests directly to a pod but always through a service.</li>\n<li>The link between services and pods happens through labels. Any pod that has the labels defined in the service’s selector can receive requests sent to that service.</li>\n</ul>\n<p>Services are based on resources.</p>\n<ul>\n<li>ex. we create a service based on Pods through a ReplicaSet. Put another way, a service is created by exposing the ReplicaSet. This is why we specify the resource type when we are running <code>kubectl expose</code></li>\n</ul>\n<p>A service is an abstract way to expose an application (running on a set of Pods) as a network service.</p>\n<ul>\n<li>this decouples work definitions from the pods</li>\n<li>can be thought of as a logical set of pods and a policy by which to access them\n<ul>\n<li>the front end shouldn't care which backend it uses. Services allow us to achieve this decoupling</li>\n</ul>\n</li>\n</ul>\n<p>A service sits in front of the <a href=\"/notes/a9WtJDyCZ4NvEaAZ4p3bd\">pods</a> and takes care of receiving requests and delivering them to all the pods that are behind it.</p>\n<p>Without a service object,</p>\n<ul>\n<li>we'd need to use <code>port-forward</code> to redirect traffic from our local machine to a pod. Otherwise, a user that doesn’t have access to our Kubernetes cluster is not able to access this application</li>\n<li>pods can't communicate with each other, short of hard-coding their IP address (which resets whenever the pod is re-created)</li>\n<li>requests only set sent to a single pod</li>\n</ul>\n<p>A service provides access to pods from inside the cluster (<a href=\"/notes/clSKUsYY2MnJsItlIXbTa\">Kube Proxy</a>) or from outside the cluster (<a href=\"/notes/7cJuYu1XU2jd1A4C0WS7v\">Kube DNS</a>)</p>\n<p>A service tells the rest of the Kubernetes environment (including other pods and replication controllers) what services your application provides. While pods come and go, the service IP addresses and ports remain the same.  Other applications can find your service through Kurbernetes service discovery</p>\n<p>Since pods of a single service can exist on different machines, it makes sense for us to be able to interact with the service itself, so that we can orchestrate activities between all containers that are part of a service(?)</p>\n<p>When a service is created, it inherits all of the labels of the resource type (eg. ReplicaSet) that the service is based on.</p>\n<ul>\n<li>The service is not directly associated with any controller (eg. ReplicaSet), but rather it is associated with the underlying Pods via the matching labels.</li>\n</ul>\n<p>The problem with services is that each application can be reached through a different port, and we cannot expect users to know the port of each service in our cluster.</p>\n<ul>\n<li>it is a bad practice to publish fixed ports through Services, because it is likely to result in conflicts or, at the very least, create the additional burden of carefully keeping track of which port belongs to which Service.</li>\n</ul>\n<h2 id=\"service-type\">Service Type<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#service-type\"></a></h2>\n<p><a href=\"/notes/9YspU1V7eJ9rz91kiTrUN\">Service Types</a></p>\n<h2 id=\"service-discovery\">Service discovery<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#service-discovery\"></a></h2>\n<p>Given that we have a few applications running in our cluster, each backed by a Kubernetes service providing a stable endpoint that we can use to reach them, we still need a way to actually find these services. That is, if <code>app-a</code> wants to talk to <code>app-b</code> using <code>service-b</code>, how does it know where it should send requests to?</p>\n<p>Services can be accessed by hard-coding the IP address, but preferably, they can be discovered through two principal modes:</p>\n<ul>\n<li>DNS (<a href=\"/notes/7cJuYu1XU2jd1A4C0WS7v\">Kube DNS</a>)\n<ul>\n<li>ex. If you create a service called <code>service-a</code>, Kubernetes will add an entry for this service in its DNS, so any pod will be able to call, for example, <code>http://service-a:4567</code>. That will be correctly resolved to the service’s IP</li>\n<li>DNS is the easier approach</li>\n</ul>\n</li>\n<li>Injected environment variables\n<ul>\n<li>since the env variables are never updated, they aren't as reliable as the DNS approach</li>\n</ul>\n</li>\n</ul>\n<p>Kubernetes converts Service names into DNS's and adds them to the DNS server.</p>\n<ul>\n<li>This is a cluster add-on that is already set up by Minikube.</li>\n</ul>\n<h3 id=\"services-and-env-variables\">Services and Env Variables<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#services-and-env-variables\"></a></h3>\n<p>Every Pod gets environment variables for each of the active Services\n</p><p></p><div class=\"portal-container\">\n<div class=\"portal-head\">\n<div class=\"portal-backlink\">\n<div class=\"portal-title\">From <span class=\"portal-text-title\">Kubectl CLI</span></div>\n<a href=\"/notes/HnABgT2HZRrecgV5YHg8X\" class=\"portal-arrow\">Go to text <span class=\"right-arrow\">→</span></a>\n</div>\n</div>\n<div id=\"portal-parent-anchor\" class=\"portal-parent\" markdown=\"1\">\n<div class=\"portal-parent-fader-top\"></div>\n<div class=\"portal-parent-fader-bottom\"></div><p>Start anchor list-env-variables-in-a-pod not found</p>\n</div></div><p></p><p></p>\n<p>Env provide a reference we can use to connect to a Service and, therefore to the related Pods.</p>\n<p>Through the service IP (<code>kubectl describe svc &#x3C;servicename></code>), we can access the service externally. This IP matches the values of the environment variables <code>GO_DEMO_2_DB_*</code> and <code>GO_DEMO_2_DB_SERVICE_HOST</code>.</p>\n<h3 id=\"service-discovery-breakdown\">Service discovery breakdown<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#service-discovery-breakdown\"></a></h3>\n<ol>\n<li>When the api container go-demo-2 tries to connect with the go-demo-2-db Service, it looks at the nameserver configured in /etc/resolv.conf.\n<ul>\n<li>kubelet configured the nameserver with the kube-dns Service IP (10.96.0.10) during the Pod scheduling process.</li>\n</ul>\n</li>\n<li>The container queries the DNS server listening to port 53. go-demo-2-db DNS gets resolved to the service IP 10.0.0.19.\n<ul>\n<li>This DNS record was added by kube-dns during the service creation process.</li>\n</ul>\n</li>\n<li>The container uses the service IP which forwards requests through the iptables rules.\n<ul>\n<li>They were added by kube-proxy during Service and Endpoint creation process.</li>\n</ul>\n</li>\n<li>Since we only have one replica of the go-demo-2-db Pod, iptables forwards requests to just one endpoint.\n<ul>\n<li>If we had multiple replicas, iptables would act as a load balancer and forward requests randomly among Endpoints of the Service</li>\n</ul>\n</li>\n</ol>\n<p><img src=\"/assets/images/2021-06-01-08-40-26.png\"></p>\n<hr>\n<h3 id=\"motivation\">Motivation<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#motivation\"></a></h3>\n<p>Each Pod gets its own IP address, however in a Deployment, the set of Pods running in one moment in time could be different from the set of Pods running that application a moment later.</p>\n<p>This leads to a problem: if some set of Pods (call them “backends”) provides functionality to other Pods (call them “frontends”) inside your cluster, how do the frontends find out and keep track of which IP address to connect to, so that the frontend can use the backend part of the workload?</p>\n<h3 id=\"under-the-hood--adding-a-service\">Under the hood — Adding a service<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#under-the-hood--adding-a-service\"></a></h3>\n<ol>\n<li>In running <code>kubectl expose rs -f rs/go-demo-2.yml</code>, Kubernetes client (kubectl) sent a request to the API server requesting the creation of the Service based on Pods created through the go-demo-2 ReplicaSet.</li>\n<li>Endpoint controller is watching the API server for new service events. It detected that there is a new Service object.</li>\n<li>Endpoint controller created endpoint objects with the same name as the Service, and it used Service selector to identify endpoints (in this case the IP and the port of go-demo-2 Pods).</li>\n<li>kube-proxy is watching for service and endpoint objects. It detected that there is a new Service and a new endpoint object.</li>\n<li>kube-proxy added iptables rules which capture traffic to the Service port and redirect it to endpoints. For each endpoint object, it adds iptables rule which selects a Pod.</li>\n<li>The kube-dns add-on is watching for Service. It detected that there is a new service.</li>\n<li>The kube-dns added db's record to the dns server (skydns).\n<img src=\"/assets/images/2021-05-31-10-06-52.png\">\n<img src=\"/assets/images/2021-05-31-21-38-25.png\"></li>\n</ol>\n<hr>\n<h3 id=\"selector\">Selector<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#selector\"></a></h3>\n<p>A service contains selector labels which are used to establish communication with the Pods containing the matching labels. There is no relation between the service and the ReplicaSet; both reference Pods through labels.</p>\n<p>The selector is used by the Service to know which Pods should receive requests. It works in the same way as ReplicaSet selectors. In this case, we defined that the service should forward requests to Pods with labels type set to backend and service set to go-demo. Those two labels are set in the Pods spec of the ReplicaSet.</p>\n<pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">selector</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">type</span><span class=\"token punctuation\">:</span> backend\n  <span class=\"token key atrule\">service</span><span class=\"token punctuation\">:</span> go<span class=\"token punctuation\">-</span>demo<span class=\"token punctuation\">-</span><span class=\"token number\">2</span>\n</code></pre>\n<h3 id=\"request-forwarding\">Request forwarding<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#request-forwarding\"></a></h3>\n<p>Each Pod has a unique IP. Incoming requests will be forwarded on to Pods in a round-robin style, that is similar to load balancing.</p>\n<h2 id=\"example\">Example<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#example\"></a></h2>\n<pre class=\"language-yml\"><code class=\"language-yml\"><span class=\"token key atrule\">apiVersion</span><span class=\"token punctuation\">:</span> v1\n<span class=\"token key atrule\">kind</span><span class=\"token punctuation\">:</span> Service\n<span class=\"token key atrule\">metadata</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> hellok8s<span class=\"token punctuation\">-</span>svc\n<span class=\"token key atrule\">spec</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">type</span><span class=\"token punctuation\">:</span> NodePort\n  <span class=\"token key atrule\">selector</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">app</span><span class=\"token punctuation\">:</span> hellok8s\n  <span class=\"token key atrule\">ports</span><span class=\"token punctuation\">:</span>\n  <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">port</span><span class=\"token punctuation\">:</span> <span class=\"token number\">4567</span>\n    <span class=\"token key atrule\">nodePort</span><span class=\"token punctuation\">:</span> <span class=\"token number\">30001</span>\n</code></pre>\n<p>Of note here, we have:</p>\n<ul>\n<li><code>kind: Service</code></li>\n<li>give it a name with <code>name: kellok8s-svc</code></li>\n<li><code>spec</code> section</li>\n</ul>\n<hr>\n<strong>Children</strong>\n<ol>\n<li><a href=\"/notes/9YspU1V7eJ9rz91kiTrUN\">Service Types</a></li>\n</ol>\n<hr>\n<strong>Backlinks</strong>\n<ul>\n<li><a href=\"/notes/yXKyirBsh45VQgOiWcuC4\">Probes</a></li>\n<li><a href=\"/notes/jfPWYYm0N62ErYEgNJnLh\">Endpoint Controller</a></li>\n<li><a href=\"/notes/ZK0P0va9kOJGsM9X7X2Td\">Deployment</a></li>\n<li><a href=\"/notes/4b0Xz0VUtXbFaFl1Pri9E\">Kubernetes Ingress</a></li>\n</ul>","noteIndex":{"id":"olZIVfSs2uLLr3BppFh4K","title":"Digital Garden","desc":"","updated":1674517603573,"created":1615482407722,"custom":{"nav_order":0,"permalink":"/"},"fname":"root","type":"note","vault":{"fsPath":"../main/tech","name":"tech"},"contentHash":"effb007003ca6a91d7fd0c293e1d2436","links":[{"type":"wiki","from":{"fname":"root","id":"olZIVfSs2uLLr3BppFh4K","vaultName":"tech"},"value":"testing.method.unit","alias":"unit testing","position":{"start":{"line":18,"column":121,"offset":1146},"end":{"line":18,"column":157,"offset":1182},"indent":[]},"xvault":false,"sameFile":false,"to":{"fname":"testing.method.unit"}},{"type":"wiki","from":{"fname":"root","id":"olZIVfSs2uLLr3BppFh4K","vaultName":"tech"},"value":"general.arch.microservice","alias":"microservices","position":{"start":{"line":18,"column":188,"offset":1213},"end":{"line":18,"column":231,"offset":1256},"indent":[]},"xvault":false,"sameFile":false,"to":{"fname":"general.arch.microservice"}},{"type":"wiki","from":{"fname":"root","id":"olZIVfSs2uLLr3BppFh4K","vaultName":"tech"},"value":"paradigm.oop","alias":"OOP","position":{"start":{"line":36,"column":227,"offset":2718},"end":{"line":36,"column":247,"offset":2738},"indent":[]},"xvault":false,"sameFile":false,"to":{"fname":"paradigm.oop"}}],"anchors":{"tags":{"type":"header","text":"Tags","value":"tags","line":46,"column":0,"depth":3},"resources":{"type":"header","text":"Resources","value":"resources","line":55,"column":0,"depth":2},"ue-unexamined-resources":{"type":"header","text":"UE (Unexamined) Resources","value":"ue-unexamined-resources","line":56,"column":0,"depth":3},"e-examined-resources":{"type":"header","text":"E (Examined) Resources","value":"e-examined-resources","line":59,"column":0,"depth":3},"resources-1":{"type":"header","text":"Resources","value":"resources-1","line":62,"column":0,"depth":3}},"children":["40ubf88tephzbdjte8cdsa0","zFMjbn3xihVNHjUIdZCD1","IK6NOKemuDjhfstJBovKL","ZaTr28eWk1DrXOEsc1YVb","Vi0WYVLZunVM9iR8XZJn3","ngAbg7gluvbt1bY1UIRsi","RCPPXSakm5TvKka8kOmVp","LIcuGYV0DDt1VWbvH6Sed","MPx8ykTP57I40WTZvTP7f","ZU5WmdTG1bHoE8RcmZXZG","jqWiyYJff92RjXuUQt9PQ","KihijM8OQvZ4pASkkhqzL","F9vyqvls3OBCujtukqKhy","k6jxm2b3edgkhbordpuz6v1","facc2b01-755a-409f-99f6-57bef2d1501f","bZumdyapJ2H0wWWOmJ45i","elqpgoe2r951si4xrhujppj","m5ov42Vm6mR7RQWTvl1NW","cw8cerc0cos8lh871oz8rtf","PZxxZ4iESzSlbbHJKxuAZ","UDu62Pa6BaRqlG8uGoMhy","u3zcndycwqessho5h6x0nz9","ZgCUp366YrF2Tyky2NT73","DVpVUmavSoVDA7UIlPzLX","nMCtMXVvjBsJk3iw1zoIO","ANfx9Z4a6ZA0uJuSHtbIJ","BkG557LKUYbH1DnxprEVT","1TaH8zDTM98FZ9SYaeXLM","02v7ymc144e5c4pv3edkud7","dc79799f-a55d-48ab-a8be-c48adb1b19c0","f6feef57-b8f5-451f-a09a-7b63f6a07183","4sz47Y0LKs1Si73rWtyyh","g7ulqi8no93ezeocbesc3ll","5a9fb1df-478e-4687-9be0-5cb97e61ec57","1374e9e9-1cbc-4e1f-b1ca-66b8569533dd","D8Z3rjXkSj2EOymXQXF4Z","np3c1ykvnjqv5xoombpfwqz","f529cc34-aba0-45ca-ad7e-02ddda318941","0zcauha3il2NqtxZazIo7","9bbd6f68-03b2-41f4-92e4-2ca313e8b450","5a2ab598-fa7e-4471-8bda-9f5831b679ae","uV6w4mZPoohWyZV4Xaad0","QHXEIyeZGIGMVi5Q52UWI","RgE0mZLaUjPftFPZsiAoe","mytCOts26Pidush65tdRW","fwUzxfLSPMH1eL8oBoLWx","wazdsda6h25x66edvfmeuiv","TbW7PM9bg1y5TGkiWwQ8b","xiSIDeEtIc8X0lpUQlppI","0jxgntiLNHWFuCbzqtFGF","GkdMprLUe4QQULBxmGN6V","4SYc6v5hxY5g6Ip6kjpwO","czi7ilt2i1uoqm1f2otbntj","fqVQpS9FBiXgKsZX3R3sJ","L5JUZlGAGvTxrsEBB7DY8","ttyri4pwfyn5lcx0vp9804o","TeTedoeS2LdHPR632eCpM","ulicRRwo3lSFzh3tMfWH9","p7d24vyb8m00ombzn34t50c","e65188a1-177e-4ab2-99f9-75f85d537621","fajYnbVhCRDi74xn0H30R","bArGdGwqo3iFkyKMyE7qR","4Dcp7gbEVoLLgfu7bXFai","5d700782-fb81-416e-83f9-5dd88260e350","zubgzhNFE6KlTgXcjTz6O","8lpdfWa0cbSq1XJQbcYcY","2psluywdc416t7vrql0m058","17I8ZksXvqCH1mRtZDjHp","kF916Ow84qpJJeMRkWMIo","tMLkLcrIHHBz56xVmBLkP","CSePBQ6q7qhowKESqVwt7","laZ4OfLhZNK1Kuy6GaWUr","z5IJblOknQhMzZ5QZh4ye","N36FHxfxzwJfxDY3miWyX","3bb25f58-2b50-4fa3-af55-48ea9f88a081","7x07qjgbitozdfszqzuy7ix","u93Rz4fEWGu6VBR30Zraf","9hjMHnKvYT4jLKvuDSXaV","qC5GxCZBmNb4Ip6c0kU8x","LgW7mTIALODoXc54B3p6S","UYPxfHBFWX7fb6hHU5bB6","74lYtC8NKpCzcyFOZTfR1","sEoBNAEuaTxwSmTXDonZt","dj0jr9mpvs62e2pkg3zc3yy","z8ie0xjogb6ht7gzowav5xr","qxSOd6SPN8qf9ZUojVFDX","WQoMTf6VXBaxCgksXAVsj","2Mw4XgfyCHXHNOX5yoCIY","qcdt2f7jo51muquo5r95dpo","0XJqmcdtcMZu66glBI5O8","lK8r8BXS4ThiUTe4xKIZe","93de42ca-53ea-460a-baa7-b9ec5c47cb1e","Rxs2jaGpdFzqYtP7lAJFJ","aO8W81Z0PyIb6Hs7nOHPW","lhzisalkebu4w5n01np07i0","7b5l4b6fi65n7sv9org5q1l","I01hENHnh8Tqu3Ok8sLzG","03o3n0hz9v9jtb7j889zpd4","evqsPNutOaZ8hcBCqxFQu","zhhxcjZUHdU8uRLwGb9Zh","G1aFACZB2ooWGMGwyd3ZW","YWy1C4tgoaCcw1m8JJsr7","Szj3o5iaNxPpesiCqwrbu","613syb18hb3v0u1ydvor7ru","XhvCDW3fIw6h6MhY5ticq","Q70g7SusFZBQXzkuQifv4","AzfWDH3wp7jFpL2EYxBcW","y0fwpZ9qMqirsLiFyOciU","ZF8xj8wwDUqKlrwTrCFZ1","tAJvhqhdfyZZa87QHq1TU","4hRmipi8lxpBLyzWu5JVB","iTg0C7QjvnmqBZeEigJNs","3babc3d2-79ae-470a-9c06-ab8bba2e684e","bF3UsMFya3fMeXWDspVov","ULkfbL9WpktbVYnzhl6Jw","PpNOO8JYWe6dM8wruSa7x","di40pCxDn7IiqE8lFdD46","rmW0mkerqV35I8QPji6lM","3IFIK1ByzeIxZCByryGLN","iImkYAKfkw3beAl6pLbDn","ecDe8DNWrkeQTwpTEvHje","i2it5id8qwtg27n4usg8bo1","Yqhdd9mSJGN7OJOeyoSD2","Ws5tah8tpeyn9tK8VBTg8","gWAg15uBJgkS2B0wcpMAa","l7V3v2ep1YdDCt7DOr7Ci","yM2PJBdqJnHpD63cPA6sW","qn0bre7eLbi3QMbCfWkUi","fSu0KxFL41IRouotqmbHs","0gtg24Mj1a1bQFPRGQNlO","7iQPBMltLPLbFEz2qbjPu","yoh4pwoXcfELInGKRdYf6","dCGCWXgAmiOZXbdULT1m6","jMavlje07sNa6hSEIE8WA","Xxm0JE4dKHxrQAaZfzvxD","nRb6Im4Kcmc2ZWE7K1jZ1","PAEBZCyFBZJyR7OoMZ41E","PQ6km8RgRCuyICBPOYz8f","x5tm1nfjzyawwzedy3yitgd","2bhftt8rGuxYu4pFgNqru","hjYIZpHQWuXfeEoGeJEKW","K2M9bQqVq2eQfm29eslKL","X8obW1iKwYsvNgKWGyCzy","yJwSC7hqYIezTFHf5i0Ev","c4Z7ETcOHUILRMH32Sfjw","qiR6dIu857b9M9kTqjOyK","fc2coz74cnfy5czzofx4h5x","Ku1OgHMhELajzo61Gx7ye","LUrfhDWo8wuwZu7CN9TV8","osu6JGOnvXJ5gt3tpqWZY","1a6173cd-cf13-4b34-a522-8350bf9a364f","S2sBltrPfd8a7ICuD7CuH","GLQ2pmkJUNUa93THBDVsD","md6xitz4exia2joa06i490b","oWCuBXOg6JWfZzjmKxmNl","jOmhZ8ovLYTPbpM1vqSDx","p9bov84s0isgkl1ysaw93kk","FraC6xzLy1ei91l1ICyc9","6ceBas2RE9Q4787GDngH7","734cd78d-0bc9-426b-803d-1efc84dfffe5","k4Bb09px6r0FxIRs49SXV","oaG3H1S9IUBO644nGZigu","Ka7agQJkUMRSWN0uFdkWK","si3z090WsiLasMhJBa1Az","hs6rwzt4mogiicoc4gcykbi","ljKAVERmdEiKLK9hXGKBm","zxt3lhonfdhglvijd17ua8c","dd7dopve1dudqkoibkqvti4","923tgifqf59ovv5yldtyi0a","vrjwp01goqw47fqctm4f4lo","c99gdmmppju3r1tth8cb2jx","z2pvn5qxdz84zgygqzxage8"],"parent":null,"data":{},"body":"This Dendron vault of tech knowledge is organized according to domains and their sub-domains, along with specific implementation of those domains.\n\nFor instance, Git itself is a domain. Sub-domains of Git would include things like `commit`,\n`tags`, `reflog` etc. implementations of each of those could be `cli`, `strat`\n(strategies), `inner`, and so on.\n\nThe goal of the wiki is to present data in a manner that is from the perspective\nof a querying user. Here, a user is a programmer wanting to get key information\nfrom a specific domain. For instance, if a user wants to use postgres functions\nand hasn't done them in a while, they should be able to query\n`postgres.functions` to see what information is available to them.\n\nThis wiki has been written with myself in mind. While learning each of these\ndomains, I have been sensitive to the \"aha\" moments and have noted down my\ninsights as they arose. I have refrained from capturing information that I\nconsidered obvious or otherwise non-beneficial to my own understanding.\n\nAs a result, I have allowed myself to use potentially arcane concepts to explain other ones. For example, in my note on [[unit testing|testing.method.unit]], I have made reference to the [[microservices|general.arch.microservice]] note. If these notes were made with the public in mind, this would be a very bad strategy, given that you'd have to understand microservices to be able to draw that same parallel that I've already drawn. Since these notes are written for myself, I have been fine with taking these liberties.\n\nWhat I hope to gain from this wiki is the ability to step away from any\ngiven domain for a long period of time, and be able to be passably useful for\nwhatever my goals are within a short period of time. Of course this is all\nvague sounding, and really depends on the domain along with the ends I am\ntrying to reach.\n\nTo achieve this, the system should be steadfast to:\n- be able to put information in relatively easily, without too much thought\n\trequired to its location. While location is important, Dendron makes it easy\n\tto relocate notes, if it becomes apparent that a different place makes more\n\tsense.\n- be able to extract the information that is needed, meaning there is a\n\thigh-degree in confidence in the location of the information. The idea is\n\tthat information loses a large amount of its value when it is unfindable.\n\tTherefore, a relatively strict ideology should be used when determining\n\twhere a piece of information belongs.\n\t- Some concepts might realistically belong to multiple domains. For instance, the concept of *access modifiers* can be found in both `C#` and `Typescript`. Therefore, this note should be abstracted to a common place, such as [[OOP|paradigm.oop]].\n\nThis Dendron vault is the sister component to the [General Second Brain](https://tech.kyletycholiz.com).\n\n### Tags\nThroughout the garden, I have made use of tags, which give semantic meaning to the pieces of information.\n\n- `ex.` - Denotes an *example* of the preceding piece of information\n- `spec:` - Specifies that the preceding information has some degree of *speculation* to it, and may not be 100% factual. Ideally this gets clarified over time as my understanding develops.\n- `anal:` - Denotes an *analogy* of the preceding information. Often I will attempt to link concepts to others that I have previously learned.\n- `mn:` - Denotes a *mnemonic*\n- `expl:` - Denotes an *explanation*\n\n## Resources\n### UE (Unexamined) Resources\nOften, I come across sources of information that I believe to be high-quality. They may be recommendations or found in some other way. No matter their origin, I may be in a position where I don't have the time to fully examine them (and properly extract notes), or I may not require the information at that moment in time. In cases like these, I will add reference to a section of the note called **UE Resources**. The idea is that in the future when I am ready to examine them, I have a list of resources that I can start with. This is an alternative strategy to compiling browser bookmarks, which I've found can quickly become untenable.\n\n### E (Examined) Resources\nOnce a resource has been thoroughly examined and has been mined for notes, it will be moved from *UE Resources* to *E Resources*. This is to indicate that (in my own estimation), there is nothing more to be gained from the resource that is not already in the note.\n\n### Resources\nThis heading is for inexhaustible resources. \n- A prime example would be a quality website that continually posts articles.  - Another example would be a tool, such as software that measures frequencies in a room to help acoustically treat it.\n"},"collectionChildren":null,"customHeadContent":null,"config":{"version":5,"dev":{"enablePreviewV2":true},"commands":{"lookup":{"note":{"selectionMode":"extract","confirmVaultOnCreate":false,"leaveTrace":false,"bubbleUpCreateNew":true,"fuzzThreshold":0.2,"vaultSelectionModeOnCreate":"smart"}},"insertNote":{"initialValue":"templates"},"insertNoteLink":{"aliasMode":"none","enableMultiSelect":false},"insertNoteIndex":{"enableMarker":false},"randomNote":{},"copyNoteLink":{"aliasMode":"title"},"templateHierarchy":"template"},"workspace":{"dendronVersion":"0.83.0","vaults":[{"fsPath":"../main/tech","name":"tech"}],"journal":{"dailyDomain":"daily","name":"journal","dateFormat":"y.MM.dd","addBehavior":"childOfDomain"},"scratch":{"name":"scratch","dateFormat":"y.MM.dd.HHmmss","addBehavior":"asOwnDomain"},"graph":{"zoomSpeed":1,"createStub":false},"enableAutoCreateOnDefinition":false,"enableXVaultWikiLink":false,"enableRemoteVaultInit":true,"workspaceVaultSyncMode":"noCommit","enableAutoFoldFrontmatter":true,"maxPreviewsCached":10,"maxNoteLength":204800,"task":{"name":"","dateFormat":"","addBehavior":"childOfCurrent","statusSymbols":{"":" ","wip":"w","done":"x","assigned":"a","moved":"m","blocked":"b","delegated":"l","dropped":"d","pending":"y"},"prioritySymbols":{"H":"high","M":"medium","L":"low"},"todoIntegration":false,"createTaskSelectionType":"selection2link","taskCompleteStatus":["done","x"]},"enableUserTags":true,"enableHashTags":true,"enableEditorDecorations":true,"enableFullHierarchyNoteTitle":false},"preview":{"enableFMTitle":true,"enableNoteTitleForLink":true,"enableMermaid":true,"enablePrettyRefs":true,"enableKatex":true,"automaticallyShowPreview":false,"enableFrontmatterTags":true,"enableHashesForFMTags":false},"publishing":{"enableFMTitle":true,"enableNoteTitleForLink":true,"enablePrettyRefs":true,"enableKatex":true,"copyAssets":true,"siteHierarchies":["root"],"writeStubs":false,"siteRootDir":"docs","seo":{"title":"Dendron","description":"The Tech Digital Garden of Kyle Tycholiz"},"github":{"cname":"tech.kyletycholiz.com","enableEditLink":true,"editLinkText":"Edit this page on GitHub","editBranch":"master","editViewMode":"tree"},"enableSiteLastModified":true,"enableFrontmatterTags":true,"enableHashesForFMTags":false,"enableRandomlyColoredTags":true,"enableTaskNotes":true,"enablePrettyLinks":true,"searchMode":"lookup","enableMermaid":true,"siteUrl":"https://tech.kyletycholiz.com","duplicateNoteBehavior":{"action":"useVault","payload":["tech"]},"siteFaviconPath":"favicon.ico","siteIndex":"root"}}},"__N_SSG":true}