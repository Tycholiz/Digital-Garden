{"pageProps":{"note":{"id":"k4Bb09px6r0FxIRs49SXV","title":"WatermelonDB","desc":"","updated":1672156911087,"created":1615353092935,"custom":{},"fname":"watermelon","type":"note","vault":{"fsPath":"../main/tech","name":"tech"},"contentHash":"47c46cb6956941c746000c98c53fbf32","links":[{"type":"wiki","from":{"fname":"watermelon","id":"k4Bb09px6r0FxIRs49SXV","vaultName":"tech"},"value":"user.lazy","alias":"@lazy","position":{"start":{"line":58,"column":61,"offset":3182},"end":{"line":58,"column":66,"offset":3187},"indent":[]},"xvault":false,"to":{"fname":"user.lazy"}}],"anchors":{"philosophy":{"type":"header","text":"Philosophy","value":"philosophy","line":8,"column":0,"depth":2},"tables":{"type":"header","text":"Tables","value":"tables","line":12,"column":0,"depth":2},"columns":{"type":"header","text":"Columns","value":"columns","line":13,"column":0,"depth":4},"withobservables":{"type":"header","text":"withObservables","value":"withobservables","line":19,"column":0,"depth":4},"actions":{"type":"header","text":"Actions","value":"actions","line":37,"column":0,"depth":2},"migrations":{"type":"header","text":"Migrations","value":"migrations","line":41,"column":0,"depth":2},"testing-migrations-work-properly":{"type":"header","text":"Testing migrations work properly","value":"testing-migrations-work-properly","line":51,"column":0,"depth":4},"q-module":{"type":"header","text":"Q Module","value":"q-module","line":55,"column":0,"depth":2},"observable":{"type":"header","text":"Observable","value":"observable","line":61,"column":0,"depth":2},"sync":{"type":"header","text":"Sync","value":"sync","line":87,"column":0,"depth":2},"pulling":{"type":"header","text":"Pulling","value":"pulling","line":94,"column":0,"depth":4},"pushing":{"type":"header","text":"Pushing","value":"pushing","line":97,"column":0,"depth":4},"sync-limitations":{"type":"header","text":"Sync limitations","value":"sync-limitations","line":100,"column":0,"depth":4},"how-does-it-know-when-to-re-render":{"type":"header","text":"How does it know when to re-render?","value":"how-does-it-know-when-to-re-render","line":103,"column":0,"depth":4},"solutions-to":{"type":"header","text":"Solutions to:","value":"solutions-to","line":110,"column":0,"depth":2},"ue-resources":{"type":"header","text":"UE Resources","value":"ue-resources","line":113,"column":0,"depth":2}},"children":[],"parent":"olZIVfSs2uLLr3BppFh4K","data":{}},"body":"<h1 id=\"watermelondb\">WatermelonDB<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#watermelondb\"></a></h1>\n<h2 id=\"philosophy\">Philosophy<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#philosophy\"></a></h2>\n<p>declaratively define the connection between the component, and the data you want it to display. When the data changes, every component that is connected will automatically update.\nwatermelon is fast in part because it uses a declarative API. The declarative API means that all of the expensive computation is being done natively (Java or Swift). Since Javascript is quite slow compared to these 2 languages, this allows our computations to be done more efficiently.</p>\n<h2 id=\"tables\">Tables<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#tables\"></a></h2>\n<h4 id=\"columns\">Columns<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#columns\"></a></h4>\n<p>Columns have one of three types: string, number, or boolean\nFields of those types will default to '', 0, or false respectively</p>\n<p>To allow fields to be null, mark the column as isOptional: true</p>\n<h4 id=\"withobservables\">withObservables<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#withobservables\"></a></h4>\n<ul>\n<li>This is the principal way that we connect WatermelonDB to our component</li>\n<li>let's us enhance a component by turning a non-reactive component to become reactive, meaning that UI will update in accordance with localdb changes</li>\n<li>we make our component reactive by feeding it an observable for the data we want to display</li>\n</ul>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">withObservables</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">'post'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> post <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">post</span><span class=\"token operator\">:</span> post<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">observe</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// inject enhanced props into the component</span>\n  <span class=\"token literal-property property\">author</span><span class=\"token operator\">:</span> post<span class=\"token punctuation\">.</span><span class=\"token property-access\">author</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">observeCount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<ul>\n<li>above:\n<ul>\n<li><code>({ post })</code> are the input props for the component</li>\n<li>The first argument: <code>['post']</code> is a list of props that trigger observation restart. So if a different post is passed, that new post will be observed</li>\n<li>Rule of thumb: If you want to use a prop in the second arg function, pass its name in the first arg array</li>\n<li>This is also the place that we should make relations\n<ul>\n<li>the relation is enabled by the <code>@children</code> decorator on the parent model</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"actions\">Actions<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#actions\"></a></h2>\n<p>Mutation (Create, Update) queries can be made from anywhere in the app, but the preferred way is to execute them through actions</p>\n<ul>\n<li>An action is a function that can modify the database</li>\n</ul>\n<h2 id=\"migrations\">Migrations<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#migrations\"></a></h2>\n<p>Each migration must migrate to a version one above the previous migration</p>\n<ul>\n<li>of course, each migration simply builds on the previous ones, meaning that when we want to make changes, we need to add the new changes as an item in the <code>migrations</code> array (to the front) and mark it with the next integer <code>toVersion</code>.</li>\n</ul>\n<p>Steps to making schema changes:</p>\n<ol>\n<li>make the change in migrations.js</li>\n<li>wait for the error in the simulator:\n<ul>\n<li><code>Migrations can't be newer than schema. Schema is version 1 and migrations cover range from 1 to 2</code></li>\n</ul>\n</li>\n<li>if the error is there, make the change in schema.js, updating the <code>schemaVersion</code> to the latest migration</li>\n</ol>\n<h4 id=\"testing-migrations-work-properly\">Testing migrations work properly<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#testing-migrations-work-properly\"></a></h4>\n<ol>\n<li><em>Migrations test</em>: Install the previous version of your app, then update to the version you're about to ship, and make sure it still works</li>\n<li><em>Fresh schema install test</em>: Remove the app, and then install the new version of the app, and make sure it works</li>\n</ol>\n<h2 id=\"q-module\">Q Module<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#q-module\"></a></h2>\n<ul>\n<li>This module provides us to make SQL-like clauses to help construct our query\n<ul>\n<li>This is where we can use WHERE, JOIN (on), AND, OR, LIKE etc.\n<ul>\n<li>note: remember to escape <code>Q.like</code></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>JOINs are done through <code>Q.on</code></li>\n</ul>\n<h2 id=\"observable\">Observable<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#observable\"></a></h2>\n<ul>\n<li><code>.observe()</code> will return an observable</li>\n<li>we can hook up observables to components</li>\n<li>Because WatermelonDB is fully observable, we can create a <a title=\"Private\" href=\"https://wiki.dendron.so/notes/hfyvYGJZQiUwQaaxQO27q.html\" target=\"_blank\" class=\"private\">@lazy (Private)</a> function that will observe a database value and give us updated results in real-time (ie. without having to query the database)\n<ul>\n<li>ex. imagine we have a blog site, and blog posts can have a \"popular\" banner if they have at least 10 comments. We can make a function on the model layer that will observe the number of comments and will reactively give us the correct flag for the boolean:</li>\n</ul>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Post</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Model</span> <span class=\"token punctuation\">{</span>\n\t@lazy isPopular <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">comments</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">observeCount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">pipe</span><span class=\"token punctuation\">(</span>\n\t\t<span class=\"token function\">map$</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">comments</span> <span class=\"token arrow operator\">=></span> comments <span class=\"token operator\">></span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\t    <span class=\"token function\">distinctUntilChanged</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\nand then directly connect it to the component:\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> enhance <span class=\"token operator\">=</span> <span class=\"token function\">withObservables</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">'post'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> post <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token literal-property property\">isPopular</span><span class=\"token operator\">:</span> post<span class=\"token punctuation\">.</span><span class=\"token property-access\">isPopular</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<ul>\n<li>since this is reactive, a rise above/fall below the 10 comment threshold will cause the component to re-render.</li>\n<li>Dissecting:\n<ul>\n<li><code>this.comments.observeCount()</code> - take the Observable number of comments</li>\n<li><code>map$(comments => comments > 10)</code> - transform this into an Observable of boolean (popular or not)</li>\n<li><code>distinctUntilChanged()</code> - this is so that if the comment count changes, but the popularity doesn't (it's still below/above 10), components won't be unnecessarily re-rendered</li>\n<li><code>@lazy</code> - also for performance (we only define this Observable once, so we can re-use it for free)</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"sync\">Sync<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#sync\"></a></h2>\n<p>Any backend will work, as long as it complies with the following spec:\n<img src=\"/:/860953c1a363424aac94bdff9d490b90\" alt=\"6d0a0837a90af34681ce452b015d4b19.png\"></p>\n<ul>\n<li><code>changes</code> is an object with a field for each model (table) that has changes. For each model, there are 3 fields: <code>created</code>, <code>updated</code>, <code>deleted</code>.\n<ul>\n<li>When the <code>changes</code> object is received from a Pull Request, it is the selection of changes that were made on the server since our last sync, that we need to now update locally.</li>\n<li>When the <code>changes</code> object is sent with a Push Request, it is the selection of changes that we've made locally, that have not yet been sent to the remote database.</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"pulling\">Pulling<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#pulling\"></a></h4>\n<p>When Watermelon runs <code>synchronize()</code>, <code>pullChanges</code> will get run, which will pass along with it information about the last time a pull was made (<code>lastPulledAt</code>). <code>pullChanges</code> will call an endpoint to the backend, passing along that <code>lastPulledAt</code> timestamp, and the server will confer with the backend DB, and send back all of the changes made since the last pull, along with the current timestamp. When the mobile app receives the response, it will then proceed to apply those changes to the local db.</p>\n<h4 id=\"pushing\">Pushing<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#pushing\"></a></h4>\n<p>We send to the server a <code>change</code> object, containing everything that needs to be updated remotely, as well as a timestamp of the last time a pull was made (<code>lastPulledAt</code>). When the server receives the request, it will use <code>lastPulledAt</code> to check conflicts with the remote db. If there is no conflict, the server will then update the db with the provided changes.</p>\n<h4 id=\"sync-limitations\">Sync limitations<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#sync-limitations\"></a></h4>\n<p>There are currently limitations of Sync, as outlined in this blog: <a href=\"/:/f615cdc32a5c4be4a768caee30774aa9\">How to Build WatermelonDB Sync Backend in Elixir | Fahri NH</a></p>\n<h4 id=\"how-does-it-know-when-to-re-render\">How does it know when to re-render?<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#how-does-it-know-when-to-re-render\"></a></h4>\n<p>for individual records, just listen to changes, and if the record changes, re-render</p>\n<p>for queries, like \"tasks where a=b\", listen to the collection of tasks, and when a record in that collection changes, check if the record matches the query. If it does: if record was on the rendered list, and was deleted — remove from rendered list. if it wasn't on the rendered list, and now matches — add to rendered list.</p>\n<p>for multi-table queries like \"tasks that belong to projects where a =b\", listen to all relevant collections, and if there's a change in any of them, re-query the database. There's ways to make it more efficient, but need to measure if the perf benefit is worth it</p>\n<h2 id=\"solutions-to\">Solutions to:<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#solutions-to\"></a></h2>\n<ul>\n<li><a href=\"https://nozbe.github.io/WatermelonDB/Components.html#database-provider\">prop drilling</a></li>\n</ul>\n<h2 id=\"ue-resources\">UE Resources<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#ue-resources\"></a></h2>\n<p><a href=\"https://blog.logrocket.com/offline-app-react-native-watermelondb/\">Logrocket Tutorial</a>\n<a href=\"https://fahri.id/posts/how-to-build-watermelondb-sync-backend-in-elixir/\">how sync works</a>\n<a href=\"https://www.youtube.com/watch?v=uFvHURTRLxQ\">conf</a>\n<a href=\"https://github.com/FLVieira/sync-api/blob/master/src/app/controllers/SynchronizationController.js\">Pull/Push changes synchronization controller API</a>\n<a href=\"https://github.com/rodrigosuman/rn-offline-first-app/tree/main/backend/src/services/sync\">#2 Pull/Push changes synchronization controller API</a></p>","noteIndex":{"id":"olZIVfSs2uLLr3BppFh4K","title":"Digital Garden","desc":"","updated":1674517603573,"created":1615482407722,"custom":{"nav_order":0,"permalink":"/"},"fname":"root","type":"note","vault":{"fsPath":"../main/tech","name":"tech"},"contentHash":"effb007003ca6a91d7fd0c293e1d2436","links":[{"type":"wiki","from":{"fname":"root","id":"olZIVfSs2uLLr3BppFh4K","vaultName":"tech"},"value":"testing.method.unit","alias":"unit testing","position":{"start":{"line":18,"column":121,"offset":1146},"end":{"line":18,"column":157,"offset":1182},"indent":[]},"xvault":false,"sameFile":false,"to":{"fname":"testing.method.unit"}},{"type":"wiki","from":{"fname":"root","id":"olZIVfSs2uLLr3BppFh4K","vaultName":"tech"},"value":"general.arch.microservice","alias":"microservices","position":{"start":{"line":18,"column":188,"offset":1213},"end":{"line":18,"column":231,"offset":1256},"indent":[]},"xvault":false,"sameFile":false,"to":{"fname":"general.arch.microservice"}},{"type":"wiki","from":{"fname":"root","id":"olZIVfSs2uLLr3BppFh4K","vaultName":"tech"},"value":"paradigm.oop","alias":"OOP","position":{"start":{"line":36,"column":227,"offset":2718},"end":{"line":36,"column":247,"offset":2738},"indent":[]},"xvault":false,"sameFile":false,"to":{"fname":"paradigm.oop"}}],"anchors":{"tags":{"type":"header","text":"Tags","value":"tags","line":46,"column":0,"depth":3},"resources":{"type":"header","text":"Resources","value":"resources","line":55,"column":0,"depth":2},"ue-unexamined-resources":{"type":"header","text":"UE (Unexamined) Resources","value":"ue-unexamined-resources","line":56,"column":0,"depth":3},"e-examined-resources":{"type":"header","text":"E (Examined) Resources","value":"e-examined-resources","line":59,"column":0,"depth":3},"resources-1":{"type":"header","text":"Resources","value":"resources-1","line":62,"column":0,"depth":3}},"children":["40ubf88tephzbdjte8cdsa0","zFMjbn3xihVNHjUIdZCD1","IK6NOKemuDjhfstJBovKL","ZaTr28eWk1DrXOEsc1YVb","Vi0WYVLZunVM9iR8XZJn3","ngAbg7gluvbt1bY1UIRsi","RCPPXSakm5TvKka8kOmVp","LIcuGYV0DDt1VWbvH6Sed","MPx8ykTP57I40WTZvTP7f","ZU5WmdTG1bHoE8RcmZXZG","jqWiyYJff92RjXuUQt9PQ","KihijM8OQvZ4pASkkhqzL","F9vyqvls3OBCujtukqKhy","k6jxm2b3edgkhbordpuz6v1","facc2b01-755a-409f-99f6-57bef2d1501f","bZumdyapJ2H0wWWOmJ45i","elqpgoe2r951si4xrhujppj","m5ov42Vm6mR7RQWTvl1NW","cw8cerc0cos8lh871oz8rtf","PZxxZ4iESzSlbbHJKxuAZ","UDu62Pa6BaRqlG8uGoMhy","u3zcndycwqessho5h6x0nz9","ZgCUp366YrF2Tyky2NT73","DVpVUmavSoVDA7UIlPzLX","nMCtMXVvjBsJk3iw1zoIO","ANfx9Z4a6ZA0uJuSHtbIJ","BkG557LKUYbH1DnxprEVT","1TaH8zDTM98FZ9SYaeXLM","02v7ymc144e5c4pv3edkud7","dc79799f-a55d-48ab-a8be-c48adb1b19c0","f6feef57-b8f5-451f-a09a-7b63f6a07183","4sz47Y0LKs1Si73rWtyyh","g7ulqi8no93ezeocbesc3ll","5a9fb1df-478e-4687-9be0-5cb97e61ec57","1374e9e9-1cbc-4e1f-b1ca-66b8569533dd","D8Z3rjXkSj2EOymXQXF4Z","np3c1ykvnjqv5xoombpfwqz","f529cc34-aba0-45ca-ad7e-02ddda318941","0zcauha3il2NqtxZazIo7","9bbd6f68-03b2-41f4-92e4-2ca313e8b450","5a2ab598-fa7e-4471-8bda-9f5831b679ae","uV6w4mZPoohWyZV4Xaad0","QHXEIyeZGIGMVi5Q52UWI","RgE0mZLaUjPftFPZsiAoe","mytCOts26Pidush65tdRW","fwUzxfLSPMH1eL8oBoLWx","wazdsda6h25x66edvfmeuiv","TbW7PM9bg1y5TGkiWwQ8b","xiSIDeEtIc8X0lpUQlppI","0jxgntiLNHWFuCbzqtFGF","GkdMprLUe4QQULBxmGN6V","4SYc6v5hxY5g6Ip6kjpwO","czi7ilt2i1uoqm1f2otbntj","fqVQpS9FBiXgKsZX3R3sJ","L5JUZlGAGvTxrsEBB7DY8","ttyri4pwfyn5lcx0vp9804o","TeTedoeS2LdHPR632eCpM","ulicRRwo3lSFzh3tMfWH9","p7d24vyb8m00ombzn34t50c","e65188a1-177e-4ab2-99f9-75f85d537621","fajYnbVhCRDi74xn0H30R","bArGdGwqo3iFkyKMyE7qR","4Dcp7gbEVoLLgfu7bXFai","5d700782-fb81-416e-83f9-5dd88260e350","zubgzhNFE6KlTgXcjTz6O","8lpdfWa0cbSq1XJQbcYcY","2psluywdc416t7vrql0m058","17I8ZksXvqCH1mRtZDjHp","kF916Ow84qpJJeMRkWMIo","tMLkLcrIHHBz56xVmBLkP","CSePBQ6q7qhowKESqVwt7","laZ4OfLhZNK1Kuy6GaWUr","z5IJblOknQhMzZ5QZh4ye","N36FHxfxzwJfxDY3miWyX","3bb25f58-2b50-4fa3-af55-48ea9f88a081","7x07qjgbitozdfszqzuy7ix","u93Rz4fEWGu6VBR30Zraf","9hjMHnKvYT4jLKvuDSXaV","qC5GxCZBmNb4Ip6c0kU8x","LgW7mTIALODoXc54B3p6S","UYPxfHBFWX7fb6hHU5bB6","74lYtC8NKpCzcyFOZTfR1","sEoBNAEuaTxwSmTXDonZt","dj0jr9mpvs62e2pkg3zc3yy","z8ie0xjogb6ht7gzowav5xr","qxSOd6SPN8qf9ZUojVFDX","WQoMTf6VXBaxCgksXAVsj","2Mw4XgfyCHXHNOX5yoCIY","qcdt2f7jo51muquo5r95dpo","0XJqmcdtcMZu66glBI5O8","lK8r8BXS4ThiUTe4xKIZe","93de42ca-53ea-460a-baa7-b9ec5c47cb1e","Rxs2jaGpdFzqYtP7lAJFJ","aO8W81Z0PyIb6Hs7nOHPW","lhzisalkebu4w5n01np07i0","7b5l4b6fi65n7sv9org5q1l","I01hENHnh8Tqu3Ok8sLzG","03o3n0hz9v9jtb7j889zpd4","evqsPNutOaZ8hcBCqxFQu","zhhxcjZUHdU8uRLwGb9Zh","G1aFACZB2ooWGMGwyd3ZW","YWy1C4tgoaCcw1m8JJsr7","Szj3o5iaNxPpesiCqwrbu","613syb18hb3v0u1ydvor7ru","XhvCDW3fIw6h6MhY5ticq","Q70g7SusFZBQXzkuQifv4","AzfWDH3wp7jFpL2EYxBcW","y0fwpZ9qMqirsLiFyOciU","ZF8xj8wwDUqKlrwTrCFZ1","tAJvhqhdfyZZa87QHq1TU","4hRmipi8lxpBLyzWu5JVB","iTg0C7QjvnmqBZeEigJNs","3babc3d2-79ae-470a-9c06-ab8bba2e684e","bF3UsMFya3fMeXWDspVov","ULkfbL9WpktbVYnzhl6Jw","PpNOO8JYWe6dM8wruSa7x","di40pCxDn7IiqE8lFdD46","rmW0mkerqV35I8QPji6lM","3IFIK1ByzeIxZCByryGLN","iImkYAKfkw3beAl6pLbDn","ecDe8DNWrkeQTwpTEvHje","i2it5id8qwtg27n4usg8bo1","Yqhdd9mSJGN7OJOeyoSD2","Ws5tah8tpeyn9tK8VBTg8","gWAg15uBJgkS2B0wcpMAa","l7V3v2ep1YdDCt7DOr7Ci","yM2PJBdqJnHpD63cPA6sW","qn0bre7eLbi3QMbCfWkUi","fSu0KxFL41IRouotqmbHs","0gtg24Mj1a1bQFPRGQNlO","7iQPBMltLPLbFEz2qbjPu","yoh4pwoXcfELInGKRdYf6","dCGCWXgAmiOZXbdULT1m6","jMavlje07sNa6hSEIE8WA","Xxm0JE4dKHxrQAaZfzvxD","nRb6Im4Kcmc2ZWE7K1jZ1","PAEBZCyFBZJyR7OoMZ41E","PQ6km8RgRCuyICBPOYz8f","x5tm1nfjzyawwzedy3yitgd","2bhftt8rGuxYu4pFgNqru","hjYIZpHQWuXfeEoGeJEKW","K2M9bQqVq2eQfm29eslKL","X8obW1iKwYsvNgKWGyCzy","yJwSC7hqYIezTFHf5i0Ev","c4Z7ETcOHUILRMH32Sfjw","qiR6dIu857b9M9kTqjOyK","fc2coz74cnfy5czzofx4h5x","Ku1OgHMhELajzo61Gx7ye","LUrfhDWo8wuwZu7CN9TV8","osu6JGOnvXJ5gt3tpqWZY","1a6173cd-cf13-4b34-a522-8350bf9a364f","S2sBltrPfd8a7ICuD7CuH","GLQ2pmkJUNUa93THBDVsD","md6xitz4exia2joa06i490b","oWCuBXOg6JWfZzjmKxmNl","jOmhZ8ovLYTPbpM1vqSDx","p9bov84s0isgkl1ysaw93kk","FraC6xzLy1ei91l1ICyc9","6ceBas2RE9Q4787GDngH7","734cd78d-0bc9-426b-803d-1efc84dfffe5","k4Bb09px6r0FxIRs49SXV","oaG3H1S9IUBO644nGZigu","Ka7agQJkUMRSWN0uFdkWK","si3z090WsiLasMhJBa1Az","hs6rwzt4mogiicoc4gcykbi","ljKAVERmdEiKLK9hXGKBm","zxt3lhonfdhglvijd17ua8c","dd7dopve1dudqkoibkqvti4","923tgifqf59ovv5yldtyi0a","vrjwp01goqw47fqctm4f4lo","c99gdmmppju3r1tth8cb2jx","z2pvn5qxdz84zgygqzxage8"],"parent":null,"data":{},"body":"This Dendron vault of tech knowledge is organized according to domains and their sub-domains, along with specific implementation of those domains.\n\nFor instance, Git itself is a domain. Sub-domains of Git would include things like `commit`,\n`tags`, `reflog` etc. implementations of each of those could be `cli`, `strat`\n(strategies), `inner`, and so on.\n\nThe goal of the wiki is to present data in a manner that is from the perspective\nof a querying user. Here, a user is a programmer wanting to get key information\nfrom a specific domain. For instance, if a user wants to use postgres functions\nand hasn't done them in a while, they should be able to query\n`postgres.functions` to see what information is available to them.\n\nThis wiki has been written with myself in mind. While learning each of these\ndomains, I have been sensitive to the \"aha\" moments and have noted down my\ninsights as they arose. I have refrained from capturing information that I\nconsidered obvious or otherwise non-beneficial to my own understanding.\n\nAs a result, I have allowed myself to use potentially arcane concepts to explain other ones. For example, in my note on [[unit testing|testing.method.unit]], I have made reference to the [[microservices|general.arch.microservice]] note. If these notes were made with the public in mind, this would be a very bad strategy, given that you'd have to understand microservices to be able to draw that same parallel that I've already drawn. Since these notes are written for myself, I have been fine with taking these liberties.\n\nWhat I hope to gain from this wiki is the ability to step away from any\ngiven domain for a long period of time, and be able to be passably useful for\nwhatever my goals are within a short period of time. Of course this is all\nvague sounding, and really depends on the domain along with the ends I am\ntrying to reach.\n\nTo achieve this, the system should be steadfast to:\n- be able to put information in relatively easily, without too much thought\n\trequired to its location. While location is important, Dendron makes it easy\n\tto relocate notes, if it becomes apparent that a different place makes more\n\tsense.\n- be able to extract the information that is needed, meaning there is a\n\thigh-degree in confidence in the location of the information. The idea is\n\tthat information loses a large amount of its value when it is unfindable.\n\tTherefore, a relatively strict ideology should be used when determining\n\twhere a piece of information belongs.\n\t- Some concepts might realistically belong to multiple domains. For instance, the concept of *access modifiers* can be found in both `C#` and `Typescript`. Therefore, this note should be abstracted to a common place, such as [[OOP|paradigm.oop]].\n\nThis Dendron vault is the sister component to the [General Second Brain](https://tech.kyletycholiz.com).\n\n### Tags\nThroughout the garden, I have made use of tags, which give semantic meaning to the pieces of information.\n\n- `ex.` - Denotes an *example* of the preceding piece of information\n- `spec:` - Specifies that the preceding information has some degree of *speculation* to it, and may not be 100% factual. Ideally this gets clarified over time as my understanding develops.\n- `anal:` - Denotes an *analogy* of the preceding information. Often I will attempt to link concepts to others that I have previously learned.\n- `mn:` - Denotes a *mnemonic*\n- `expl:` - Denotes an *explanation*\n\n## Resources\n### UE (Unexamined) Resources\nOften, I come across sources of information that I believe to be high-quality. They may be recommendations or found in some other way. No matter their origin, I may be in a position where I don't have the time to fully examine them (and properly extract notes), or I may not require the information at that moment in time. In cases like these, I will add reference to a section of the note called **UE Resources**. The idea is that in the future when I am ready to examine them, I have a list of resources that I can start with. This is an alternative strategy to compiling browser bookmarks, which I've found can quickly become untenable.\n\n### E (Examined) Resources\nOnce a resource has been thoroughly examined and has been mined for notes, it will be moved from *UE Resources* to *E Resources*. This is to indicate that (in my own estimation), there is nothing more to be gained from the resource that is not already in the note.\n\n### Resources\nThis heading is for inexhaustible resources. \n- A prime example would be a quality website that continually posts articles.  - Another example would be a tool, such as software that measures frequencies in a room to help acoustically treat it.\n"},"collectionChildren":null,"customHeadContent":null,"config":{"version":5,"dev":{"enablePreviewV2":true},"commands":{"lookup":{"note":{"selectionMode":"extract","confirmVaultOnCreate":false,"leaveTrace":false,"bubbleUpCreateNew":true,"fuzzThreshold":0.2,"vaultSelectionModeOnCreate":"smart"}},"insertNote":{"initialValue":"templates"},"insertNoteLink":{"aliasMode":"none","enableMultiSelect":false},"insertNoteIndex":{"enableMarker":false},"randomNote":{},"copyNoteLink":{"aliasMode":"title"},"templateHierarchy":"template"},"workspace":{"dendronVersion":"0.83.0","vaults":[{"fsPath":"../main/tech","name":"tech"}],"journal":{"dailyDomain":"daily","name":"journal","dateFormat":"y.MM.dd","addBehavior":"childOfDomain"},"scratch":{"name":"scratch","dateFormat":"y.MM.dd.HHmmss","addBehavior":"asOwnDomain"},"graph":{"zoomSpeed":1,"createStub":false},"enableAutoCreateOnDefinition":false,"enableXVaultWikiLink":false,"enableRemoteVaultInit":true,"workspaceVaultSyncMode":"noCommit","enableAutoFoldFrontmatter":true,"maxPreviewsCached":10,"maxNoteLength":204800,"task":{"name":"","dateFormat":"","addBehavior":"childOfCurrent","statusSymbols":{"":" ","wip":"w","done":"x","assigned":"a","moved":"m","blocked":"b","delegated":"l","dropped":"d","pending":"y"},"prioritySymbols":{"H":"high","M":"medium","L":"low"},"todoIntegration":false,"createTaskSelectionType":"selection2link","taskCompleteStatus":["done","x"]},"enableUserTags":true,"enableHashTags":true,"enableEditorDecorations":true,"enableFullHierarchyNoteTitle":false},"preview":{"enableFMTitle":true,"enableNoteTitleForLink":true,"enableMermaid":true,"enablePrettyRefs":true,"enableKatex":true,"automaticallyShowPreview":false,"enableFrontmatterTags":true,"enableHashesForFMTags":false},"publishing":{"enableFMTitle":true,"enableNoteTitleForLink":true,"enablePrettyRefs":true,"enableKatex":true,"copyAssets":true,"siteHierarchies":["root"],"writeStubs":false,"siteRootDir":"docs","seo":{"title":"Dendron","description":"The Tech Digital Garden of Kyle Tycholiz"},"github":{"cname":"tech.kyletycholiz.com","enableEditLink":true,"editLinkText":"Edit this page on GitHub","editBranch":"master","editViewMode":"tree"},"enableSiteLastModified":true,"enableFrontmatterTags":true,"enableHashesForFMTags":false,"enableRandomlyColoredTags":true,"enableTaskNotes":true,"enablePrettyLinks":true,"searchMode":"lookup","enableMermaid":true,"siteUrl":"https://tech.kyletycholiz.com","duplicateNoteBehavior":{"action":"useVault","payload":["tech"]},"siteFaviconPath":"favicon.ico","siteIndex":"root"}}},"__N_SSG":true}