{"pageProps":{"note":{"id":"dmfhxjrme6rvqfru5rvbfz3","title":"Concurrency in Go","desc":"","updated":1671570609129,"created":1671557652018,"custom":{},"fname":"golang.concurrency","type":"note","vault":{"fsPath":"../main/tech","name":"tech"},"contentHash":"dc020aef78185692f8a53f2c4203e586","links":[{"type":"wiki","from":{"fname":"golang.concurrency","id":"dmfhxjrme6rvqfru5rvbfz3","vaultName":"tech"},"value":"hardware.cpu","alias":"CPU","position":{"start":{"line":52,"column":64,"offset":1698},"end":{"line":52,"column":84,"offset":1718},"indent":[]},"xvault":false,"sameFile":false,"to":{"fname":"hardware.cpu"}},{"type":"wiki","from":{"fname":"golang.concurrency","id":"dmfhxjrme6rvqfru5rvbfz3","vaultName":"tech"},"value":"general.concurrency","alias":"see: Concurrency main article","position":{"start":{"line":199,"column":1,"offset":6786},"end":{"line":199,"column":54,"offset":6839},"indent":[]},"xvault":false,"sameFile":false,"to":{"fname":"general.concurrency"}}],"anchors":{"goroutine":{"type":"header","text":"Goroutine","value":"goroutine","line":8,"column":0,"depth":3},"channel":{"type":"header","text":"Channel","value":"channel","line":60,"column":0,"depth":3},"buffered-channel":{"type":"header","text":"Buffered Channel","value":"buffered-channel","line":125,"column":0,"depth":4},"select":{"type":"header","text":"select","value":"select","line":144,"column":0,"depth":4},"worker-pool":{"type":"header","text":"Worker Pool","value":"worker-pool","line":161,"column":0,"depth":3}},"children":[],"parent":"8lpdfWa0cbSq1XJQbcYcY","data":{}},"body":"<h1 id=\"concurrency-in-go\">Concurrency in Go<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#concurrency-in-go\"></a></h1>\n<h3 id=\"goroutine\">Goroutine<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#goroutine\"></a></h3>\n<p>Each execution path of our Go program is a <em>goroutine</em>. </p>\n<ul>\n<li>Therefore, we always have at least 1 (the <code>main</code> goroutine).</li>\n</ul>\n<p>If we prepend a function invocation with the keyword <code>go</code>, that function won't wait to finish executing before moving on to the next line.</p>\n<p>The following will run <code>count(\"sheep\")</code> in the background, then immediately execute <code>count(\"fish\")</code>, thereby creating a <em>goroutine</em>, which runs concurrently.</p>\n<pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">go</span> <span class=\"token function\">count</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"sheep\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">count</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"fish\"</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// 1 sheep</span>\n<span class=\"token comment\">// 1 fish</span>\n<span class=\"token comment\">// 2 sheep</span>\n<span class=\"token comment\">// 2 fish</span>\n<span class=\"token comment\">// etc.</span>\n</code></pre>\n<p>imagine both of our <code>count()</code> functions are called in a background goroutine:</p>\n<pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">go</span> <span class=\"token function\">count</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"sheep\"</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">go</span> <span class=\"token function\">count</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"fish\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<ul>\n<li>in this case, we would not see any logs in the console, since the <code>go</code> keyword tells the <code>count()</code> function to run in the background and move to the next line. Since that was the last line, the <code>main()</code> function finishes and our program exits.\n<ul>\n<li>if we added <code>time.Sleep(time.Second * 2)</code> as the last line in our <code>main()</code> function, then we would see logs for 2 seconds before the program exits.</li>\n</ul>\n</li>\n<li>a better solution here is to use a <em>WaitGroup</em> (which is basically just a counter):</li>\n</ul>\n<pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">import</span> <span class=\"token string\">\"sync\"</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> wg sync<span class=\"token punctuation\">.</span>WaitGroup\n  <span class=\"token comment\">// increment the WG by 1 to incicate that we have 1 goroutine </span>\n  <span class=\"token comment\">// to wait for before `main()` finishes executing</span>\n  wg<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">go</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">count</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"sheep\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\">// decrement the WG when the goroutine finishes.</span>\n    wg<span class=\"token punctuation\">.</span><span class=\"token function\">Done</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// wait until the counter is 0 (ie. wait until all goroutines have finished)</span>\n  wg<span class=\"token punctuation\">.</span><span class=\"token function\">Wait</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>Goroutines are very efficient</p>\n<ul>\n<li>we can make 1000s of simultaneously running goroutines.</li>\n<li>however, ultimately we are constrained by how many cores our <a href=\"/notes/XkJ62K1L604NfWaUdxZi7\">CPU</a> has.</li>\n</ul>\n<h3 id=\"channel\">Channel<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#channel\"></a></h3>\n<p>A <em>channel</em> is a means for goroutines to communicate with each other.</p>\n<ul>\n<li>ex. we have a value in one goroutine that we want to pass to the <code>main</code> goroutine.\n<ul>\n<li>to do this, we can modify our <code>count()</code> function to accept a channel as an argument:</li>\n</ul>\n</li>\n</ul>\n<pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// make the channel</span>\n  c <span class=\"token operator\">:=</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">chan</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">go</span> <span class=\"token function\">count</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"sheep\"</span><span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">)</span>\n\n  <span class=\"token comment\">// iterate over the range (spec: length, as if it were an array) of a channel</span>\n  <span class=\"token keyword\">for</span> msg <span class=\"token operator\">:=</span> <span class=\"token keyword\">range</span> c <span class=\"token punctuation\">{</span>\n    fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">/* The above for-loop is syntactic sugar for the long-form: \n  * for msg := range c {\n  *   // receive the message from the channel and set it to `msg`\n  *   msg, open := &#x3C;- c\n  *\n  *   // if channel is not open, break out of for loop (stop receiving messages)\n  *   if !open {\n  *     break\n  *   }\n  *\n  *   fmt.Println(msg)\n  * }\n  */</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">count</span><span class=\"token punctuation\">(</span>animalType <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> c <span class=\"token keyword\">chan</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">for</span> i<span class=\"token punctuation\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&#x3C;=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// send the value of `animalType` over the channel</span>\n    c <span class=\"token operator\">&#x3C;-</span> animalType\n    time<span class=\"token punctuation\">.</span><span class=\"token function\">Sleep</span><span class=\"token punctuation\">(</span>time<span class=\"token punctuation\">.</span>Millisecond <span class=\"token operator\">*</span> <span class=\"token number\">500</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// close the channel once the for loop has finished</span>\n  <span class=\"token function\">close</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<ul>\n<li>note: sending and receiving messages through channels are blocking operations; code execution will stop until a value is sent/received through the channel.</li>\n<li>note: channels have a type (here, <code>string</code>), meaning the only messages we can pass through those channels are strings.\n<ul>\n<li>we can even type channels as channels (ie. channels that only accept messages with the type <code>channel</code>)\n<ul>\n<li>spec: <code>c chan chan</code>, or <code>c chan channel</code> maybe?</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>note: naturally, only senders of messages should close channels, since they are the ones that know whether or not the data flow has finished.</li>\n</ul>\n<p>We can use channels to synchronize goroutines.</p>\n<ul>\n<li>ex. Imagine we have 2 goroutines, and gr1 depends on gr2 (gr1 receives a message from gr2 via a channel)\n<img src=\"/assets/images/2022-12-20-11-25-19.png\">\n<ul>\n<li>here, execution of gr1 will pause at line 7 as it waits for gr2 to reach its line 4, where it will send a message through the channel.</li>\n</ul>\n</li>\n</ul>\n<p>Channels must have a goroutine ready to receive a message from them <em>before</em> anything can be sent through them.</p>\n<ul>\n<li>in other words, if we are within the <code>main</code> goroutine and our code executes <code>c &#x3C;- \"hello\"</code> before it executes <code>msg := &#x3C;- c</code>, our program will exit in error, since we are trying to send something to the <code>c</code> channel <em>before</em> anything is set up to listen to it (recall: sending/receiving from a channel is a blocking operation until it can be completed)</li>\n</ul>\n<p>Channel references can be specified to restrict us from only ever receiving/sending messages:</p>\n<ul>\n<li>ex. we make a function that takes 2 channels:\n<ul>\n<li>\n<ol>\n<li>a channel of jobs to do (from which we will only ever receive messages; <code>&#x3C;-chan</code>)</li>\n</ol>\n</li>\n<li>\n<ol start=\"2\">\n<li>a channel to send results to (to which we will only ever send messages; <code>chan&#x3C;-</code>)</li>\n</ol>\n</li>\n</ul>\n</li>\n</ul>\n<pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">worker</span><span class=\"token punctuation\">(</span>jobs <span class=\"token operator\">&#x3C;-</span><span class=\"token keyword\">chan</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> results <span class=\"token keyword\">chan</span><span class=\"token operator\">&#x3C;-</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">for</span> n <span class=\"token operator\">:=</span> <span class=\"token keyword\">range</span> jobs\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<ul>\n<li>if we try and send a message to the <code>jobs</code> channel, we will get a compile-time error</li>\n</ul>\n<h4 id=\"buffered-channel\">Buffered Channel<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#buffered-channel\"></a></h4>\n<p>A buffered channel can be filled without a corresponding receiver, and it will not block until that buffer is full.</p>\n<ul>\n<li>Buffered channels have a fixed capacity set when they are initialized.</li>\n</ul>\n<pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// make a buffered channel of strings with a capacity of 2</span>\n  c <span class=\"token operator\">:=</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">chan</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n  c <span class=\"token operator\">&#x3C;-</span> <span class=\"token string\">\"hello\"</span>\n  c <span class=\"token operator\">&#x3C;-</span> <span class=\"token string\">\"world\"</span>\n\n  msg <span class=\"token operator\">:=</span> <span class=\"token operator\">&#x3C;-</span> c\n  fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">)</span> <span class=\"token comment\">// hello</span>\n\n  msg <span class=\"token operator\">=</span> <span class=\"token operator\">&#x3C;-</span> c\n  fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">)</span> <span class=\"token comment\">// world</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h4 id=\"select\"><code>select</code><a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#select\"></a></h4>\n<p>the <code>select</code> keyword allows us to receive a message from whatever channel has one:</p>\n<p>ex. imagine we have 2 goroutines that each do some calculation then return it to the <code>main</code> function where it then gets logged to the console. We set up each function to do the calculation, then send the data through their own respective channel. Back in the <code>main</code> function, we create a loop to log to the console each time a new message arrives in the channel):</p>\n<pre class=\"language-go\"><code class=\"language-go\"><span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">select</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">case</span> msg1 <span class=\"token operator\">:=</span> <span class=\"token operator\">&#x3C;-</span> c1<span class=\"token punctuation\">:</span>\n        fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>msg1<span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">case</span> msg2 <span class=\"token operator\">:=</span> <span class=\"token operator\">&#x3C;-</span> c2<span class=\"token punctuation\">:</span>\n        fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>msg2<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h3 id=\"worker-pool\">Worker Pool<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#worker-pool\"></a></h3>\n<p>A worker pool is a queue of jobs to be done, from which multiple concurrent workers can pull jobs and perform them.</p>\n<pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// no real reason why we have a buffer of 100; it's just a nice round and large enough number</span>\n  jobs <span class=\"token operator\">:=</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">chan</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span>\n  results <span class=\"token operator\">:=</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">chan</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token comment\">// create a worker as a concurrent goroutine</span>\n  <span class=\"token keyword\">go</span> <span class=\"token function\">worker</span><span class=\"token punctuation\">(</span>jobs<span class=\"token punctuation\">,</span> results<span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">for</span> i <span class=\"token operator\">:=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&#x3C;</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// fill up the jobs channel with numbers from 0-99</span>\n    <span class=\"token comment\">// since it's a buffered channel, it's not going to block</span>\n    jobs <span class=\"token operator\">&#x3C;-</span> i\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">close</span><span class=\"token punctuation\">(</span>jobs<span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">for</span> j <span class=\"token operator\">:=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&#x3C;</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// receive each fibonnaci number from the `results` channel and print to console</span>\n    fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&#x3C;-</span>results<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">worker</span><span class=\"token punctuation\">(</span>jobs <span class=\"token operator\">&#x3C;-</span><span class=\"token keyword\">chan</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> results <span class=\"token keyword\">chan</span><span class=\"token operator\">&#x3C;-</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// as long as there are jobs on the `jobs` channel, the calculation will continue to run</span>\n  <span class=\"token keyword\">for</span> n <span class=\"token operator\">:=</span> <span class=\"token keyword\">range</span> jobs <span class=\"token punctuation\">{</span>\n    results <span class=\"token operator\">&#x3C;-</span> <span class=\"token function\">fibonnaci</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">fibonacci</span><span class=\"token punctuation\">(</span>n <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">int</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> n <span class=\"token operator\">&#x3C;=</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> n\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token function\">fibonacci</span><span class=\"token punctuation\">(</span>n <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token function\">fibonacci</span><span class=\"token punctuation\">(</span>n <span class=\"token operator\">-</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<hr>\n<p><a href=\"/notes/W5etsXYnFDHBWHEHSZKjp\">see: Concurrency main article</a></p>","noteIndex":{"id":"olZIVfSs2uLLr3BppFh4K","title":"Digital Garden","desc":"","updated":1674517603573,"created":1615482407722,"custom":{"nav_order":0,"permalink":"/"},"fname":"root","type":"note","vault":{"fsPath":"../main/tech","name":"tech"},"contentHash":"effb007003ca6a91d7fd0c293e1d2436","links":[{"type":"wiki","from":{"fname":"root","id":"olZIVfSs2uLLr3BppFh4K","vaultName":"tech"},"value":"testing.method.unit","alias":"unit testing","position":{"start":{"line":18,"column":121,"offset":1146},"end":{"line":18,"column":157,"offset":1182},"indent":[]},"xvault":false,"sameFile":false,"to":{"fname":"testing.method.unit"}},{"type":"wiki","from":{"fname":"root","id":"olZIVfSs2uLLr3BppFh4K","vaultName":"tech"},"value":"general.arch.microservice","alias":"microservices","position":{"start":{"line":18,"column":188,"offset":1213},"end":{"line":18,"column":231,"offset":1256},"indent":[]},"xvault":false,"sameFile":false,"to":{"fname":"general.arch.microservice"}},{"type":"wiki","from":{"fname":"root","id":"olZIVfSs2uLLr3BppFh4K","vaultName":"tech"},"value":"paradigm.oop","alias":"OOP","position":{"start":{"line":36,"column":227,"offset":2718},"end":{"line":36,"column":247,"offset":2738},"indent":[]},"xvault":false,"sameFile":false,"to":{"fname":"paradigm.oop"}}],"anchors":{"tags":{"type":"header","text":"Tags","value":"tags","line":46,"column":0,"depth":3},"resources":{"type":"header","text":"Resources","value":"resources","line":55,"column":0,"depth":2},"ue-unexamined-resources":{"type":"header","text":"UE (Unexamined) Resources","value":"ue-unexamined-resources","line":56,"column":0,"depth":3},"e-examined-resources":{"type":"header","text":"E (Examined) Resources","value":"e-examined-resources","line":59,"column":0,"depth":3},"resources-1":{"type":"header","text":"Resources","value":"resources-1","line":62,"column":0,"depth":3}},"children":["40ubf88tephzbdjte8cdsa0","zFMjbn3xihVNHjUIdZCD1","IK6NOKemuDjhfstJBovKL","ZaTr28eWk1DrXOEsc1YVb","Vi0WYVLZunVM9iR8XZJn3","ngAbg7gluvbt1bY1UIRsi","RCPPXSakm5TvKka8kOmVp","LIcuGYV0DDt1VWbvH6Sed","MPx8ykTP57I40WTZvTP7f","ZU5WmdTG1bHoE8RcmZXZG","jqWiyYJff92RjXuUQt9PQ","KihijM8OQvZ4pASkkhqzL","F9vyqvls3OBCujtukqKhy","k6jxm2b3edgkhbordpuz6v1","facc2b01-755a-409f-99f6-57bef2d1501f","bZumdyapJ2H0wWWOmJ45i","elqpgoe2r951si4xrhujppj","m5ov42Vm6mR7RQWTvl1NW","cw8cerc0cos8lh871oz8rtf","PZxxZ4iESzSlbbHJKxuAZ","UDu62Pa6BaRqlG8uGoMhy","u3zcndycwqessho5h6x0nz9","ZgCUp366YrF2Tyky2NT73","DVpVUmavSoVDA7UIlPzLX","nMCtMXVvjBsJk3iw1zoIO","ANfx9Z4a6ZA0uJuSHtbIJ","BkG557LKUYbH1DnxprEVT","1TaH8zDTM98FZ9SYaeXLM","02v7ymc144e5c4pv3edkud7","dc79799f-a55d-48ab-a8be-c48adb1b19c0","f6feef57-b8f5-451f-a09a-7b63f6a07183","4sz47Y0LKs1Si73rWtyyh","g7ulqi8no93ezeocbesc3ll","5a9fb1df-478e-4687-9be0-5cb97e61ec57","1374e9e9-1cbc-4e1f-b1ca-66b8569533dd","D8Z3rjXkSj2EOymXQXF4Z","np3c1ykvnjqv5xoombpfwqz","f529cc34-aba0-45ca-ad7e-02ddda318941","0zcauha3il2NqtxZazIo7","9bbd6f68-03b2-41f4-92e4-2ca313e8b450","5a2ab598-fa7e-4471-8bda-9f5831b679ae","uV6w4mZPoohWyZV4Xaad0","QHXEIyeZGIGMVi5Q52UWI","RgE0mZLaUjPftFPZsiAoe","mytCOts26Pidush65tdRW","fwUzxfLSPMH1eL8oBoLWx","wazdsda6h25x66edvfmeuiv","TbW7PM9bg1y5TGkiWwQ8b","xiSIDeEtIc8X0lpUQlppI","0jxgntiLNHWFuCbzqtFGF","GkdMprLUe4QQULBxmGN6V","4SYc6v5hxY5g6Ip6kjpwO","czi7ilt2i1uoqm1f2otbntj","fqVQpS9FBiXgKsZX3R3sJ","L5JUZlGAGvTxrsEBB7DY8","ttyri4pwfyn5lcx0vp9804o","TeTedoeS2LdHPR632eCpM","ulicRRwo3lSFzh3tMfWH9","p7d24vyb8m00ombzn34t50c","e65188a1-177e-4ab2-99f9-75f85d537621","fajYnbVhCRDi74xn0H30R","bArGdGwqo3iFkyKMyE7qR","4Dcp7gbEVoLLgfu7bXFai","5d700782-fb81-416e-83f9-5dd88260e350","zubgzhNFE6KlTgXcjTz6O","8lpdfWa0cbSq1XJQbcYcY","2psluywdc416t7vrql0m058","17I8ZksXvqCH1mRtZDjHp","kF916Ow84qpJJeMRkWMIo","tMLkLcrIHHBz56xVmBLkP","CSePBQ6q7qhowKESqVwt7","laZ4OfLhZNK1Kuy6GaWUr","z5IJblOknQhMzZ5QZh4ye","N36FHxfxzwJfxDY3miWyX","3bb25f58-2b50-4fa3-af55-48ea9f88a081","7x07qjgbitozdfszqzuy7ix","u93Rz4fEWGu6VBR30Zraf","9hjMHnKvYT4jLKvuDSXaV","qC5GxCZBmNb4Ip6c0kU8x","LgW7mTIALODoXc54B3p6S","UYPxfHBFWX7fb6hHU5bB6","74lYtC8NKpCzcyFOZTfR1","sEoBNAEuaTxwSmTXDonZt","dj0jr9mpvs62e2pkg3zc3yy","z8ie0xjogb6ht7gzowav5xr","qxSOd6SPN8qf9ZUojVFDX","WQoMTf6VXBaxCgksXAVsj","2Mw4XgfyCHXHNOX5yoCIY","qcdt2f7jo51muquo5r95dpo","0XJqmcdtcMZu66glBI5O8","lK8r8BXS4ThiUTe4xKIZe","93de42ca-53ea-460a-baa7-b9ec5c47cb1e","Rxs2jaGpdFzqYtP7lAJFJ","aO8W81Z0PyIb6Hs7nOHPW","lhzisalkebu4w5n01np07i0","7b5l4b6fi65n7sv9org5q1l","I01hENHnh8Tqu3Ok8sLzG","03o3n0hz9v9jtb7j889zpd4","evqsPNutOaZ8hcBCqxFQu","zhhxcjZUHdU8uRLwGb9Zh","G1aFACZB2ooWGMGwyd3ZW","YWy1C4tgoaCcw1m8JJsr7","Szj3o5iaNxPpesiCqwrbu","613syb18hb3v0u1ydvor7ru","XhvCDW3fIw6h6MhY5ticq","Q70g7SusFZBQXzkuQifv4","AzfWDH3wp7jFpL2EYxBcW","y0fwpZ9qMqirsLiFyOciU","ZF8xj8wwDUqKlrwTrCFZ1","tAJvhqhdfyZZa87QHq1TU","4hRmipi8lxpBLyzWu5JVB","iTg0C7QjvnmqBZeEigJNs","3babc3d2-79ae-470a-9c06-ab8bba2e684e","bF3UsMFya3fMeXWDspVov","ULkfbL9WpktbVYnzhl6Jw","PpNOO8JYWe6dM8wruSa7x","di40pCxDn7IiqE8lFdD46","rmW0mkerqV35I8QPji6lM","3IFIK1ByzeIxZCByryGLN","iImkYAKfkw3beAl6pLbDn","ecDe8DNWrkeQTwpTEvHje","i2it5id8qwtg27n4usg8bo1","Yqhdd9mSJGN7OJOeyoSD2","Ws5tah8tpeyn9tK8VBTg8","gWAg15uBJgkS2B0wcpMAa","l7V3v2ep1YdDCt7DOr7Ci","yM2PJBdqJnHpD63cPA6sW","qn0bre7eLbi3QMbCfWkUi","fSu0KxFL41IRouotqmbHs","0gtg24Mj1a1bQFPRGQNlO","7iQPBMltLPLbFEz2qbjPu","yoh4pwoXcfELInGKRdYf6","dCGCWXgAmiOZXbdULT1m6","jMavlje07sNa6hSEIE8WA","Xxm0JE4dKHxrQAaZfzvxD","nRb6Im4Kcmc2ZWE7K1jZ1","PAEBZCyFBZJyR7OoMZ41E","PQ6km8RgRCuyICBPOYz8f","x5tm1nfjzyawwzedy3yitgd","2bhftt8rGuxYu4pFgNqru","hjYIZpHQWuXfeEoGeJEKW","K2M9bQqVq2eQfm29eslKL","X8obW1iKwYsvNgKWGyCzy","yJwSC7hqYIezTFHf5i0Ev","c4Z7ETcOHUILRMH32Sfjw","qiR6dIu857b9M9kTqjOyK","fc2coz74cnfy5czzofx4h5x","Ku1OgHMhELajzo61Gx7ye","LUrfhDWo8wuwZu7CN9TV8","osu6JGOnvXJ5gt3tpqWZY","1a6173cd-cf13-4b34-a522-8350bf9a364f","S2sBltrPfd8a7ICuD7CuH","GLQ2pmkJUNUa93THBDVsD","md6xitz4exia2joa06i490b","oWCuBXOg6JWfZzjmKxmNl","jOmhZ8ovLYTPbpM1vqSDx","p9bov84s0isgkl1ysaw93kk","FraC6xzLy1ei91l1ICyc9","6ceBas2RE9Q4787GDngH7","734cd78d-0bc9-426b-803d-1efc84dfffe5","k4Bb09px6r0FxIRs49SXV","oaG3H1S9IUBO644nGZigu","Ka7agQJkUMRSWN0uFdkWK","si3z090WsiLasMhJBa1Az","hs6rwzt4mogiicoc4gcykbi","ljKAVERmdEiKLK9hXGKBm","zxt3lhonfdhglvijd17ua8c","dd7dopve1dudqkoibkqvti4","923tgifqf59ovv5yldtyi0a","vrjwp01goqw47fqctm4f4lo","c99gdmmppju3r1tth8cb2jx","z2pvn5qxdz84zgygqzxage8"],"parent":null,"data":{},"body":"This Dendron vault of tech knowledge is organized according to domains and their sub-domains, along with specific implementation of those domains.\n\nFor instance, Git itself is a domain. Sub-domains of Git would include things like `commit`,\n`tags`, `reflog` etc. implementations of each of those could be `cli`, `strat`\n(strategies), `inner`, and so on.\n\nThe goal of the wiki is to present data in a manner that is from the perspective\nof a querying user. Here, a user is a programmer wanting to get key information\nfrom a specific domain. For instance, if a user wants to use postgres functions\nand hasn't done them in a while, they should be able to query\n`postgres.functions` to see what information is available to them.\n\nThis wiki has been written with myself in mind. While learning each of these\ndomains, I have been sensitive to the \"aha\" moments and have noted down my\ninsights as they arose. I have refrained from capturing information that I\nconsidered obvious or otherwise non-beneficial to my own understanding.\n\nAs a result, I have allowed myself to use potentially arcane concepts to explain other ones. For example, in my note on [[unit testing|testing.method.unit]], I have made reference to the [[microservices|general.arch.microservice]] note. If these notes were made with the public in mind, this would be a very bad strategy, given that you'd have to understand microservices to be able to draw that same parallel that I've already drawn. Since these notes are written for myself, I have been fine with taking these liberties.\n\nWhat I hope to gain from this wiki is the ability to step away from any\ngiven domain for a long period of time, and be able to be passably useful for\nwhatever my goals are within a short period of time. Of course this is all\nvague sounding, and really depends on the domain along with the ends I am\ntrying to reach.\n\nTo achieve this, the system should be steadfast to:\n- be able to put information in relatively easily, without too much thought\n\trequired to its location. While location is important, Dendron makes it easy\n\tto relocate notes, if it becomes apparent that a different place makes more\n\tsense.\n- be able to extract the information that is needed, meaning there is a\n\thigh-degree in confidence in the location of the information. The idea is\n\tthat information loses a large amount of its value when it is unfindable.\n\tTherefore, a relatively strict ideology should be used when determining\n\twhere a piece of information belongs.\n\t- Some concepts might realistically belong to multiple domains. For instance, the concept of *access modifiers* can be found in both `C#` and `Typescript`. Therefore, this note should be abstracted to a common place, such as [[OOP|paradigm.oop]].\n\nThis Dendron vault is the sister component to the [General Second Brain](https://tech.kyletycholiz.com).\n\n### Tags\nThroughout the garden, I have made use of tags, which give semantic meaning to the pieces of information.\n\n- `ex.` - Denotes an *example* of the preceding piece of information\n- `spec:` - Specifies that the preceding information has some degree of *speculation* to it, and may not be 100% factual. Ideally this gets clarified over time as my understanding develops.\n- `anal:` - Denotes an *analogy* of the preceding information. Often I will attempt to link concepts to others that I have previously learned.\n- `mn:` - Denotes a *mnemonic*\n- `expl:` - Denotes an *explanation*\n\n## Resources\n### UE (Unexamined) Resources\nOften, I come across sources of information that I believe to be high-quality. They may be recommendations or found in some other way. No matter their origin, I may be in a position where I don't have the time to fully examine them (and properly extract notes), or I may not require the information at that moment in time. In cases like these, I will add reference to a section of the note called **UE Resources**. The idea is that in the future when I am ready to examine them, I have a list of resources that I can start with. This is an alternative strategy to compiling browser bookmarks, which I've found can quickly become untenable.\n\n### E (Examined) Resources\nOnce a resource has been thoroughly examined and has been mined for notes, it will be moved from *UE Resources* to *E Resources*. This is to indicate that (in my own estimation), there is nothing more to be gained from the resource that is not already in the note.\n\n### Resources\nThis heading is for inexhaustible resources. \n- A prime example would be a quality website that continually posts articles.  - Another example would be a tool, such as software that measures frequencies in a room to help acoustically treat it.\n"},"collectionChildren":null,"customHeadContent":null,"config":{"version":5,"dev":{"enablePreviewV2":true},"commands":{"lookup":{"note":{"selectionMode":"extract","confirmVaultOnCreate":false,"leaveTrace":false,"bubbleUpCreateNew":true,"fuzzThreshold":0.2,"vaultSelectionModeOnCreate":"smart"}},"insertNote":{"initialValue":"templates"},"insertNoteLink":{"aliasMode":"none","enableMultiSelect":false},"insertNoteIndex":{"enableMarker":false},"randomNote":{},"copyNoteLink":{"aliasMode":"title"},"templateHierarchy":"template"},"workspace":{"dendronVersion":"0.83.0","vaults":[{"fsPath":"../main/tech","name":"tech"}],"journal":{"dailyDomain":"daily","name":"journal","dateFormat":"y.MM.dd","addBehavior":"childOfDomain"},"scratch":{"name":"scratch","dateFormat":"y.MM.dd.HHmmss","addBehavior":"asOwnDomain"},"graph":{"zoomSpeed":1,"createStub":false},"enableAutoCreateOnDefinition":false,"enableXVaultWikiLink":false,"enableRemoteVaultInit":true,"workspaceVaultSyncMode":"noCommit","enableAutoFoldFrontmatter":true,"maxPreviewsCached":10,"maxNoteLength":204800,"task":{"name":"","dateFormat":"","addBehavior":"childOfCurrent","statusSymbols":{"":" ","wip":"w","done":"x","assigned":"a","moved":"m","blocked":"b","delegated":"l","dropped":"d","pending":"y"},"prioritySymbols":{"H":"high","M":"medium","L":"low"},"todoIntegration":false,"createTaskSelectionType":"selection2link","taskCompleteStatus":["done","x"]},"enableUserTags":true,"enableHashTags":true,"enableEditorDecorations":true,"enableFullHierarchyNoteTitle":false},"preview":{"enableFMTitle":true,"enableNoteTitleForLink":true,"enableMermaid":true,"enablePrettyRefs":true,"enableKatex":true,"automaticallyShowPreview":false,"enableFrontmatterTags":true,"enableHashesForFMTags":false},"publishing":{"enableFMTitle":true,"enableNoteTitleForLink":true,"enablePrettyRefs":true,"enableKatex":true,"copyAssets":true,"siteHierarchies":["root"],"writeStubs":false,"siteRootDir":"docs","seo":{"title":"Dendron","description":"The Tech Digital Garden of Kyle Tycholiz"},"github":{"cname":"tech.kyletycholiz.com","enableEditLink":true,"editLinkText":"Edit this page on GitHub","editBranch":"master","editViewMode":"tree"},"enableSiteLastModified":true,"enableFrontmatterTags":true,"enableHashesForFMTags":false,"enableRandomlyColoredTags":true,"enableTaskNotes":true,"enablePrettyLinks":true,"searchMode":"lookup","enableMermaid":true,"siteUrl":"https://tech.kyletycholiz.com","duplicateNoteBehavior":{"action":"useVault","payload":["tech"]},"siteFaviconPath":"favicon.ico","siteIndex":"root"}}},"__N_SSG":true}