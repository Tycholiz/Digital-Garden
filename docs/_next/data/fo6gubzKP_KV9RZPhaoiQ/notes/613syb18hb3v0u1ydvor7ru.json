{"pageProps":{"note":{"id":"613syb18hb3v0u1ydvor7ru","title":"Nestjs","desc":"","updated":1674681817034,"created":1648238868315,"custom":{},"fname":"nestjs","type":"note","vault":{"fsPath":"../main/tech","name":"tech"},"contentHash":"bae208b86500af10bbb1eed455006bd5","links":[{"type":"wiki","from":{"fname":"nestjs","id":"613syb18hb3v0u1ydvor7ru","vaultName":"tech"},"value":"general.patterns.messaging.pubsub","alias":"pub/sub","position":{"start":{"line":4,"column":59,"offset":126},"end":{"line":4,"column":104,"offset":171},"indent":[]},"xvault":false,"sameFile":false,"to":{"fname":"general.patterns.messaging.pubsub"}},{"type":"wiki","from":{"fname":"nestjs","id":"613syb18hb3v0u1ydvor7ru","vaultName":"tech"},"value":"nestjs.modules","alias":"modules","position":{"start":{"line":5,"column":43,"offset":219},"end":{"line":5,"column":69,"offset":245},"indent":[]},"xvault":false,"sameFile":false,"to":{"fname":"nestjs.modules"}},{"type":"wiki","from":{"fname":"nestjs","id":"613syb18hb3v0u1ydvor7ru","vaultName":"tech"},"value":"general.patterns.dependency-injection","alias":"constructor dependency injection","position":{"start":{"line":6,"column":38,"offset":284},"end":{"line":6,"column":152,"offset":398},"indent":[]},"xvault":false,"sameFile":false,"to":{"fname":"general.patterns.dependency-injection","anchorHeader":"nestjs-constructor-dependency-injection"}},{"type":"wiki","from":{"fname":"nestjs","id":"613syb18hb3v0u1ydvor7ru","vaultName":"tech"},"value":"nestjs.providers","alias":"providers","position":{"start":{"line":7,"column":20,"offset":420},"end":{"line":7,"column":50,"offset":450},"indent":[]},"xvault":false,"sameFile":false,"to":{"fname":"nestjs.providers"}},{"type":"wiki","from":{"fname":"nestjs","id":"613syb18hb3v0u1ydvor7ru","vaultName":"tech"},"value":"express","alias":"Express","position":{"start":{"line":13,"column":23,"offset":872},"end":{"line":13,"column":42,"offset":891},"indent":[]},"xvault":false,"sameFile":false,"to":{"fname":"express"}},{"type":"wiki","from":{"fname":"nestjs","id":"613syb18hb3v0u1ydvor7ru","vaultName":"tech"},"value":"deploy.serverless","alias":"serverless","position":{"start":{"line":25,"column":62,"offset":1606},"end":{"line":25,"column":94,"offset":1638},"indent":[]},"xvault":false,"sameFile":false,"to":{"fname":"deploy.serverless"}},{"type":"wiki","from":{"fname":"nestjs","id":"613syb18hb3v0u1ydvor7ru","vaultName":"tech"},"value":"general.patterns.dependency-injection","alias":"dependency injection","position":{"start":{"line":37,"column":37,"offset":2233},"end":{"line":37,"column":99,"offset":2295},"indent":[]},"xvault":false,"sameFile":false,"to":{"fname":"general.patterns.dependency-injection"}},{"type":"wiki","from":{"fname":"nestjs","id":"613syb18hb3v0u1ydvor7ru","vaultName":"tech"},"value":"js.lang.decorator","alias":"decorators","position":{"start":{"line":37,"column":127,"offset":2323},"end":{"line":37,"column":159,"offset":2355},"indent":[]},"xvault":false,"sameFile":false,"to":{"fname":"js.lang.decorator"}},{"type":"wiki","from":{"fname":"nestjs","id":"613syb18hb3v0u1ydvor7ru","vaultName":"tech"},"value":"nestjs.providers","alias":"provider","position":{"start":{"line":40,"column":41,"offset":2501},"end":{"line":40,"column":70,"offset":2530},"indent":[]},"xvault":false,"sameFile":false,"to":{"fname":"nestjs.providers"}},{"type":"wiki","from":{"fname":"nestjs","id":"613syb18hb3v0u1ydvor7ru","vaultName":"tech"},"value":"general.patterns.IoC","alias":"IoC","position":{"start":{"line":41,"column":85,"offset":2696},"end":{"line":41,"column":113,"offset":2724},"indent":[]},"xvault":false,"sameFile":false,"to":{"fname":"general.patterns.IoC"}},{"type":"wiki","from":{"fname":"nestjs","id":"613syb18hb3v0u1ydvor7ru","vaultName":"tech"},"value":"nestjs.guard","alias":"guards","position":{"start":{"line":50,"column":51,"offset":3283},"end":{"line":50,"column":74,"offset":3306},"indent":[]},"xvault":false,"sameFile":false,"to":{"fname":"nestjs.guard"}},{"type":"wiki","from":{"fname":"nestjs","id":"613syb18hb3v0u1ydvor7ru","vaultName":"tech"},"value":"nestjs.interceptor","alias":"interceptors","position":{"start":{"line":50,"column":89,"offset":3321},"end":{"line":50,"column":124,"offset":3356},"indent":[]},"xvault":false,"sameFile":false,"to":{"fname":"nestjs.interceptor"}},{"type":"wiki","from":{"fname":"nestjs","id":"613syb18hb3v0u1ydvor7ru","vaultName":"tech"},"value":"nestjs.controllers","alias":"controllers","position":{"start":{"line":50,"column":161,"offset":3393},"end":{"line":50,"column":195,"offset":3427},"indent":[]},"xvault":false,"sameFile":false,"to":{"fname":"nestjs.controllers"}},{"type":"ref","from":{"fname":"nestjs","id":"613syb18hb3v0u1ydvor7ru","vaultName":"tech"},"value":"nestjs.modules","position":{"start":{"line":93,"column":1,"offset":5969},"end":{"line":93,"column":20,"offset":5988},"indent":[]},"xvault":false,"to":{"fname":"nestjs.modules"}},{"type":"ref","from":{"fname":"nestjs","id":"613syb18hb3v0u1ydvor7ru","vaultName":"tech"},"value":"nestjs.controllers","position":{"start":{"line":96,"column":1,"offset":6006},"end":{"line":96,"column":24,"offset":6029},"indent":[]},"xvault":false,"to":{"fname":"nestjs.controllers"}},{"type":"ref","from":{"fname":"nestjs","id":"613syb18hb3v0u1ydvor7ru","vaultName":"tech"},"value":"nestjs.providers","position":{"start":{"line":99,"column":1,"offset":6045},"end":{"line":99,"column":22,"offset":6066},"indent":[]},"xvault":false,"to":{"fname":"nestjs.providers"}},{"type":"ref","from":{"fname":"nestjs","id":"613syb18hb3v0u1ydvor7ru","vaultName":"tech"},"value":"nestjs.middleware","position":{"start":{"line":102,"column":1,"offset":6083},"end":{"line":102,"column":23,"offset":6105},"indent":[]},"xvault":false,"to":{"fname":"nestjs.middleware"}},{"from":{"fname":"express","id":"L5JUZlGAGvTxrsEBB7DY8","vaultName":"tech"},"type":"backlink","position":{"start":{"line":9,"column":3,"offset":248},"end":{"line":9,"column":13,"offset":258},"indent":[]},"value":"nestjs"},{"from":{"fname":"general.patterns.IoC","id":"bXY3W37GW2ytFJOgbJiol","vaultName":"tech"},"type":"backlink","position":{"start":{"line":11,"column":7,"offset":688},"end":{"line":11,"column":17,"offset":698},"indent":[]},"value":"nestjs"},{"from":{"fname":"general.patterns.dependency-injection","id":"OIBi54r4RJHlcy33iXLpD","vaultName":"tech"},"type":"backlink","position":{"start":{"line":5,"column":12,"offset":213},"end":{"line":5,"column":29,"offset":230},"indent":[]},"value":"nestjs"}],"anchors":{"platform":{"type":"header","text":"Platform","value":"platform","line":17,"column":0,"depth":2},"lifecycle":{"type":"header","text":"Lifecycle","value":"lifecycle","line":36,"column":0,"depth":3},"dependency-injection-and-decorators":{"type":"header","text":"Dependency Injection and Decorators","value":"dependency-injection-and-decorators","line":42,"column":0,"depth":3},"context":{"type":"header","text":"Context","value":"context","line":53,"column":0,"depth":3},"argumentshost":{"type":"header","text":"ArgumentsHost","value":"argumentshost","line":59,"column":0,"depth":4},"methods":{"type":"header","text":"Methods","value":"methods","line":66,"column":0,"depth":5},"executioncontext":{"type":"header","text":"ExecutionContext","value":"executioncontext","line":76,"column":0,"depth":4},"methods-1":{"type":"header","text":"Methods","value":"methods-1","line":81,"column":0,"depth":5},"metadata-and-reflection":{"type":"header","text":"Metadata and Reflection","value":"metadata-and-reflection","line":88,"column":0,"depth":3},"core-components":{"type":"header","text":"Core Components","value":"core-components","line":97,"column":0,"depth":2},"modules":{"type":"header","text":"Modules","value":"modules","line":98,"column":0,"depth":3},"controllers":{"type":"header","text":"Controllers","value":"controllers","line":101,"column":0,"depth":3},"providers":{"type":"header","text":"Providers","value":"providers","line":104,"column":0,"depth":3},"middleware":{"type":"header","text":"Middleware","value":"middleware","line":107,"column":0,"depth":3},"misc":{"type":"header","text":"Misc","value":"misc","line":110,"column":0,"depth":2}},"children":["y2pkv1qotvf5os9vzkt9lu3","nqv4bkm2rp1nljndftgqxdx","n9fg78mnpuk5u5xalihz2bp","saert7xobzak9v2h5jt72b3","rluwlir1bxtd1qe8cjrfamg","9oglq5pogy5inbt24yjk3hp","y8044sa0ai1u2hyoka0lphz","oz006ng8c7qcbzg2ytasznj","38yyqdyxub4tyjdj0jl4ulg","10w9l0kg4v6ik1ceqcfopn2","0lnvdlokt83ssdfl15292vm"],"parent":"olZIVfSs2uLLr3BppFh4K","data":{}},"body":"<h1 id=\"nestjs\">Nestjs<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#nestjs\"></a></h1>\n<p>Nestjs is a server-side application framework</p>\n<ul>\n<li>highly opinionated</li>\n<li>supports multiple data paradigms, such as ClientServer, <a href=\"/notes/NpY4iv9TwpGJODbVesQYe\">pub/sub</a> etc.</li>\n<li>achieves SOLID principles by the use of <a href=\"/notes/y8044sa0ai1u2hyoka0lphz\">modules</a>.</li>\n<li>module dependency is achieved with <a href=\"/notes/OIBi54r4RJHlcy33iXLpD#nestjs-constructor-dependency-injection\">constructor dependency injection</a>. \n<ul>\n<li>Modules import <a href=\"/notes/38yyqdyxub4tyjdj0jl4ulg\">providers</a> to perform some purpose (such as retrieve data from a database, send a message etc.), and those providers are made available within the module. To pass</li>\n</ul>\n</li>\n<li>Nestjs provides an all-tools-supplied approach. \n<ul>\n<li>ex. It has modules out of the box for connections to most types of databases/datastreams (e.g. RDBs, Redis, Kafka, RabbitMQ) and </li>\n</ul>\n</li>\n</ul>\n<h2 id=\"platform\">Platform<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#platform\"></a></h2>\n<p>Nestjs is built on top of an HTTP Node framework</p>\n<ul>\n<li>default options are <a href=\"/notes/L5JUZlGAGvTxrsEBB7DY8\">Express</a> and Fastify</li>\n</ul>\n<p>Depending on which underlying platform we use, we will get access to its API (<code>NestExpressApplication</code> or <code>NestFastifyApplication</code>)</p>\n<ul>\n<li>the resulting <code>app</code> object will have access to the methods of whichever underlying platform we choose.</li>\n</ul>\n<pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">const</span> app <span class=\"token operator\">=</span> <span class=\"token keyword control-flow\">await</span> <span class=\"token maybe-class-name\">NestFactory</span><span class=\"token punctuation\">.</span><span class=\"token generic-function\"><span class=\"token function\">create</span><span class=\"token generic class-name\"><span class=\"token operator\">&#x3C;</span><span class=\"token maybe-class-name\">NestExpressApplication</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token maybe-class-name\">AppModule</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>in Nest, almost everything is shared across incoming requests. </p>\n<ul>\n<li>ex. We have a connection pool to the database, singleton services with global state, etc.</li>\n</ul>\n<p>By default, modules are eagerly loaded (which means that as soon as the application loads, so do all the modules, whether or not they are immediately necessary).</p>\n<ul>\n<li>this is fine for the most part, but if we are running in a <a href=\"/notes/aOfHQ6odySXLBhQgkOtOp\">serverless</a> environment, this would be problematic.\n<ul>\n<li>in this case we want to lazy load the modules.</li>\n</ul>\n</li>\n</ul>\n<p><img src=\"/assets/images/2022-05-16-13-27-38.png\"></p>\n<h3 id=\"lifecycle\">Lifecycle<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#lifecycle\"></a></h3>\n<p>A Nest application, as well as every application element, has a lifecycle managed by Nest. </p>\n<ul>\n<li>Nest provides lifecycle hooks that give visibility into key lifecycle events, and the ability to run registered code in your <code>module</code>, <code>injectable</code> or <code>controller</code> when they occur.</li>\n</ul>\n<p>Lifecycle events can be broken into 3 phases: <em>initializing</em>, <em>running</em> and <em>terminating</em></p>\n<h3 id=\"dependency-injection-and-decorators\">Dependency Injection and Decorators<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#dependency-injection-and-decorators\"></a></h3>\n<p>Nest is built around the pattern of <a href=\"/notes/OIBi54r4RJHlcy33iXLpD\">dependency injection</a>, which is achieved through <a href=\"/notes/j8xi6ftco6n2pbjqw6sbijg\">decorators</a>.</p>\n<ul>\n<li>This is mostly done through the constructor (therefore, it's constructor-based dependency injection)</li>\n</ul>\n<p>The general pattern is that we create a <a href=\"/notes/38yyqdyxub4tyjdj0jl4ulg\">provider</a> by decorating a class with <code>@Injectable</code>, then we pass that class into another c</p>\n<ul>\n<li>the <code>@Injectable</code> decorator enables the class to be registered and managed by the <a href=\"/notes/bXY3W37GW2ytFJOgbJiol\">IoC</a> container (<code>@Modules</code>)</li>\n</ul>\n<p>When we inject a class into another class, Nest will instantiate the class and pass it to the controller's constructor.</p>\n<p>Because of Typescript in Nestjs, it is very easy to manage dependencies, since they are resolved by type.</p>\n<h3 id=\"context\">Context<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#context\"></a></h3>\n<p>Guards, filters and interceptors are meant to be generic. That is, they don't care if they are being used in an HTTP context or WebSockets context.</p>\n<ul>\n<li>Nestjs provides utility classes that provide information about the current execution context.\n<ul>\n<li>this information can be used to build generic <a href=\"/notes/n9fg78mnpuk5u5xalihz2bp\">guards</a>, filters, and <a href=\"/notes/saert7xobzak9v2h5jt72b3\">interceptors</a> that can work across a broad set of <a href=\"/notes/nqv4bkm2rp1nljndftgqxdx\">controllers</a>, methods, and execution contexts.</li>\n</ul>\n</li>\n<li>Two of these utility classes are <code>ArgumentsHost</code> and <code>ExecutionContext</code>.</li>\n</ul>\n<h4 id=\"argumentshost\"><code>ArgumentsHost</code><a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#argumentshost\"></a></h4>\n<p><code>ArgumentsHost</code> is simply an abstraction over a handler's arguments.</p>\n<ul>\n<li>ex. for HTTP server applications, the <code>host</code> object encapsulates Express's <code>[request, response, next]</code> array</li>\n<li>ex. for Graphql server applications, the <code>host</code> object contains the <code>[root, args, context, info]</code> array.</li>\n</ul>\n<p>This class provides methods for retrieving the arguments being passed to a handler. With it, we choose the appropriate context, and then we retrieve the arguments.</p>\n<h5 id=\"methods\">Methods<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#methods\"></a></h5>\n<ul>\n<li><code>getType()</code> tells us which context is being used (<code>http</code>, <code>rpc</code> etc.)</li>\n<li><code>getArgs()</code> gets us back an array of arguments being passed to the handler\n<ul>\n<li>this is generic, since we don't know what arguments we are getting back (since the context has not been specified). For this reason, using <code>switchTo...</code> methods might be preferable, since they return more specific types (such as <code>HttpArgumentsHost</code> or <code>RpcArgumentsHost</code>)</li>\n</ul>\n</li>\n<li><code>switchToHttp()</code></li>\n</ul>\n<pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">const</span> ctx <span class=\"token operator\">=</span> host<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">switchToHttp</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> request <span class=\"token operator\">=</span> ctx<span class=\"token punctuation\">.</span><span class=\"token generic-function\"><span class=\"token function\">getRequest</span><span class=\"token generic class-name\"><span class=\"token operator\">&#x3C;</span><span class=\"token maybe-class-name\">Request</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<h4 id=\"executioncontext\"><code>ExecutionContext</code><a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#executioncontext\"></a></h4>\n<p><code>ExecutionContext</code> extends <code>ArgumentsHost</code>, and gives us additional details about the current execution process.</p>\n<p>Nest provides an instance of <code>ExecutionContext</code> in places you may need it, such as in the <code>canActivate()</code> method of a guard and the <code>intercept()</code> method of an interceptor. </p>\n<h5 id=\"methods-1\">Methods<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#methods-1\"></a></h5>\n<ul>\n<li><code>getClass()</code> Returns the type of the controller class which the current handler belongs to.</li>\n<li><code>getHandler()</code> Returns a reference to the handler (method) that will be invoked next in the request pipeline.\n<ul>\n<li>ex. in an HTTP context, if the currently processed request is a POST request, bound to the <code>create()</code> method on the <code>CatsController</code>, <code>getHandler()</code> returns a reference to the <code>create()</code> method and <code>getClass()</code> returns the <code>CatsController</code> type (not instance).</li>\n</ul>\n</li>\n</ul>\n<p>The ability to access these references gives us the opportunity to access the metadata set through the <code>@SetMetadata()</code> decorator from within guards or interceptors.</p>\n<h3 id=\"metadata-and-reflection\">Metadata and Reflection<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#metadata-and-reflection\"></a></h3>\n<ul>\n<li><a href=\"https://docs.nestjs.com/fundamentals/execution-context#reflection-and-metadata\">docs</a></li>\n</ul>\n<p>We can attach custom metadata to route handlers with the <code>@SetMetadata()</code> decorator, which can then be accessed from within the class via dependency injection (with the <code>Reflector</code> helper class) to make certain decisions.</p>\n<ul>\n<li>ex. we can create some metadata about the roles that a user has.</li>\n</ul>\n<hr>\n<h2 id=\"core-components\">Core Components<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#core-components\"></a></h2>\n<h3 id=\"modules\">Modules<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#modules\"></a></h3>\n<p></p><p></p><div class=\"portal-container\">\n<div class=\"portal-head\">\n<div class=\"portal-backlink\">\n<div class=\"portal-title\">From <span class=\"portal-text-title\">Modules</span></div>\n<a href=\"/notes/y8044sa0ai1u2hyoka0lphz\" class=\"portal-arrow\">Go to text <span class=\"right-arrow\">→</span></a>\n</div>\n</div>\n<div id=\"portal-parent-anchor\" class=\"portal-parent\" markdown=\"1\">\n<div class=\"portal-parent-fader-top\"></div>\n<div class=\"portal-parent-fader-bottom\"></div><p>Modules are the way to organize your components in Nest.</p>\n<ul>\n<li>Decorating a class with <code>@Module</code> provides metadata that Nest makes use of to organize the application structure.</li>\n</ul>\n<p>Each application has at least one module, a root module. </p>\n<ul>\n<li>this is the starting point Nest uses to build the application graph, which is the internal data structure used to resolve module and provider relationships and dependencies.</li>\n<li>this is the module that we register in our <code>main.ts</code> with <code>NestFactory.create(AppModule)</code></li>\n</ul>\n<p>For most applications, the resulting architecture will employ multiple modules, each encapsulating a closely related set of capabilities.</p>\n<ul>\n<li>good practice is to have each module correspond to a <a href=\"/notes/GDJoTJocO8OKbTtSjn2CW\">domain</a></li>\n</ul>\n<p>The module encapsulates providers by default</p>\n<ul>\n<li>This means that in order to inject providers into a different module, they must be exported from the imported module.</li>\n</ul>\n<p>modules are singletons by default</p>\n<ul>\n<li>thus you can share the same instance of any provider between multiple modules effortlessly.</li>\n<li>Every module is automatically a shared module: Once created it can be reused by any module\n<ul>\n<li>to do this, simply add the service to the <code>exports</code> array of the shared module. Now, any module that imports the shared module will have access to the service listed in that <code>exports</code> array.</li>\n</ul>\n</li>\n</ul>\n<p><img src=\"/assets/images/2023-01-23-12-12-32.png\"></p>\n<pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">Module</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// correspond to the HttpService class that gets injected into the provider (service).</span>\n  imports<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token maybe-class-name\">HttpModule</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  providers<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token maybe-class-name\">AutomationService</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  exports<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token maybe-class-name\">AutomationService</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword module\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\"><span class=\"token maybe-class-name\">AutomationModule</span></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// Modules can inject providers (e.g. for configuration purposes):</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">private</span> automationService<span class=\"token operator\">:</span> <span class=\"token maybe-class-name\">AutomationService</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>Modules themselves cannot be injected due to circular dependency.</p>\n<h2 id=\"parts-of-a-module\">Parts of a module<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#parts-of-a-module\"></a></h2>\n<p>The <code>@Module()</code> decorator takes a single object whose properties describe the module:</p>\n<ul>\n<li><code>providers</code> </li>\n<li><code>controllers</code></li>\n<li><code>imports</code></li>\n<li><code>exports</code></li>\n</ul>\n<h3 id=\"providers\"><code>providers</code><a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#providers\"></a></h3>\n<p>The <code>providers</code> property is an array of providers that will be instantiated by the Nest injector and that may be shared at least across this module. </p>\n<ul>\n<li>When we put a provider here, we are registering it with the <a href=\"/notes/bXY3W37GW2ytFJOgbJiol#ioc-container1\">IoC container</a> (ie. the NestJS runtime) so that it can be instantiated at the site where it is injected (this is dependency injection).</li>\n</ul>\n<h3 id=\"controllers\"><code>controllers</code><a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#controllers\"></a></h3>\n<p>the set of controllers defined in this module which have to be instantiated</p>\n<h3 id=\"imports\"><code>imports</code><a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#imports\"></a></h3>\n<p>the list of imported modules that export the providers which are required in this module</p>\n<ul>\n<li>put another way, if there is a provider from another module and we want to use it in our module, then we must add the provider to that module's <code>exports</code> list, and then include that module in our <code>imports</code> list.</li>\n</ul>\n<p>this array enables sharing of providers across modules</p>\n<p>Don't add the same provider to multiple modules. Instead, export the provider, and import the module.</p>\n<h3 id=\"exports\"><code>exports</code><a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#exports\"></a></h3>\n<p>the subset of providers that are provided by this module and should be available in other modules which import this module. You can use either the provider itself or just its token (provide value)</p>\n<p>you may consider the exported providers as the module's API</p>\n<p>Modules can export their internal providers</p>\n<ul>\n<li>In addition, they can re-export modules that they import.</li>\n</ul>\n<h2 id=\"dynamic-modules\">Dynamic Modules<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#dynamic-modules\"></a></h2>\n<p>Dynamic modules enable us to easily create customizable modules that can register and configure <a href=\"/notes/38yyqdyxub4tyjdj0jl4ulg\">providers</a> dynamically.</p>\n<p>Dynamic modules are created in the module class:</p>\n<pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword module\">import</span> <span class=\"token imports\"><span class=\"token punctuation\">{</span> createDatabaseProviders <span class=\"token punctuation\">}</span></span> <span class=\"token keyword module\">from</span> <span class=\"token string\">'./database.providers'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword module\">import</span> <span class=\"token imports\"><span class=\"token punctuation\">{</span> <span class=\"token maybe-class-name\">Connection</span> <span class=\"token punctuation\">}</span></span> <span class=\"token keyword module\">from</span> <span class=\"token string\">'./connection.provider'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">Module</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  providers<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token maybe-class-name\">Connection</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword module\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\"><span class=\"token maybe-class-name\">DatabaseModule</span></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// forRoot may be async or sync</span>\n  <span class=\"token keyword\">static</span> <span class=\"token function\">forRoot</span><span class=\"token punctuation\">(</span>entities <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> options<span class=\"token operator\">?</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token maybe-class-name\">DynamicModule</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> providers <span class=\"token operator\">=</span> <span class=\"token function\">createDatabaseProviders</span><span class=\"token punctuation\">(</span>options<span class=\"token punctuation\">,</span> entities<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword control-flow\">return</span> <span class=\"token punctuation\">{</span>\n      module<span class=\"token operator\">:</span> <span class=\"token maybe-class-name\">DatabaseModule</span><span class=\"token punctuation\">,</span>\n      providers<span class=\"token operator\">:</span> providers<span class=\"token punctuation\">,</span>\n      exports<span class=\"token operator\">:</span> providers<span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<ul>\n<li><a href=\"https://docs.nestjs.com/fundamentals/dynamic-modules\">docs</a></li>\n</ul>\n<h2 id=\"global-modules\">Global Modules<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#global-modules\"></a></h2>\n<p>Global modules are useful for when you want to provide a set of providers which should be available everywhere out-of-the-box (e.g., helpers, database connections, etc.)</p>\n<p>We can make a set of providers global with the <code>@Global</code> decorator:</p>\n<pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">Global</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">Module</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// Module configuration</span>\n</code></pre>\n<h2 id=\"cli\">CLI<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#cli\"></a></h2>\n<ul>\n<li>generate a module named \"cats\" - <code>nest g module cats</code></li>\n</ul></div></div><p></p><p></p>\n<h3 id=\"controllers-1\">Controllers<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#controllers-1\"></a></h3>\n<p></p><p></p><div class=\"portal-container\">\n<div class=\"portal-head\">\n<div class=\"portal-backlink\">\n<div class=\"portal-title\">From <span class=\"portal-text-title\">Controllers</span></div>\n<a href=\"/notes/nqv4bkm2rp1nljndftgqxdx\" class=\"portal-arrow\">Go to text <span class=\"right-arrow\">→</span></a>\n</div>\n</div>\n<div id=\"portal-parent-anchor\" class=\"portal-parent\" markdown=\"1\">\n<div class=\"portal-parent-fader-top\"></div>\n<div class=\"portal-parent-fader-bottom\"></div><p>Controllers are responsible for handling incoming requests and returning responses to the client.</p>\n<ul>\n<li>Controllers should only handle HTTP requests; delegating more complex tasks to providers</li>\n</ul>\n<p>Most often, providers are injected into controllers, allowing the controller the ability to call methods on the instantiated provider</p>\n<ul>\n<li>to do this, both the controller and the provider must be registered in the module</li>\n</ul>\n<p>The routing mechanism controls which controller receives which requests.</p>\n<p>Normally, each controller has more than one route, and different routes can perform different actions.</p>\n<ul>\n<li>in a REST api, <code>/customers</code> and <code>/products</code> would be 2 different controllers\n<ul>\n<li>ex. route path prefix implemented as <code>@Controller('customers')</code></li>\n</ul>\n</li>\n</ul>\n<p>The decorators (e.g. <code>@Controller</code>, <code>@Get</code>) associate classes with required metadata and enable Nest to create a routing map (which associates which requests belong with which controllers)</p>\n<p>Route handlers can either return a <a href=\"/notes/FVbSefFiCJPpdtkRRsogA\">Promise</a> or an <a href=\"/notes/PwvObIRuk7dy0GXweZT0c\">observable</a> stream:</p>\n<pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token comment\">// Promise approach</span>\n<span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">Get</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">async</span> <span class=\"token function\">findAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token known-class-name class-name\">Promise</span><span class=\"token operator\">&#x3C;</span><span class=\"token builtin\">any</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword control-flow\">return</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// Observable approach</span>\n<span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">Get</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">findAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token maybe-class-name\">Observable</span><span class=\"token operator\">&#x3C;</span><span class=\"token builtin\">any</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword control-flow\">return</span> <span class=\"token keyword\">of</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>If returning an observable stream, Nest will automatically subscribe to the source underneath and take the last emitted value (once the stream is completed)</p></div></div><p></p><p></p>\n<h3 id=\"providers-1\">Providers<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#providers-1\"></a></h3>\n<p></p><p></p><div class=\"portal-container\">\n<div class=\"portal-head\">\n<div class=\"portal-backlink\">\n<div class=\"portal-title\">From <span class=\"portal-text-title\">Providers</span></div>\n<a href=\"/notes/38yyqdyxub4tyjdj0jl4ulg\" class=\"portal-arrow\">Go to text <span class=\"right-arrow\">→</span></a>\n</div>\n</div>\n<div id=\"portal-parent-anchor\" class=\"portal-parent\" markdown=\"1\">\n<div class=\"portal-parent-fader-top\"></div>\n<div class=\"portal-parent-fader-bottom\"></div><h2 id=\"what-is-it\">What is it?<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#what-is-it\"></a></h2>\n<p>A provider is a class that can be injected into the constructor of other classes (dependency injection)</p>\n<ul>\n<li>We mark the class as a <code>provider</code> by using the <code>@Injectable()</code> decorator, which lets us pass the class into a controller (spec: not limited to controllers), where it is then instantiated by the <a href=\"/notes/bXY3W37GW2ytFJOgbJiol#ioc-container1\">IoC container</a> (ie. the NestJS runtime)</li>\n</ul>\n<p>The main idea of a provider is that it can be injected as dependency; this means objects can create various relationships with each other, and the function of \"wiring up\" instances of objects can largely be delegated to the Nest runtime system.</p>\n<p>A provider \"provides\" some value to the dependent that it is being used in. </p>\n<ul>\n<li>a service is a provider that, when injected into a class, allows the class to use the methods defined on the provider itself.\n<ul>\n<li>ex. we could have a <code>NuggetsService</code> provider, whose role is to fetch nuggets. Now, from other providers we can inject the <code>NuggetService</code>, allowing us to fetch nuggets from that other provider.</li>\n</ul>\n</li>\n</ul>\n<p>By default, a Provider belonging to a Module will be available within the module.</p>\n<ul>\n<li>in other words, it does not have to be imported in the <code>module</code> if we are accessing the provider from within it.</li>\n</ul>\n<p>Providers normally have a lifetime (\"scope\") synchronized with the application lifecycle. </p>\n<ul>\n<li>When the application is bootstrapped, every dependency must be resolved, and therefore every provider has to be instantiated. </li>\n<li>Similarly, when the application shuts down, each provider will be destroyed. \n<ul>\n<li>there are ways to make your provider lifetime request-scoped as well.</li>\n</ul>\n</li>\n</ul>\n<p>Providers are plain JavaScript classes that are declared as providers in a module.</p>\n<p>Responsible for things like:</p>\n<ul>\n<li>data storage and retrieval (Service)</li>\n<li>repositories, factories, helpers</li>\n</ul>\n<p>Nest has a built-in <a href=\"/notes/bXY3W37GW2ytFJOgbJiol#ioc-container1\">IoC container</a> that resolves relationships between providers.</p>\n<p>The <code>@Injectable()</code> decorator attaches metadata, which declares that the class can be managed by the Nest IoC container</p>\n<h2 id=\"how-does-it-work\">How does it work?<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#how-does-it-work\"></a></h2>\n<p>the syntax <code>providers: [CatsService]</code> is short-hand for the more complete syntax:</p>\n<pre class=\"language-ts\"><code class=\"language-ts\">providers<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n  <span class=\"token punctuation\">{</span>\n    provide<span class=\"token operator\">:</span> <span class=\"token maybe-class-name\">CatsService</span><span class=\"token punctuation\">,</span>\n    useClass<span class=\"token operator\">:</span> <span class=\"token maybe-class-name\">CatsService</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<ul>\n<li>with this syntax, we can clearly see that the <code>CatsService</code> token is being associated with the class <code>CatsService</code>\n<ul>\n<li>the shorthand exists since the most common use-case is that a token is used to request an instance of a class by the same name.</li>\n</ul>\n</li>\n<li>the value for <code>provide</code> (ie. the token) can also be a string or <a href=\"/notes/NeWmMgh6EOtTIMkuYRkKe\">Symbol</a>. In this case, it can only be injected with the <code>@Inject</code> decorator, where the token is then referenced: <code>@Inject('CONNECTION') connection: Connection</code></li>\n</ul>\n<h3 id=\"registration-process\">Registration process<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#registration-process\"></a></h3>\n<p>Registration happens in the <code>module</code> file.</p>\n<p>Registration is about associating a token (name/id) with a class.</p>\n<pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token comment\">// app.module.ts</span>\n\n<span class=\"token comment\">// this is shorthand</span>\nproviders<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token maybe-class-name\">CatsService</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n\n<span class=\"token comment\">// for this</span>\nproviders<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n  <span class=\"token punctuation\">{</span>\n    provide<span class=\"token operator\">:</span> <span class=\"token maybe-class-name\">CatsService</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// token</span>\n    useClass<span class=\"token operator\">:</span> <span class=\"token maybe-class-name\">CatsService</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>Seeing the explicit construction helps to see how the registration process (into the Nestjs IoC container) is really just a mapping between the token and the class.</p>\n<ul>\n<li>This is done for convenience to simplify the most common use-case, where the token is used to request an instance of a class by the same name.</li>\n</ul>\n<h3 id=\"injecting-non-service-based-providers\">Injecting non-service based Providers<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#injecting-non-service-based-providers\"></a></h3>\n<p>Though the most common use is to inject services, we can really inject any kind of value, allowing us to do things like put an external library into the Nest IoC container, or replace a real implementation with a mock object (useful for testing).</p>\n<ul>\n<li>ex. here, we are associating a string-valued token (<code>'CONNECTION'</code>) with a pre-existing connection object we've imported from an external file:</li>\n</ul>\n<pre class=\"language-ts\"><code class=\"language-ts\">providers<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n  <span class=\"token punctuation\">{</span>\n    provide<span class=\"token operator\">:</span> <span class=\"token string\">'CONNECTION'</span><span class=\"token punctuation\">,</span>\n    useValue<span class=\"token operator\">:</span> connection<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n</code></pre>\n<p>Which can be used in a provider:</p>\n<pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">Injectable</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword module\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\"><span class=\"token maybe-class-name\">CatsRepository</span></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">Inject</span></span><span class=\"token punctuation\">(</span><span class=\"token string\">'CONNECTION'</span><span class=\"token punctuation\">)</span> connection<span class=\"token operator\">:</span> <span class=\"token maybe-class-name\">Connection</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h3 id=\"asynchronous-providers-usefactory\">Asynchronous providers (<code>useFactory</code>)<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#asynchronous-providers-usefactory\"></a></h3>\n<p>At times, the application start should be delayed until one or more asynchronous tasks are completed. </p>\n<ul>\n<li>ex. you may not want to start accepting requests until the connection with the database has been established. </li>\n</ul>\n<p>This can be accomplished by registering a provider as an <code>async</code> function along with the <code>useFactory</code> syntax.</p>\n<pre class=\"language-ts\"><code class=\"language-ts\">providers<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n  <span class=\"token punctuation\">{</span>\n    provide<span class=\"token operator\">:</span> <span class=\"token string\">'ASYNC_CONNECTION'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function-variable function\">useFactory</span><span class=\"token operator\">:</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">const</span> connection <span class=\"token operator\">=</span> <span class=\"token keyword control-flow\">await</span> <span class=\"token function\">createConnection</span><span class=\"token punctuation\">(</span>options<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword control-flow\">return</span> connection<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">]</span>\n</code></pre>\n<p>This factory function returns a provider, which can then be injected into a class like any other provider with <code>@Inject('ASYNC_CONNECTION')</code></p>\n<p>Here, Nest will await resolution of the <code>useFactory</code> promise before instantiating any class that depends on (injects) such a provider.</p>\n<hr>\n<h2 id=\"custom-providers\">Custom Providers<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#custom-providers\"></a></h2>\n<p>Custom providers let us do things like:</p>\n<ul>\n<li>instantiate a provider by ourselves (instead of delegating that responsibility to the Nestjs runtime)</li>\n<li>re-use an existing class in a second dependency</li>\n<li>override a class with a mock version for testing</li>\n</ul>\n<h3 id=\"class-provider-useclass\">Class Provider (<code>useClass</code>)<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#class-provider-useclass\"></a></h3>\n<p><code>useClass</code> is the default way to specify which provider the token will resolve to.</p>\n<ul>\n<li>in other words, the shortform will resolve to this syntax.</li>\n</ul>\n<p>We can dynamically determine the class that the token will resolve to by using a ternary operator in the <code>useClass</code> key.</p>\n<ul>\n<li>ex. imagine you have a default <code>ConfigService</code> (therefore, high level of generality/abstraction). Depending on which environment we are in, we want to provide the Nestjs IoC container with a different implementation of the class.</li>\n</ul>\n<h3 id=\"value-provider-usevalue\">Value Provider (<code>useValue</code>)<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#value-provider-usevalue\"></a></h3>\n<p>Specifying a provider like this is useful for injecting a constant value.</p>\n<ul>\n<li>ex. putting an external libary into the Nestjs container.</li>\n<li>ex. replace a real implementation with a mock object</li>\n</ul>\n<p>The value to <code>useValue</code> will be a simple object that has the same interface as the service it is replacing.</p>\n<h3 id=\"factory-provider\">Factory Provider<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#factory-provider\"></a></h3></div></div><p></p><p></p>\n<h3 id=\"middleware\">Middleware<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#middleware\"></a></h3>\n<p></p><p></p><div class=\"portal-container\">\n<div class=\"portal-head\">\n<div class=\"portal-backlink\">\n<div class=\"portal-title\">From <span class=\"portal-text-title\">Middleware</span></div>\n<a href=\"/notes/9oglq5pogy5inbt24yjk3hp\" class=\"portal-arrow\">Go to text <span class=\"right-arrow\">→</span></a>\n</div>\n</div>\n<div id=\"portal-parent-anchor\" class=\"portal-parent\" markdown=\"1\">\n<div class=\"portal-parent-fader-top\"></div>\n<div class=\"portal-parent-fader-bottom\"></div><p>Nestjs middleware is equivalent to <a href=\"/notes/inMGAxYKmDgpSWcHN6tXN\">Express middleware</a></p>\n<p>Custom middleware is implemented either in either a function, or in a class with an <code>@Injectable()</code> decorator.</p>\n<ul>\n<li>The class should implement the <code>NestMiddleware</code> interface, while the function does not have any special requirements.</li>\n</ul>\n<p>Middleware fully supports dependency injection.</p>\n<p>We set up middleware using the <code>configure()</code> method of the module class. </p>\n<ul>\n<li>Modules that include middleware have to implement the <code>NestModule</code> interface.</li>\n</ul>\n<pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">Module</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  imports<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token maybe-class-name\">CatsModule</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword module\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\"><span class=\"token maybe-class-name\">AppModule</span></span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\"><span class=\"token maybe-class-name\">NestModule</span></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">configure</span><span class=\"token punctuation\">(</span>consumer<span class=\"token operator\">:</span> <span class=\"token maybe-class-name\">MiddlewareConsumer</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    consumer\n      <span class=\"token punctuation\">.</span><span class=\"token method function property-access\">apply</span><span class=\"token punctuation\">(</span><span class=\"token maybe-class-name\">LoggerMiddleware</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">.</span><span class=\"token method function property-access\">forRoutes</span><span class=\"token punctuation\">(</span><span class=\"token string\">'cats'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div></div><p></p><p></p>\n<h2 id=\"misc\">Misc<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#misc\"></a></h2>\n<ul>\n<li>In Nest, a microservice is defined as an application that uses a different transport layer than HTTP.</li>\n</ul>\n<hr>\n<strong>Children</strong>\n<ol>\n<li><a href=\"/notes/y2pkv1qotvf5os9vzkt9lu3\">CLI</a></li>\n<li><a href=\"/notes/nqv4bkm2rp1nljndftgqxdx\">Controllers</a></li>\n<li><a href=\"/notes/n9fg78mnpuk5u5xalihz2bp\">Guard</a></li>\n<li><a href=\"/notes/saert7xobzak9v2h5jt72b3\">Interceptor</a></li>\n<li><a href=\"/notes/rluwlir1bxtd1qe8cjrfamg\">Microservices</a></li>\n<li><a href=\"/notes/9oglq5pogy5inbt24yjk3hp\">Middleware</a></li>\n<li><a href=\"/notes/y8044sa0ai1u2hyoka0lphz\">Modules</a></li>\n<li><a href=\"/notes/oz006ng8c7qcbzg2ytasznj\">Pipe</a></li>\n<li><a href=\"/notes/38yyqdyxub4tyjdj0jl4ulg\">Providers</a></li>\n<li><a href=\"/notes/10w9l0kg4v6ik1ceqcfopn2\">Runtim</a></li>\n<li><a href=\"/notes/0lnvdlokt83ssdfl15292vm\">Testing in Nestjs</a></li>\n</ol>\n<hr>\n<strong>Backlinks</strong>\n<ul>\n<li><a href=\"/notes/L5JUZlGAGvTxrsEBB7DY8\">Express</a></li>\n<li><a href=\"/notes/bXY3W37GW2ytFJOgbJiol\">IoC (Inversion of Control)</a></li>\n<li><a href=\"/notes/OIBi54r4RJHlcy33iXLpD\">Dependency Injection</a></li>\n</ul>","noteIndex":{"id":"olZIVfSs2uLLr3BppFh4K","title":"Digital Garden","desc":"","updated":1674517603573,"created":1615482407722,"custom":{"nav_order":0,"permalink":"/"},"fname":"root","type":"note","vault":{"fsPath":"../main/tech","name":"tech"},"contentHash":"effb007003ca6a91d7fd0c293e1d2436","links":[{"type":"wiki","from":{"fname":"root","id":"olZIVfSs2uLLr3BppFh4K","vaultName":"tech"},"value":"testing.method.unit","alias":"unit testing","position":{"start":{"line":18,"column":121,"offset":1146},"end":{"line":18,"column":157,"offset":1182},"indent":[]},"xvault":false,"sameFile":false,"to":{"fname":"testing.method.unit"}},{"type":"wiki","from":{"fname":"root","id":"olZIVfSs2uLLr3BppFh4K","vaultName":"tech"},"value":"general.arch.microservice","alias":"microservices","position":{"start":{"line":18,"column":188,"offset":1213},"end":{"line":18,"column":231,"offset":1256},"indent":[]},"xvault":false,"sameFile":false,"to":{"fname":"general.arch.microservice"}},{"type":"wiki","from":{"fname":"root","id":"olZIVfSs2uLLr3BppFh4K","vaultName":"tech"},"value":"paradigm.oop","alias":"OOP","position":{"start":{"line":36,"column":227,"offset":2718},"end":{"line":36,"column":247,"offset":2738},"indent":[]},"xvault":false,"sameFile":false,"to":{"fname":"paradigm.oop"}}],"anchors":{"tags":{"type":"header","text":"Tags","value":"tags","line":46,"column":0,"depth":3},"resources":{"type":"header","text":"Resources","value":"resources","line":55,"column":0,"depth":2},"ue-unexamined-resources":{"type":"header","text":"UE (Unexamined) Resources","value":"ue-unexamined-resources","line":56,"column":0,"depth":3},"e-examined-resources":{"type":"header","text":"E (Examined) Resources","value":"e-examined-resources","line":59,"column":0,"depth":3},"resources-1":{"type":"header","text":"Resources","value":"resources-1","line":62,"column":0,"depth":3}},"children":["40ubf88tephzbdjte8cdsa0","zFMjbn3xihVNHjUIdZCD1","IK6NOKemuDjhfstJBovKL","ZaTr28eWk1DrXOEsc1YVb","Vi0WYVLZunVM9iR8XZJn3","ngAbg7gluvbt1bY1UIRsi","RCPPXSakm5TvKka8kOmVp","LIcuGYV0DDt1VWbvH6Sed","MPx8ykTP57I40WTZvTP7f","ZU5WmdTG1bHoE8RcmZXZG","jqWiyYJff92RjXuUQt9PQ","KihijM8OQvZ4pASkkhqzL","F9vyqvls3OBCujtukqKhy","k6jxm2b3edgkhbordpuz6v1","facc2b01-755a-409f-99f6-57bef2d1501f","bZumdyapJ2H0wWWOmJ45i","elqpgoe2r951si4xrhujppj","m5ov42Vm6mR7RQWTvl1NW","cw8cerc0cos8lh871oz8rtf","PZxxZ4iESzSlbbHJKxuAZ","UDu62Pa6BaRqlG8uGoMhy","u3zcndycwqessho5h6x0nz9","ZgCUp366YrF2Tyky2NT73","DVpVUmavSoVDA7UIlPzLX","nMCtMXVvjBsJk3iw1zoIO","ANfx9Z4a6ZA0uJuSHtbIJ","BkG557LKUYbH1DnxprEVT","1TaH8zDTM98FZ9SYaeXLM","02v7ymc144e5c4pv3edkud7","dc79799f-a55d-48ab-a8be-c48adb1b19c0","f6feef57-b8f5-451f-a09a-7b63f6a07183","4sz47Y0LKs1Si73rWtyyh","g7ulqi8no93ezeocbesc3ll","5a9fb1df-478e-4687-9be0-5cb97e61ec57","1374e9e9-1cbc-4e1f-b1ca-66b8569533dd","D8Z3rjXkSj2EOymXQXF4Z","np3c1ykvnjqv5xoombpfwqz","f529cc34-aba0-45ca-ad7e-02ddda318941","0zcauha3il2NqtxZazIo7","9bbd6f68-03b2-41f4-92e4-2ca313e8b450","5a2ab598-fa7e-4471-8bda-9f5831b679ae","uV6w4mZPoohWyZV4Xaad0","QHXEIyeZGIGMVi5Q52UWI","RgE0mZLaUjPftFPZsiAoe","mytCOts26Pidush65tdRW","fwUzxfLSPMH1eL8oBoLWx","wazdsda6h25x66edvfmeuiv","TbW7PM9bg1y5TGkiWwQ8b","xiSIDeEtIc8X0lpUQlppI","0jxgntiLNHWFuCbzqtFGF","GkdMprLUe4QQULBxmGN6V","4SYc6v5hxY5g6Ip6kjpwO","czi7ilt2i1uoqm1f2otbntj","fqVQpS9FBiXgKsZX3R3sJ","L5JUZlGAGvTxrsEBB7DY8","ttyri4pwfyn5lcx0vp9804o","TeTedoeS2LdHPR632eCpM","ulicRRwo3lSFzh3tMfWH9","p7d24vyb8m00ombzn34t50c","e65188a1-177e-4ab2-99f9-75f85d537621","fajYnbVhCRDi74xn0H30R","bArGdGwqo3iFkyKMyE7qR","4Dcp7gbEVoLLgfu7bXFai","5d700782-fb81-416e-83f9-5dd88260e350","zubgzhNFE6KlTgXcjTz6O","8lpdfWa0cbSq1XJQbcYcY","2psluywdc416t7vrql0m058","17I8ZksXvqCH1mRtZDjHp","kF916Ow84qpJJeMRkWMIo","tMLkLcrIHHBz56xVmBLkP","CSePBQ6q7qhowKESqVwt7","laZ4OfLhZNK1Kuy6GaWUr","z5IJblOknQhMzZ5QZh4ye","N36FHxfxzwJfxDY3miWyX","3bb25f58-2b50-4fa3-af55-48ea9f88a081","7x07qjgbitozdfszqzuy7ix","u93Rz4fEWGu6VBR30Zraf","9hjMHnKvYT4jLKvuDSXaV","qC5GxCZBmNb4Ip6c0kU8x","LgW7mTIALODoXc54B3p6S","UYPxfHBFWX7fb6hHU5bB6","74lYtC8NKpCzcyFOZTfR1","sEoBNAEuaTxwSmTXDonZt","dj0jr9mpvs62e2pkg3zc3yy","z8ie0xjogb6ht7gzowav5xr","qxSOd6SPN8qf9ZUojVFDX","WQoMTf6VXBaxCgksXAVsj","2Mw4XgfyCHXHNOX5yoCIY","qcdt2f7jo51muquo5r95dpo","0XJqmcdtcMZu66glBI5O8","lK8r8BXS4ThiUTe4xKIZe","93de42ca-53ea-460a-baa7-b9ec5c47cb1e","Rxs2jaGpdFzqYtP7lAJFJ","aO8W81Z0PyIb6Hs7nOHPW","lhzisalkebu4w5n01np07i0","7b5l4b6fi65n7sv9org5q1l","I01hENHnh8Tqu3Ok8sLzG","03o3n0hz9v9jtb7j889zpd4","evqsPNutOaZ8hcBCqxFQu","zhhxcjZUHdU8uRLwGb9Zh","G1aFACZB2ooWGMGwyd3ZW","YWy1C4tgoaCcw1m8JJsr7","Szj3o5iaNxPpesiCqwrbu","613syb18hb3v0u1ydvor7ru","XhvCDW3fIw6h6MhY5ticq","Q70g7SusFZBQXzkuQifv4","AzfWDH3wp7jFpL2EYxBcW","y0fwpZ9qMqirsLiFyOciU","ZF8xj8wwDUqKlrwTrCFZ1","tAJvhqhdfyZZa87QHq1TU","4hRmipi8lxpBLyzWu5JVB","iTg0C7QjvnmqBZeEigJNs","3babc3d2-79ae-470a-9c06-ab8bba2e684e","bF3UsMFya3fMeXWDspVov","ULkfbL9WpktbVYnzhl6Jw","PpNOO8JYWe6dM8wruSa7x","di40pCxDn7IiqE8lFdD46","rmW0mkerqV35I8QPji6lM","3IFIK1ByzeIxZCByryGLN","iImkYAKfkw3beAl6pLbDn","ecDe8DNWrkeQTwpTEvHje","i2it5id8qwtg27n4usg8bo1","Yqhdd9mSJGN7OJOeyoSD2","Ws5tah8tpeyn9tK8VBTg8","gWAg15uBJgkS2B0wcpMAa","l7V3v2ep1YdDCt7DOr7Ci","yM2PJBdqJnHpD63cPA6sW","qn0bre7eLbi3QMbCfWkUi","fSu0KxFL41IRouotqmbHs","0gtg24Mj1a1bQFPRGQNlO","7iQPBMltLPLbFEz2qbjPu","yoh4pwoXcfELInGKRdYf6","dCGCWXgAmiOZXbdULT1m6","jMavlje07sNa6hSEIE8WA","Xxm0JE4dKHxrQAaZfzvxD","nRb6Im4Kcmc2ZWE7K1jZ1","PAEBZCyFBZJyR7OoMZ41E","PQ6km8RgRCuyICBPOYz8f","x5tm1nfjzyawwzedy3yitgd","2bhftt8rGuxYu4pFgNqru","hjYIZpHQWuXfeEoGeJEKW","K2M9bQqVq2eQfm29eslKL","X8obW1iKwYsvNgKWGyCzy","yJwSC7hqYIezTFHf5i0Ev","c4Z7ETcOHUILRMH32Sfjw","qiR6dIu857b9M9kTqjOyK","fc2coz74cnfy5czzofx4h5x","Ku1OgHMhELajzo61Gx7ye","LUrfhDWo8wuwZu7CN9TV8","osu6JGOnvXJ5gt3tpqWZY","1a6173cd-cf13-4b34-a522-8350bf9a364f","S2sBltrPfd8a7ICuD7CuH","GLQ2pmkJUNUa93THBDVsD","md6xitz4exia2joa06i490b","oWCuBXOg6JWfZzjmKxmNl","jOmhZ8ovLYTPbpM1vqSDx","p9bov84s0isgkl1ysaw93kk","FraC6xzLy1ei91l1ICyc9","6ceBas2RE9Q4787GDngH7","734cd78d-0bc9-426b-803d-1efc84dfffe5","k4Bb09px6r0FxIRs49SXV","oaG3H1S9IUBO644nGZigu","Ka7agQJkUMRSWN0uFdkWK","si3z090WsiLasMhJBa1Az","hs6rwzt4mogiicoc4gcykbi","ljKAVERmdEiKLK9hXGKBm","zxt3lhonfdhglvijd17ua8c","dd7dopve1dudqkoibkqvti4","923tgifqf59ovv5yldtyi0a","vrjwp01goqw47fqctm4f4lo","c99gdmmppju3r1tth8cb2jx","z2pvn5qxdz84zgygqzxage8"],"parent":null,"data":{},"body":"This Dendron vault of tech knowledge is organized according to domains and their sub-domains, along with specific implementation of those domains.\n\nFor instance, Git itself is a domain. Sub-domains of Git would include things like `commit`,\n`tags`, `reflog` etc. implementations of each of those could be `cli`, `strat`\n(strategies), `inner`, and so on.\n\nThe goal of the wiki is to present data in a manner that is from the perspective\nof a querying user. Here, a user is a programmer wanting to get key information\nfrom a specific domain. For instance, if a user wants to use postgres functions\nand hasn't done them in a while, they should be able to query\n`postgres.functions` to see what information is available to them.\n\nThis wiki has been written with myself in mind. While learning each of these\ndomains, I have been sensitive to the \"aha\" moments and have noted down my\ninsights as they arose. I have refrained from capturing information that I\nconsidered obvious or otherwise non-beneficial to my own understanding.\n\nAs a result, I have allowed myself to use potentially arcane concepts to explain other ones. For example, in my note on [[unit testing|testing.method.unit]], I have made reference to the [[microservices|general.arch.microservice]] note. If these notes were made with the public in mind, this would be a very bad strategy, given that you'd have to understand microservices to be able to draw that same parallel that I've already drawn. Since these notes are written for myself, I have been fine with taking these liberties.\n\nWhat I hope to gain from this wiki is the ability to step away from any\ngiven domain for a long period of time, and be able to be passably useful for\nwhatever my goals are within a short period of time. Of course this is all\nvague sounding, and really depends on the domain along with the ends I am\ntrying to reach.\n\nTo achieve this, the system should be steadfast to:\n- be able to put information in relatively easily, without too much thought\n\trequired to its location. While location is important, Dendron makes it easy\n\tto relocate notes, if it becomes apparent that a different place makes more\n\tsense.\n- be able to extract the information that is needed, meaning there is a\n\thigh-degree in confidence in the location of the information. The idea is\n\tthat information loses a large amount of its value when it is unfindable.\n\tTherefore, a relatively strict ideology should be used when determining\n\twhere a piece of information belongs.\n\t- Some concepts might realistically belong to multiple domains. For instance, the concept of *access modifiers* can be found in both `C#` and `Typescript`. Therefore, this note should be abstracted to a common place, such as [[OOP|paradigm.oop]].\n\nThis Dendron vault is the sister component to the [General Second Brain](https://tech.kyletycholiz.com).\n\n### Tags\nThroughout the garden, I have made use of tags, which give semantic meaning to the pieces of information.\n\n- `ex.` - Denotes an *example* of the preceding piece of information\n- `spec:` - Specifies that the preceding information has some degree of *speculation* to it, and may not be 100% factual. Ideally this gets clarified over time as my understanding develops.\n- `anal:` - Denotes an *analogy* of the preceding information. Often I will attempt to link concepts to others that I have previously learned.\n- `mn:` - Denotes a *mnemonic*\n- `expl:` - Denotes an *explanation*\n\n## Resources\n### UE (Unexamined) Resources\nOften, I come across sources of information that I believe to be high-quality. They may be recommendations or found in some other way. No matter their origin, I may be in a position where I don't have the time to fully examine them (and properly extract notes), or I may not require the information at that moment in time. In cases like these, I will add reference to a section of the note called **UE Resources**. The idea is that in the future when I am ready to examine them, I have a list of resources that I can start with. This is an alternative strategy to compiling browser bookmarks, which I've found can quickly become untenable.\n\n### E (Examined) Resources\nOnce a resource has been thoroughly examined and has been mined for notes, it will be moved from *UE Resources* to *E Resources*. This is to indicate that (in my own estimation), there is nothing more to be gained from the resource that is not already in the note.\n\n### Resources\nThis heading is for inexhaustible resources. \n- A prime example would be a quality website that continually posts articles.  - Another example would be a tool, such as software that measures frequencies in a room to help acoustically treat it.\n"},"collectionChildren":null,"customHeadContent":null,"config":{"version":5,"dev":{"enablePreviewV2":true},"commands":{"lookup":{"note":{"selectionMode":"extract","confirmVaultOnCreate":false,"leaveTrace":false,"bubbleUpCreateNew":true,"fuzzThreshold":0.2,"vaultSelectionModeOnCreate":"smart"}},"insertNote":{"initialValue":"templates"},"insertNoteLink":{"aliasMode":"none","enableMultiSelect":false},"insertNoteIndex":{"enableMarker":false},"randomNote":{},"copyNoteLink":{"aliasMode":"title"},"templateHierarchy":"template"},"workspace":{"dendronVersion":"0.83.0","vaults":[{"fsPath":"../main/tech","name":"tech"}],"journal":{"dailyDomain":"daily","name":"journal","dateFormat":"y.MM.dd","addBehavior":"childOfDomain"},"scratch":{"name":"scratch","dateFormat":"y.MM.dd.HHmmss","addBehavior":"asOwnDomain"},"graph":{"zoomSpeed":1,"createStub":false},"enableAutoCreateOnDefinition":false,"enableXVaultWikiLink":false,"enableRemoteVaultInit":true,"workspaceVaultSyncMode":"noCommit","enableAutoFoldFrontmatter":true,"maxPreviewsCached":10,"maxNoteLength":204800,"task":{"name":"","dateFormat":"","addBehavior":"childOfCurrent","statusSymbols":{"":" ","wip":"w","done":"x","assigned":"a","moved":"m","blocked":"b","delegated":"l","dropped":"d","pending":"y"},"prioritySymbols":{"H":"high","M":"medium","L":"low"},"todoIntegration":false,"createTaskSelectionType":"selection2link","taskCompleteStatus":["done","x"]},"enableUserTags":true,"enableHashTags":true,"enableEditorDecorations":true,"enableFullHierarchyNoteTitle":false},"preview":{"enableFMTitle":true,"enableNoteTitleForLink":true,"enableMermaid":true,"enablePrettyRefs":true,"enableKatex":true,"automaticallyShowPreview":false,"enableFrontmatterTags":true,"enableHashesForFMTags":false},"publishing":{"enableFMTitle":true,"enableNoteTitleForLink":true,"enablePrettyRefs":true,"enableKatex":true,"copyAssets":true,"siteHierarchies":["root"],"writeStubs":false,"siteRootDir":"docs","seo":{"title":"Dendron","description":"The Tech Digital Garden of Kyle Tycholiz"},"github":{"cname":"tech.kyletycholiz.com","enableEditLink":true,"editLinkText":"Edit this page on GitHub","editBranch":"master","editViewMode":"tree"},"enableSiteLastModified":true,"enableFrontmatterTags":true,"enableHashesForFMTags":false,"enableRandomlyColoredTags":true,"enableTaskNotes":true,"enablePrettyLinks":true,"searchMode":"lookup","enableMermaid":true,"siteUrl":"https://tech.kyletycholiz.com","duplicateNoteBehavior":{"action":"useVault","payload":["tech"]},"siteFaviconPath":"favicon.ico","siteIndex":"root"}}},"__N_SSG":true}