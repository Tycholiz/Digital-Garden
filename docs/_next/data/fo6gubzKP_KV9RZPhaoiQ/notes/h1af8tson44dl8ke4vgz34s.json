{"pageProps":{"note":{"id":"h1af8tson44dl8ke4vgz34s","title":"API","desc":"","updated":1654206441849,"created":1654186645513,"custom":{},"fname":"rxjs.op.api","type":"note","vault":{"fsPath":"../main/tech","name":"tech"},"contentHash":"f06c0c0d142ab84132cff9f92c1f9b7b","links":[{"type":"wiki","from":{"fname":"rxjs.op.api","id":"h1af8tson44dl8ke4vgz34s","vaultName":"tech"},"value":"rxjs.op","alias":"see: pipeable operators","position":{"start":{"line":15,"column":1,"offset":578},"end":{"line":15,"column":60,"offset":637},"indent":[]},"xvault":false,"sameFile":false,"to":{"fname":"rxjs.op","anchorHeader":"pipeable-operators,1:"}},{"from":{"fname":"rxjs.objects.observable","id":"PwvObIRuk7dy0GXweZT0c","vaultName":"tech"},"type":"backlink","position":{"start":{"line":57,"column":3,"offset":2705},"end":{"line":57,"column":52,"offset":2754},"indent":[]},"value":"rxjs.op.api"}],"anchors":{"map":{"type":"header","text":"map","value":"map","line":9,"column":0,"depth":3},"pipe":{"type":"header","text":"pipe","value":"pipe","line":13,"column":0,"depth":3},"from":{"type":"header","text":"from","value":"from","line":23,"column":0,"depth":3},"fromevent":{"type":"header","text":"fromEvent","value":"fromevent","line":28,"column":0,"depth":3},"of":{"type":"header","text":"of","value":"of","line":35,"column":0,"depth":3},"pluck":{"type":"header","text":"pluck","value":"pluck","line":53,"column":0,"depth":3},"tap":{"type":"header","text":"tap","value":"tap","line":56,"column":0,"depth":3},"combinelatest":{"type":"header","text":"combineLatest","value":"combinelatest","line":73,"column":0,"depth":3},"higher-order-observables":{"type":"header","text":"Higher-order observables","value":"higher-order-observables","line":77,"column":0,"depth":2},"concatall":{"type":"header","text":"concatAll","value":"concatall","line":84,"column":0,"depth":3},"mergemap-map--mergeall---the-slacker-operator":{"type":"header","text":"mergeMap (map + mergeAll) - the slacker operator","value":"mergemap-map--mergeall---the-slacker-operator","line":88,"column":0,"depth":3},"switchmap-map--switch---the-latest-and-greatest-operator":{"type":"header","text":"switchMap (map + switch) - the \"latest and greatest\" operator","value":"switchmap-map--switch---the-latest-and-greatest-operator","line":94,"column":0,"depth":3},"concatmap-map--concatall---the-wait-in-line-operator":{"type":"header","text":"concatMap (map + concatAll) - the \"wait in line\" operator","value":"concatmap-map--concatall---the-wait-in-line-operator","line":100,"column":0,"depth":3},"exhaustmap---the-do-not-disturb-operator":{"type":"header","text":"exhaustMap - the \"do not disturb\" operator","value":"exhaustmap---the-do-not-disturb-operator","line":106,"column":0,"depth":3},"ue-resources":{"type":"header","text":"UE Resources","value":"ue-resources","line":113,"column":0,"depth":2}},"children":[],"parent":"fc9b08ppx50dc55dj8wixsc","data":{}},"body":"<h1 id=\"api\">API<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#api\"></a></h1>\n<h3 id=\"map\"><code>map</code><a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#map\"></a></h3>\n<p>analogous to <code>Array.map</code> in that it applies a given <em>project function</em> on each value of a collection. </p>\n<ul>\n<li>while <code>Array.map</code> accepts an array and returns an array, <code>Observable.map</code> accepts an observable and returns an observable.</li>\n</ul>\n<h3 id=\"pipe\"><code>pipe</code><a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#pipe\"></a></h3>\n<p>Takes in observable(s) as input and returns another observable</p>\n<ul>\n<li><code>pipe</code> is immutable, so previous observables remain unmodified.</li>\n</ul>\n<p>By using <code>pipe</code> we decouple the streaming operations (map, filter, reduce...) from the core functionality (subscribing, piping).</p>\n<p>Even if there is only one observable, we should still use <code>pipe</code></p>\n<p><a href=\"/notes/fc9b08ppx50dc55dj8wixsc#pipeable-operators1\">see: pipeable operators</a></p>\n<h3 id=\"from\"><code>from</code><a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#from\"></a></h3>\n<p>Turn an array, promise, or iterable into an observable.</p>\n<p>Similar to <code>of()</code>, except <code>from()</code> emits the items that are inside the argument it receives, while <code>of()</code> emits the argument as a whole.</p>\n<h3 id=\"fromevent\"><code>fromEvent</code><a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#fromevent\"></a></h3>\n<p>Creates an observable that emits certain events (e.g. click events) coming from a given event target.</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> source <span class=\"token operator\">=</span> <span class=\"token function\">fromEvent</span><span class=\"token punctuation\">(</span>button<span class=\"token punctuation\">,</span> <span class=\"token string\">\"click\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> subscribe <span class=\"token operator\">=</span> source<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">subscribe</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">val</span> <span class=\"token arrow operator\">=></span> <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<h3 id=\"of\"><code>of</code><a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#of\"></a></h3>\n<p><code>of()</code> returns an Observable which immediately emits whatever values are supplied to <code>of()</code> as parameters, then completes.</p>\n<ul>\n<li>This is better than returning static values, as it allows you to write subscribers that can handle the Observable type (which works both synchronously and asynchronously), even before implementing your async process.</li>\n</ul>\n<p>Emit variable amount of values in a sequence and then emits a complete notification.</p>\n<p><code>of</code> is useful for maintaining the Observable data type before implementing an asynchronous interaction </p>\n<ul>\n<li>ex. an http request to an API</li>\n</ul>\n<p>Contrary to what the docs might suggest, <code>of()</code> is not deprecated. Calling <code>.of()</code> on an observable is deprecated, so we must change the way we use it:</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// before</span>\n<span class=\"token maybe-class-name\">Observable</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">of</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">x</span> <span class=\"token arrow operator\">=></span> <span class=\"token number\">2</span> <span class=\"token operator\">*</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// after</span>\n<span class=\"token keyword\">of</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">pipe</span><span class=\"token punctuation\">(</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">x</span> <span class=\"token arrow operator\">=></span> <span class=\"token number\">2</span> <span class=\"token operator\">*</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<h3 id=\"pluck\"><code>pluck</code><a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#pluck\"></a></h3>\n<p><code>pluck</code> is used when we just need to pass single field value to the subscription instead of sending entire JSON object.</p>\n<h3 id=\"tap\"><code>tap</code><a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#tap\"></a></h3>\n<p><code>tap</code> is a place to perform side-effects. </p>\n<ul>\n<li>Typically we use it with <code>map</code> or <code>mergeMap</code>, so the question becomes \"why don't we just perform our side-effects in those methods?\"\n<ul>\n<li>Performing side-effects here makes those <code>map</code> methods impure, limiting ourselves. For instance, it would prevent us from being able to memoize.</li>\n</ul>\n</li>\n</ul>\n<p><code>tap</code> returns an observable that is identical to the source with the only difference being that if there was an error, it will be emitted from the returned observable.</p>\n<p>Conveniently, we can also use <code>tap</code> for debugging</p>\n<ul>\n<li>can place a <code>tap(console.log)</code> anywhere in your observable pipe, log out the notifications as they are emitted by the source returned by the previous operation.</li>\n</ul>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">of</span><span class=\"token punctuation\">(</span><span class=\"token known-class-name class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">pipe</span><span class=\"token punctuation\">(</span>\n  <span class=\"token function\">tap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">value</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">n</span> <span class=\"token arrow operator\">=></span> n <span class=\"token operator\">></span> <span class=\"token number\">0.5</span> <span class=\"token operator\">?</span> <span class=\"token string\">'big'</span> <span class=\"token operator\">:</span> <span class=\"token string\">'small'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">subscribe</span><span class=\"token punctuation\">(</span><span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">log</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<h3 id=\"combinelatest\"><code>combineLatest</code><a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#combinelatest\"></a></h3>\n<p>This operator combines multiple Observables to create an Observable whose values are calculated from the latest values of each of its input Observables.</p>\n<ul>\n<li>Whenever any input Observable emits a value, it computes a formula using the latest values from all the inputs, then emits the output of that formula</li>\n</ul>\n<h2 id=\"higher-order-observables\">Higher-order observables<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#higher-order-observables\"></a></h2>\n<ul>\n<li><strong><em>flatten</em></strong> - subscribing inside a subscribe</li>\n<li>All work mostly in same manner\n<ul>\n<li>They map some value to an observable (you are the one in charge of returning an observable value from them, they just map it)</li>\n<li>They flatten the observable you return ( they just subscribe to it)</li>\n<li>They decide about what to do before / after they flatten (“Flattening Strategy”)</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"concatall\"><code>concatAll</code><a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#concatall\"></a></h3>\n<p>subscribes to each \"inner\" Observable that comes out of the \"outer\" Observable, and copies all the emitted values until that Observable completes, and goes on to the next one. </p>\n<ul>\n<li>All of the values are in that way concatenated</li>\n</ul>\n<h3 id=\"mergemap-map--mergeall---the-slacker-operator\"><code>mergeMap</code> (<code>map</code> + <code>mergeAll</code>) - the slacker operator<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#mergemap-map--mergeall---the-slacker-operator\"></a></h3>\n<ul>\n<li>simply keep subscribing to every new observable that we return from the map</li>\n<li>Other than mapping + flattening the observable, it does nothing else.</li>\n<li>ex. Imagine Netflix shows up-to-date ratings for each movie, retrieved from IMDB's API. We can <code>mergeMap</code> the movie into an http request to IMDB to get this data and enhance our UI.</li>\n<li>Maps each value to an Observable, then flattens all of these inner Observables using <code>mergeAll</code>.</li>\n</ul>\n<h3 id=\"switchmap-map--switch---the-latest-and-greatest-operator\"><code>switchMap</code> (<code>map</code> + <code>switch</code>) - the \"latest and greatest\" operator<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#switchmap-map--switch---the-latest-and-greatest-operator\"></a></h3>\n<ul>\n<li>unsubscribe from the last mapped observable</li>\n<li>ex. Imagine we are typing in Google and the autocomplete box shows up. Of course, these suggestions change with each key press. If we use <code>switchMap</code>, each previous request will be cancelled if a new one happens. If we'd used <code>mergeMap</code>, a request for each keystroke would be made</li>\n<li><code>switchMap</code> projects each source value to an Observable which is merged in the output Observable, emitting values only from the most recently projected Observable</li>\n<li>ie. it maps each value to an Observable, then flattens all of these Observables in the only output Observable.</li>\n</ul>\n<h3 id=\"concatmap-map--concatall---the-wait-in-line-operator\"><code>concatMap</code> (<code>map</code> + <code>concatAll</code>) - the \"wait in line\" operator<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#concatmap-map--concatall---the-wait-in-line-operator\"></a></h3>\n<ul>\n<li>queue up the observables one after the other, and play their events in that order (i.e. subscribe to the next Observable in the queue only when the previous one is completed).</li>\n<li>Similar to <code>mergeMap</code>, except order matters\n<ul>\n<li><code>concatMap</code> is <code>mergeMap</code> with a concurrency of 1.</li>\n</ul>\n</li>\n<li>ex. top 10 list</li>\n</ul>\n<h3 id=\"exhaustmap---the-do-not-disturb-operator\"><code>exhaustMap</code> - the \"do not disturb\" operator<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#exhaustmap---the-do-not-disturb-operator\"></a></h3>\n<ul>\n<li>\n<p>waits for the current inner observable to complete (exhaust) so that the next item would be turned into an inner observable (items emmitted while inner observable is running are ignored). ExhaustMap is very similar to concatMap, but drops some values:</p>\n</li>\n<li>\n<p><code>concatMap</code> - will take everything, inner observable n has to finish before n+1 will start</p>\n</li>\n<li>\n<p><code>exhaustMap</code> - will ignore all items which <em>would</em> produce new inner observables, if there is an inner observable running</p>\n</li>\n<li>\n<p>ex. login button - since we don't want multiple clicks to be registered, we want want to disable mapping while the first http request is on the go, ensuring that we never call the server while the current request is running.</p>\n</li>\n</ul>\n<h2 id=\"ue-resources\">UE Resources<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#ue-resources\"></a></h2>\n<p><a href=\"https://betterprogramming.pub/how-to-create-observables-in-rxjs-aa3bf79b05e0\">https://betterprogramming.pub/how-to-create-observables-in-rxjs-aa3bf79b05e0</a></p>\n<hr>\n<strong>Backlinks</strong>\n<ul>\n<li><a href=\"/notes/PwvObIRuk7dy0GXweZT0c\">Observable</a></li>\n</ul>","noteIndex":{"id":"olZIVfSs2uLLr3BppFh4K","title":"Digital Garden","desc":"","updated":1674517603573,"created":1615482407722,"custom":{"nav_order":0,"permalink":"/"},"fname":"root","type":"note","vault":{"fsPath":"../main/tech","name":"tech"},"contentHash":"effb007003ca6a91d7fd0c293e1d2436","links":[{"type":"wiki","from":{"fname":"root","id":"olZIVfSs2uLLr3BppFh4K","vaultName":"tech"},"value":"testing.method.unit","alias":"unit testing","position":{"start":{"line":18,"column":121,"offset":1146},"end":{"line":18,"column":157,"offset":1182},"indent":[]},"xvault":false,"sameFile":false,"to":{"fname":"testing.method.unit"}},{"type":"wiki","from":{"fname":"root","id":"olZIVfSs2uLLr3BppFh4K","vaultName":"tech"},"value":"general.arch.microservice","alias":"microservices","position":{"start":{"line":18,"column":188,"offset":1213},"end":{"line":18,"column":231,"offset":1256},"indent":[]},"xvault":false,"sameFile":false,"to":{"fname":"general.arch.microservice"}},{"type":"wiki","from":{"fname":"root","id":"olZIVfSs2uLLr3BppFh4K","vaultName":"tech"},"value":"paradigm.oop","alias":"OOP","position":{"start":{"line":36,"column":227,"offset":2718},"end":{"line":36,"column":247,"offset":2738},"indent":[]},"xvault":false,"sameFile":false,"to":{"fname":"paradigm.oop"}}],"anchors":{"tags":{"type":"header","text":"Tags","value":"tags","line":46,"column":0,"depth":3},"resources":{"type":"header","text":"Resources","value":"resources","line":55,"column":0,"depth":2},"ue-unexamined-resources":{"type":"header","text":"UE (Unexamined) Resources","value":"ue-unexamined-resources","line":56,"column":0,"depth":3},"e-examined-resources":{"type":"header","text":"E (Examined) Resources","value":"e-examined-resources","line":59,"column":0,"depth":3},"resources-1":{"type":"header","text":"Resources","value":"resources-1","line":62,"column":0,"depth":3}},"children":["40ubf88tephzbdjte8cdsa0","zFMjbn3xihVNHjUIdZCD1","IK6NOKemuDjhfstJBovKL","ZaTr28eWk1DrXOEsc1YVb","Vi0WYVLZunVM9iR8XZJn3","ngAbg7gluvbt1bY1UIRsi","RCPPXSakm5TvKka8kOmVp","LIcuGYV0DDt1VWbvH6Sed","MPx8ykTP57I40WTZvTP7f","ZU5WmdTG1bHoE8RcmZXZG","jqWiyYJff92RjXuUQt9PQ","KihijM8OQvZ4pASkkhqzL","F9vyqvls3OBCujtukqKhy","k6jxm2b3edgkhbordpuz6v1","facc2b01-755a-409f-99f6-57bef2d1501f","bZumdyapJ2H0wWWOmJ45i","elqpgoe2r951si4xrhujppj","m5ov42Vm6mR7RQWTvl1NW","cw8cerc0cos8lh871oz8rtf","PZxxZ4iESzSlbbHJKxuAZ","UDu62Pa6BaRqlG8uGoMhy","u3zcndycwqessho5h6x0nz9","ZgCUp366YrF2Tyky2NT73","DVpVUmavSoVDA7UIlPzLX","nMCtMXVvjBsJk3iw1zoIO","ANfx9Z4a6ZA0uJuSHtbIJ","BkG557LKUYbH1DnxprEVT","1TaH8zDTM98FZ9SYaeXLM","02v7ymc144e5c4pv3edkud7","dc79799f-a55d-48ab-a8be-c48adb1b19c0","f6feef57-b8f5-451f-a09a-7b63f6a07183","4sz47Y0LKs1Si73rWtyyh","g7ulqi8no93ezeocbesc3ll","5a9fb1df-478e-4687-9be0-5cb97e61ec57","1374e9e9-1cbc-4e1f-b1ca-66b8569533dd","D8Z3rjXkSj2EOymXQXF4Z","np3c1ykvnjqv5xoombpfwqz","f529cc34-aba0-45ca-ad7e-02ddda318941","0zcauha3il2NqtxZazIo7","9bbd6f68-03b2-41f4-92e4-2ca313e8b450","5a2ab598-fa7e-4471-8bda-9f5831b679ae","uV6w4mZPoohWyZV4Xaad0","QHXEIyeZGIGMVi5Q52UWI","RgE0mZLaUjPftFPZsiAoe","mytCOts26Pidush65tdRW","fwUzxfLSPMH1eL8oBoLWx","wazdsda6h25x66edvfmeuiv","TbW7PM9bg1y5TGkiWwQ8b","xiSIDeEtIc8X0lpUQlppI","0jxgntiLNHWFuCbzqtFGF","GkdMprLUe4QQULBxmGN6V","4SYc6v5hxY5g6Ip6kjpwO","czi7ilt2i1uoqm1f2otbntj","fqVQpS9FBiXgKsZX3R3sJ","L5JUZlGAGvTxrsEBB7DY8","ttyri4pwfyn5lcx0vp9804o","TeTedoeS2LdHPR632eCpM","ulicRRwo3lSFzh3tMfWH9","p7d24vyb8m00ombzn34t50c","e65188a1-177e-4ab2-99f9-75f85d537621","fajYnbVhCRDi74xn0H30R","bArGdGwqo3iFkyKMyE7qR","4Dcp7gbEVoLLgfu7bXFai","5d700782-fb81-416e-83f9-5dd88260e350","zubgzhNFE6KlTgXcjTz6O","8lpdfWa0cbSq1XJQbcYcY","2psluywdc416t7vrql0m058","17I8ZksXvqCH1mRtZDjHp","kF916Ow84qpJJeMRkWMIo","tMLkLcrIHHBz56xVmBLkP","CSePBQ6q7qhowKESqVwt7","laZ4OfLhZNK1Kuy6GaWUr","z5IJblOknQhMzZ5QZh4ye","N36FHxfxzwJfxDY3miWyX","3bb25f58-2b50-4fa3-af55-48ea9f88a081","7x07qjgbitozdfszqzuy7ix","u93Rz4fEWGu6VBR30Zraf","9hjMHnKvYT4jLKvuDSXaV","qC5GxCZBmNb4Ip6c0kU8x","LgW7mTIALODoXc54B3p6S","UYPxfHBFWX7fb6hHU5bB6","74lYtC8NKpCzcyFOZTfR1","sEoBNAEuaTxwSmTXDonZt","dj0jr9mpvs62e2pkg3zc3yy","z8ie0xjogb6ht7gzowav5xr","qxSOd6SPN8qf9ZUojVFDX","WQoMTf6VXBaxCgksXAVsj","2Mw4XgfyCHXHNOX5yoCIY","qcdt2f7jo51muquo5r95dpo","0XJqmcdtcMZu66glBI5O8","lK8r8BXS4ThiUTe4xKIZe","93de42ca-53ea-460a-baa7-b9ec5c47cb1e","Rxs2jaGpdFzqYtP7lAJFJ","aO8W81Z0PyIb6Hs7nOHPW","lhzisalkebu4w5n01np07i0","7b5l4b6fi65n7sv9org5q1l","I01hENHnh8Tqu3Ok8sLzG","03o3n0hz9v9jtb7j889zpd4","evqsPNutOaZ8hcBCqxFQu","zhhxcjZUHdU8uRLwGb9Zh","G1aFACZB2ooWGMGwyd3ZW","YWy1C4tgoaCcw1m8JJsr7","Szj3o5iaNxPpesiCqwrbu","613syb18hb3v0u1ydvor7ru","XhvCDW3fIw6h6MhY5ticq","Q70g7SusFZBQXzkuQifv4","AzfWDH3wp7jFpL2EYxBcW","y0fwpZ9qMqirsLiFyOciU","ZF8xj8wwDUqKlrwTrCFZ1","tAJvhqhdfyZZa87QHq1TU","4hRmipi8lxpBLyzWu5JVB","iTg0C7QjvnmqBZeEigJNs","3babc3d2-79ae-470a-9c06-ab8bba2e684e","bF3UsMFya3fMeXWDspVov","ULkfbL9WpktbVYnzhl6Jw","PpNOO8JYWe6dM8wruSa7x","di40pCxDn7IiqE8lFdD46","rmW0mkerqV35I8QPji6lM","3IFIK1ByzeIxZCByryGLN","iImkYAKfkw3beAl6pLbDn","ecDe8DNWrkeQTwpTEvHje","i2it5id8qwtg27n4usg8bo1","Yqhdd9mSJGN7OJOeyoSD2","Ws5tah8tpeyn9tK8VBTg8","gWAg15uBJgkS2B0wcpMAa","l7V3v2ep1YdDCt7DOr7Ci","yM2PJBdqJnHpD63cPA6sW","qn0bre7eLbi3QMbCfWkUi","fSu0KxFL41IRouotqmbHs","0gtg24Mj1a1bQFPRGQNlO","7iQPBMltLPLbFEz2qbjPu","yoh4pwoXcfELInGKRdYf6","dCGCWXgAmiOZXbdULT1m6","jMavlje07sNa6hSEIE8WA","Xxm0JE4dKHxrQAaZfzvxD","nRb6Im4Kcmc2ZWE7K1jZ1","PAEBZCyFBZJyR7OoMZ41E","PQ6km8RgRCuyICBPOYz8f","x5tm1nfjzyawwzedy3yitgd","2bhftt8rGuxYu4pFgNqru","hjYIZpHQWuXfeEoGeJEKW","K2M9bQqVq2eQfm29eslKL","X8obW1iKwYsvNgKWGyCzy","yJwSC7hqYIezTFHf5i0Ev","c4Z7ETcOHUILRMH32Sfjw","qiR6dIu857b9M9kTqjOyK","fc2coz74cnfy5czzofx4h5x","Ku1OgHMhELajzo61Gx7ye","LUrfhDWo8wuwZu7CN9TV8","osu6JGOnvXJ5gt3tpqWZY","1a6173cd-cf13-4b34-a522-8350bf9a364f","S2sBltrPfd8a7ICuD7CuH","GLQ2pmkJUNUa93THBDVsD","md6xitz4exia2joa06i490b","oWCuBXOg6JWfZzjmKxmNl","jOmhZ8ovLYTPbpM1vqSDx","p9bov84s0isgkl1ysaw93kk","FraC6xzLy1ei91l1ICyc9","6ceBas2RE9Q4787GDngH7","734cd78d-0bc9-426b-803d-1efc84dfffe5","k4Bb09px6r0FxIRs49SXV","oaG3H1S9IUBO644nGZigu","Ka7agQJkUMRSWN0uFdkWK","si3z090WsiLasMhJBa1Az","hs6rwzt4mogiicoc4gcykbi","ljKAVERmdEiKLK9hXGKBm","zxt3lhonfdhglvijd17ua8c","dd7dopve1dudqkoibkqvti4","923tgifqf59ovv5yldtyi0a","vrjwp01goqw47fqctm4f4lo","c99gdmmppju3r1tth8cb2jx","z2pvn5qxdz84zgygqzxage8"],"parent":null,"data":{},"body":"This Dendron vault of tech knowledge is organized according to domains and their sub-domains, along with specific implementation of those domains.\n\nFor instance, Git itself is a domain. Sub-domains of Git would include things like `commit`,\n`tags`, `reflog` etc. implementations of each of those could be `cli`, `strat`\n(strategies), `inner`, and so on.\n\nThe goal of the wiki is to present data in a manner that is from the perspective\nof a querying user. Here, a user is a programmer wanting to get key information\nfrom a specific domain. For instance, if a user wants to use postgres functions\nand hasn't done them in a while, they should be able to query\n`postgres.functions` to see what information is available to them.\n\nThis wiki has been written with myself in mind. While learning each of these\ndomains, I have been sensitive to the \"aha\" moments and have noted down my\ninsights as they arose. I have refrained from capturing information that I\nconsidered obvious or otherwise non-beneficial to my own understanding.\n\nAs a result, I have allowed myself to use potentially arcane concepts to explain other ones. For example, in my note on [[unit testing|testing.method.unit]], I have made reference to the [[microservices|general.arch.microservice]] note. If these notes were made with the public in mind, this would be a very bad strategy, given that you'd have to understand microservices to be able to draw that same parallel that I've already drawn. Since these notes are written for myself, I have been fine with taking these liberties.\n\nWhat I hope to gain from this wiki is the ability to step away from any\ngiven domain for a long period of time, and be able to be passably useful for\nwhatever my goals are within a short period of time. Of course this is all\nvague sounding, and really depends on the domain along with the ends I am\ntrying to reach.\n\nTo achieve this, the system should be steadfast to:\n- be able to put information in relatively easily, without too much thought\n\trequired to its location. While location is important, Dendron makes it easy\n\tto relocate notes, if it becomes apparent that a different place makes more\n\tsense.\n- be able to extract the information that is needed, meaning there is a\n\thigh-degree in confidence in the location of the information. The idea is\n\tthat information loses a large amount of its value when it is unfindable.\n\tTherefore, a relatively strict ideology should be used when determining\n\twhere a piece of information belongs.\n\t- Some concepts might realistically belong to multiple domains. For instance, the concept of *access modifiers* can be found in both `C#` and `Typescript`. Therefore, this note should be abstracted to a common place, such as [[OOP|paradigm.oop]].\n\nThis Dendron vault is the sister component to the [General Second Brain](https://tech.kyletycholiz.com).\n\n### Tags\nThroughout the garden, I have made use of tags, which give semantic meaning to the pieces of information.\n\n- `ex.` - Denotes an *example* of the preceding piece of information\n- `spec:` - Specifies that the preceding information has some degree of *speculation* to it, and may not be 100% factual. Ideally this gets clarified over time as my understanding develops.\n- `anal:` - Denotes an *analogy* of the preceding information. Often I will attempt to link concepts to others that I have previously learned.\n- `mn:` - Denotes a *mnemonic*\n- `expl:` - Denotes an *explanation*\n\n## Resources\n### UE (Unexamined) Resources\nOften, I come across sources of information that I believe to be high-quality. They may be recommendations or found in some other way. No matter their origin, I may be in a position where I don't have the time to fully examine them (and properly extract notes), or I may not require the information at that moment in time. In cases like these, I will add reference to a section of the note called **UE Resources**. The idea is that in the future when I am ready to examine them, I have a list of resources that I can start with. This is an alternative strategy to compiling browser bookmarks, which I've found can quickly become untenable.\n\n### E (Examined) Resources\nOnce a resource has been thoroughly examined and has been mined for notes, it will be moved from *UE Resources* to *E Resources*. This is to indicate that (in my own estimation), there is nothing more to be gained from the resource that is not already in the note.\n\n### Resources\nThis heading is for inexhaustible resources. \n- A prime example would be a quality website that continually posts articles.  - Another example would be a tool, such as software that measures frequencies in a room to help acoustically treat it.\n"},"collectionChildren":null,"customHeadContent":null,"config":{"version":5,"dev":{"enablePreviewV2":true},"commands":{"lookup":{"note":{"selectionMode":"extract","confirmVaultOnCreate":false,"leaveTrace":false,"bubbleUpCreateNew":true,"fuzzThreshold":0.2,"vaultSelectionModeOnCreate":"smart"}},"insertNote":{"initialValue":"templates"},"insertNoteLink":{"aliasMode":"none","enableMultiSelect":false},"insertNoteIndex":{"enableMarker":false},"randomNote":{},"copyNoteLink":{"aliasMode":"title"},"templateHierarchy":"template"},"workspace":{"dendronVersion":"0.83.0","vaults":[{"fsPath":"../main/tech","name":"tech"}],"journal":{"dailyDomain":"daily","name":"journal","dateFormat":"y.MM.dd","addBehavior":"childOfDomain"},"scratch":{"name":"scratch","dateFormat":"y.MM.dd.HHmmss","addBehavior":"asOwnDomain"},"graph":{"zoomSpeed":1,"createStub":false},"enableAutoCreateOnDefinition":false,"enableXVaultWikiLink":false,"enableRemoteVaultInit":true,"workspaceVaultSyncMode":"noCommit","enableAutoFoldFrontmatter":true,"maxPreviewsCached":10,"maxNoteLength":204800,"task":{"name":"","dateFormat":"","addBehavior":"childOfCurrent","statusSymbols":{"":" ","wip":"w","done":"x","assigned":"a","moved":"m","blocked":"b","delegated":"l","dropped":"d","pending":"y"},"prioritySymbols":{"H":"high","M":"medium","L":"low"},"todoIntegration":false,"createTaskSelectionType":"selection2link","taskCompleteStatus":["done","x"]},"enableUserTags":true,"enableHashTags":true,"enableEditorDecorations":true,"enableFullHierarchyNoteTitle":false},"preview":{"enableFMTitle":true,"enableNoteTitleForLink":true,"enableMermaid":true,"enablePrettyRefs":true,"enableKatex":true,"automaticallyShowPreview":false,"enableFrontmatterTags":true,"enableHashesForFMTags":false},"publishing":{"enableFMTitle":true,"enableNoteTitleForLink":true,"enablePrettyRefs":true,"enableKatex":true,"copyAssets":true,"siteHierarchies":["root"],"writeStubs":false,"siteRootDir":"docs","seo":{"title":"Dendron","description":"The Tech Digital Garden of Kyle Tycholiz"},"github":{"cname":"tech.kyletycholiz.com","enableEditLink":true,"editLinkText":"Edit this page on GitHub","editBranch":"master","editViewMode":"tree"},"enableSiteLastModified":true,"enableFrontmatterTags":true,"enableHashesForFMTags":false,"enableRandomlyColoredTags":true,"enableTaskNotes":true,"enablePrettyLinks":true,"searchMode":"lookup","enableMermaid":true,"siteUrl":"https://tech.kyletycholiz.com","duplicateNoteBehavior":{"action":"useVault","payload":["tech"]},"siteFaviconPath":"favicon.ico","siteIndex":"root"}}},"__N_SSG":true}