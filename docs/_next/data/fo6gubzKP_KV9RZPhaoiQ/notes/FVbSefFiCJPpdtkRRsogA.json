{"pageProps":{"note":{"id":"FVbSefFiCJPpdtkRRsogA","title":"Promises","desc":"","updated":1640132321350,"created":1615066645806,"custom":{},"fname":"js.lang.promises","type":"note","vault":{"fsPath":"../main/tech","name":"tech"},"contentHash":"09a19c1e173342a75a57a3f84bb17078","links":[{"type":"wiki","from":{"fname":"js.lang.promises","id":"FVbSefFiCJPpdtkRRsogA","vaultName":"tech"},"value":"general.terms.eager-lazy","alias":"eager","position":{"start":{"line":26,"column":14,"offset":1512},"end":{"line":26,"column":48,"offset":1546},"indent":[]},"xvault":false,"sameFile":false,"to":{"fname":"general.terms.eager-lazy"}},{"from":{"fname":"flink","id":"ulicRRwo3lSFzh3tMfWH9","vaultName":"tech"},"type":"backlink","position":{"start":{"line":74,"column":100,"offset":5014},"end":{"line":74,"column":128,"offset":5042},"indent":[]},"value":"js.lang.promises"},{"from":{"fname":"rxjs","id":"yoh4pwoXcfELInGKRdYf6","vaultName":"tech"},"type":"backlink","position":{"start":{"line":14,"column":5,"offset":1165},"end":{"line":14,"column":33,"offset":1193},"indent":[]},"value":"js.lang.promises"},{"from":{"fname":"nestjs.controllers","id":"nqv4bkm2rp1nljndftgqxdx","vaultName":"tech"},"type":"backlink","position":{"start":{"line":16,"column":36,"offset":960},"end":{"line":16,"column":64,"offset":988},"indent":[]},"value":"js.lang.promises"},{"from":{"fname":"aws.svc.lambda.fn","id":"Ag4RGxbqigmzcZAUS9FRv","vaultName":"tech"},"type":"backlink","position":{"start":{"line":19,"column":48,"offset":836},"end":{"line":19,"column":76,"offset":864},"indent":[]},"value":"js.lang.promises"},{"from":{"fname":"general.patterns.behavioural.observable","id":"i0cxm46r54o0242vn13g38n","vaultName":"tech"},"type":"backlink","position":{"start":{"line":42,"column":9,"offset":3070},"end":{"line":42,"column":38,"offset":3099},"indent":[]},"value":"js.lang.promises"},{"from":{"fname":"js.lang.feat.async-iterator","id":"WPpFrk4iwauCzKf88i6f0","vaultName":"tech"},"type":"backlink","position":{"start":{"line":6,"column":110,"offset":377},"end":{"line":6,"column":139,"offset":406},"indent":[]},"value":"js.lang.promises"},{"from":{"fname":"js.lang.promises.async-await","id":"o5M4VcoPps3ZR60CLRkj7","vaultName":"tech"},"type":"backlink","position":{"start":{"line":7,"column":230,"offset":699},"end":{"line":7,"column":259,"offset":728},"indent":[]},"value":"js.lang.promises"}],"anchors":{"components-of-a-promise":{"type":"header","text":"Components of a Promise","value":"components-of-a-promise","line":39,"column":0,"depth":2},"executor":{"type":"header","text":"Executor","value":"executor","line":60,"column":0,"depth":3},"consumer":{"type":"header","text":"Consumer","value":"consumer","line":69,"column":0,"depth":3},"then":{"type":"header","text":".then()","value":"then","line":83,"column":0,"depth":4},"handler-functions-onfulfilledonrejected":{"type":"header","text":"Handler functions (onFulfilled/onRejected)","value":"handler-functions-onfulfilledonrejected","line":126,"column":0,"depth":5},"rejecting-promises":{"type":"header","text":"Rejecting Promises","value":"rejecting-promises","line":145,"column":0,"depth":4},"promises-vs-callbacks-to-achieve-asynchrony":{"type":"header","text":"Promises vs Callbacks to achieve asynchrony","value":"promises-vs-callbacks-to-achieve-asynchrony","line":166,"column":0,"depth":3},"wrapping-callbacks-in-promises":{"type":"header","text":"Wrapping Callbacks in Promises","value":"wrapping-callbacks-in-promises","line":177,"column":0,"depth":2},"promises-are-only-ever-resolved-once-per-creation":{"type":"header","text":"Promises are only ever resolved once per creation","value":"promises-are-only-ever-resolved-once-per-creation","line":190,"column":0,"depth":2},"sleep-example":{"type":"header","text":"Sleep example","value":"sleep-example","line":214,"column":0,"depth":2}},"children":["o5M4VcoPps3ZR60CLRkj7","P5nUdE8NTjpnjV6eLfJIg"],"parent":"WjxypcKZh8Ok6KxP87DoH","data":{}},"body":"<h1 id=\"promises\">Promises<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#promises\"></a></h1>\n<p>A promise is an object which can be returned synchronously from an asynchronous function. </p>\n<ul>\n<li>This synchronous-part is reflected in the fact that a promise returns immediately, albeit in Pending state.</li>\n</ul>\n<p>A promise can be in one of 3 possible states:</p>\n<ul>\n<li><em>Fulfilled</em>: onFulfilled() will be c</li>\n<li><em>Rejected</em>: onRejected() will be called (e.g., reject() was called)</li>\n<li><em>Pending</em>: not yet fulfilled or rejected</li>\n</ul>\n<p>If it's either fulfilled or rejected, it's said to be <em>settled</em>. Otherwise, it's <em>pending</em>.</p>\n<ul>\n<li>Once settled, a promise can <em>not</em> be resettled. Calling resolve() or reject() again will have no effect. \n<ul>\n<li>The immutability of a settled promise is an important feature.</li>\n</ul>\n</li>\n</ul>\n<p>A promise accepts a callback function as a parameter. The callback function accepts 2 parameters, <code>resolve</code> and <code>reject</code>. </p>\n<ul>\n<li>If the task is successfully performed, then it returns resolve. </li>\n<li>Else it returns the reject.</li>\n</ul>\n<p>Every promise must supply a <code>.then()</code> method with the following signature:</p>\n<pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token function-variable function\">then</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>onFulfilled<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token known-class-name class-name\">Function</span><span class=\"token punctuation\">,</span> onRejected<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token known-class-name class-name\">Function</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token known-class-name class-name\">Promise</span>\n</code></pre>\n<p>Promises make some guarantees about their use:</p>\n<ul>\n<li>Callbacks added with <code>then()</code> will never be invoked before the completion of the current run of the event loop. These callbacks will be invoked even if they were added after the success or failure of the asynchronous operation (e.g. fetch for data) that the promise represents.  Multiple callbacks may be added by calling <code>then()</code> several times. They will be invoked one after another in a synchronous way.</li>\n</ul>\n<p>Promises are <a href=\"/notes/7YLxjeF1S1t2VVfkImBit\">eager</a>, meaning that a promise will start doing whatever task you give it as soon as the promise constructor is invoked. </p>\n<ul>\n<li>If you need lazy, check out observables or tasks.</li>\n</ul>\n<p>using promises effectively abstracts time out of the picture.</p>\n<ul>\n<li>abstracting away time allows us to better handle race conditions</li>\n</ul>\n<h2 id=\"components-of-a-promise\">Components of a Promise<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#components-of-a-promise\"></a></h2>\n<p>There are 2 sides to promises: the <code>executor</code> (the one doing the actions) and the <code>consumer</code> (the one waiting for the actions to be done so it can consume the result.\nExecutor ex. <code>(resolve, reject) =></code>\nConsumer ex. <code>.then, .catch, .finally</code></p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// Executor</span>\n<span class=\"token keyword\">var</span> p1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span> reject</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Success!'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// or</span>\n  <span class=\"token comment\">// reject(new Error(\"Error!\"));</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Consumer</span>\np1<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">value</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Success!</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token parameter\">reason</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">error</span><span class=\"token punctuation\">(</span>reason<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Error!</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<h3 id=\"executor\">Executor<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#executor\"></a></h3>\n<p>Executor is usually defined as part of a library, so it's often the case that this code is already written.</p>\n<p>A executor sends the data with <code>resolve(data)</code></p>\n<p>Executor gets run as soon as it's defined. Therefore, its state will either be resolved or rejected</p>\n<p><code>Promise.resolve()</code> and <code>Promise.reject()</code> are shortcuts to manually create an already resolved or rejected promise respectively. This can be useful at times.</p>\n<h3 id=\"consumer\">Consumer<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#consumer\"></a></h3>\n<p>Think of <code>.then</code>, <code>.catch</code> and <code>.finally</code> as the way that consumers subscribe to the executor\nA consumer receives the data (<code>stuff</code>) sent via the executor (ie. <code>resolve(stuff)</code>) with <code>.then(stuff)</code></p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">doSomething</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token method function property-access\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">result</span> <span class=\"token arrow operator\">=></span> <span class=\"token function\">doSomethingElse</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token method function property-access\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">newResult</span> <span class=\"token arrow operator\">=></span> <span class=\"token function\">doThirdThing</span><span class=\"token punctuation\">(</span>newResult<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token method function property-access\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">finalResult</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Got the final result: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>finalResult<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token keyword control-flow\">catch</span><span class=\"token punctuation\">(</span>onRejected<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<h4 id=\"then\"><code>.then()</code><a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#then\"></a></h4>\n<p><code>.then</code> lets us chain (ie. compose) 2+ asynchronous operations.</p>\n<p>Signature:</p>\n<ul>\n<li>note: most often the onRejected is omitted, with responsibility delegated to a final <code>.catch</code></li>\n</ul>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">then</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">onFulfilled<span class=\"token punctuation\">,</span> onRejected</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token known-class-name class-name\">Promise</span>\n</code></pre>\n<p>To avoid surprises, functions passed to <code>then()</code> will never be called synchronously, even with an already-resolved promise:</p>\n<ul>\n<li>Instead of running immediately, the passed-in function is put on a microtask queue, which means it runs later (only after the function which created it exits, and when the JavaScript execution stack is empty), just before control is returned to the event loop</li>\n</ul>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token known-class-name class-name\">Promise</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 1, 2</span>\n</code></pre>\n<p><code>.then()</code> is a method available on a Promise. It doesn't even matter if the Promise is <code>pending</code>, <code>fulfilled</code>, or <code>rejected</code>.</p>\n<ul>\n<li>if we call <code>.then</code> on an already resolved/rejected promise, the <code>.then</code> block will be triggered instantly; however, the handler functions will be triggered asynchronously. To illustrate:</li>\n</ul>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> resolvedProm <span class=\"token operator\">=</span> <span class=\"token known-class-name class-name\">Promise</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token number\">33</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">let</span> thenProm <span class=\"token operator\">=</span> resolvedProm<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">value</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"this gets called after the end of the main stack. the value received and returned is: \"</span> <span class=\"token operator\">+</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword control-flow\">return</span> value<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// instantly logging the value of thenProm</span>\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>thenProm<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// using setTimeout we can postpone the execution of a function to the moment the stack is empty</span>\n<span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>thenProm<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// logs, in order:</span>\n<span class=\"token comment\">// Promise {[[PromiseStatus]]: \"pending\", [[PromiseValue]]: undefined}</span>\n<span class=\"token comment\">// \"this gets called after the end of the main stack. the value received and returned is: 33\"</span>\n<span class=\"token comment\">// Promise {[[PromiseStatus]]: \"resolved\", [[PromiseValue]]: 33}</span>\n</code></pre>\n<p><code>.then</code> is analogous to adding another subscriber to the mailing list</p>\n<p>.then() may be called many times on the same promise. In other words, a promise can be used to aggregate callbacks.</p>\n<h5 id=\"handler-functions-onfulfilledonrejected\">Handler functions (<code>onFulfilled</code>/<code>onRejected</code>)<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#handler-functions-onfulfilledonrejected\"></a></h5>\n<p>if the promise is resolved (ie. when the underlying async operation is completed), <code>onFulfilled</code> is called asynchronously (to be scheduled in the current thread loop).</p>\n<p>Signature:</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">onFulfilled</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">fulfillmentValue</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> valueOfResolveFunction\n</code></pre>\n<p>Handler functions have some behaviours. If it...</p>\n<ul>\n<li>returns a value, the promise returned by then gets resolved with the returned value as its value.</li>\n<li>doesn't return anything, the promise returned by then gets resolved with an undefined value.</li>\n<li>throws an error, the promise returned by then gets rejected with the thrown error as its value.</li>\n<li>returns an already fulfilled promise, the promise returned by then gets fulfilled with that promise's value as its value.</li>\n<li>returns an already rejected promise, the promise returned by then gets rejected with that promise's value as its value.</li>\n<li>returns another pending promise object, the resolution/rejection of the promise returned by then will be subsequent to the resolution/rejection of the promise returned by the handler. Also, the resolved value of the promise returned by then will be the same as the resolved value of the promise returned by the handler.</li>\n</ul>\n<p>Think of async actions atomically, and make each step a <code>.then()</code> that returns the input for the next <code>.then()</code>\nEx. First .then() returns the JSON data as an obj, second returns a subset of that data, third acts on it</p>\n<h4 id=\"rejecting-promises\">Rejecting Promises<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#rejecting-promises\"></a></h4>\n<p><code>.catch(onRejected)</code> is short for <code>.then(null, onRejected)</code></p>\n<ul>\n<li>If there's an exception, the browser will look down the chain for <code>.catch()</code> handlers or <code>onRejected</code>.</li>\n</ul>\n<p>Whenever a promise is rejected, a <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Window/rejectionhandled_event\">rejectionhandled event</a> is sent to the global scope (probably <code>window</code>).</p>\n<p>Just like <code>.then</code>, <code>.catch</code> returns a promise, meaning we can chain another <code>.then</code> onto <code>.catch</code> if we want to </p>\n<ul>\n<li>this is effectively saying \"do this thing, even if some previous async operation failed\"</li>\n</ul>\n<p>spec:when we wrap a function in <code>Promise(..)</code>, we are promisifying it</p>\n<ul>\n<li>The new function that returns this promisified function now returns a Promise that resolves to its original return value</li>\n</ul>\n<p>(Inside promises) if a promise is returned (eg. return Promise.resolve('stuff')), the next .then() will execute only when that promise has resolved (with 'stuff').\nIf the return value is anything else besides a promise, then it will be passed immediately to the next .then()</p>\n<p>.resolve(value)\nIf the value passed to it is a promise itself, this will automatically \"follow\" that promise chain and wait to pass back the final resolved value.</p>\n<ul>\n<li>Good to use if you are unsure if a value is a promise or not</li>\n</ul>\n<p><code>Promise.all</code> is a server at a restaurant waiting to bring everyone's food at the same time, even though one meal may be ready before the others</p>\n<h3 id=\"promises-vs-callbacks-to-achieve-asynchrony\">Promises vs Callbacks to achieve asynchrony<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#promises-vs-callbacks-to-achieve-asynchrony\"></a></h3>\n<p>With the callback method of achieving asynchrony, the idea is to pass a callback into a function and call that function after some event has occurred. </p>\n<p>Promises work a bit differently. Essentially, we create this object called a Promise (which if we recall, returns immediately when invoked, albeit with <code>[Pending]</code> status). To this object, we attach 2 callback functions: <code>resolve</code> and <code>reject</code>.</p>\n<ul>\n<li>we call <code>resolve</code> if the async action succeeds</li>\n<li>we call <code>reject</code> if the async action fails\n<ul>\n<li>most commonly the <code>resolve</code> and <code>reject</code> callbacks are asynchronous functions that return a promise. Naturally, they get called upon completion/failure of the async operation (or in the case of a promise chain, they get called when the previous promise resolves.)</li>\n<li>both <code>resolve</code> and <code>reject</code> return void</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h2 id=\"wrapping-callbacks-in-promises\">Wrapping Callbacks in Promises<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#wrapping-callbacks-in-promises\"></a></h2>\n<p>In an ideal world, all asynchronous functions would already return promises. Unfortunately, some APIs still expect success and/or failure callbacks, like <code>setTimeout()</code>.</p>\n<p>Luckily we can wrap <code>setTimeout</code> in a promise. </p>\n<ul>\n<li>Best practice is to wrap problematic functions at the lowest possible level, and then never call them directly again:</li>\n</ul>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// Basically, the promise constructor takes an executor function that lets us resolve or reject a promise manually. </span>\n<span class=\"token comment\">// Since setTimeout() doesn't really fail, we left out reject in this case.</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">wait</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">ms</span> <span class=\"token arrow operator\">=></span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve</span> <span class=\"token arrow operator\">=></span> <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span>resolve<span class=\"token punctuation\">,</span> ms<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">wait</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token operator\">*</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token function\">saySomething</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"10 seconds\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token keyword control-flow\">catch</span><span class=\"token punctuation\">(</span>failureCallback<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<h2 id=\"promises-are-only-ever-resolved-once-per-creation\">Promises are only ever resolved once per creation<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#promises-are-only-ever-resolved-once-per-creation\"></a></h2>\n<p>In the following code it seems that we would connect to the database 2 times, but Promises don't work like that.</p>\n<ul>\n<li>since <code>databasePromise</code> is only defined one time, it can by definition only resolve one time.</li>\n</ul>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> databasePromise <span class=\"token operator\">=</span> <span class=\"token function\">connectDatabase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> booksPromise <span class=\"token operator\">=</span> databasePromise\n  <span class=\"token punctuation\">.</span><span class=\"token method function property-access\">then</span><span class=\"token punctuation\">(</span>findAllBooks<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> userPromise <span class=\"token operator\">=</span> databasePromise\n  <span class=\"token punctuation\">.</span><span class=\"token method function property-access\">then</span><span class=\"token punctuation\">(</span>getCurrentUser<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token known-class-name class-name\">Promise</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">all</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n  booksPromise<span class=\"token punctuation\">,</span>\n  userPromise\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token method function property-access\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">values</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> books <span class=\"token operator\">=</span> values<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> user <span class=\"token operator\">=</span> values<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword control-flow\">return</span> <span class=\"token function\">pickTopRecommentations</span><span class=\"token punctuation\">(</span>books<span class=\"token punctuation\">,</span> user<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<h2 id=\"sleep-example\">Sleep example<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#sleep-example\"></a></h2>\n<ul>\n<li>We can use promises make a function who's purpose is to simply wait, before executing further code. We define it as such:</li>\n</ul>\n<pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">sleep</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>ms<span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token keyword\">new</span> <span class=\"token class-name\"><span class=\"token known-class-name class-name\">Promise</span><span class=\"token operator\">&#x3C;</span><span class=\"token keyword\">void</span><span class=\"token operator\">></span></span><span class=\"token punctuation\">(</span>resolve <span class=\"token arrow operator\">=></span> <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span>resolve<span class=\"token punctuation\">,</span> ms<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<ul>\n<li>as soon as we call <code>sleep(1000)</code>, a promise is returned to us. This means that javascript will say \"ok, since we're waiting on that promise to resolve (or reject), I'm going to go do some other stuff, and once your promise resolves, I'll be back to execute the <code>.then()</code> code\".\n<ul>\n<li>This is precicely why promises are said to \"handle asynchronous things synchronously\". It is because promises help us manage 2 different lines of execution at a time</li>\n</ul>\n</li>\n</ul>\n<hr>\n<strong>Children</strong>\n<ol>\n<li><a href=\"/notes/o5M4VcoPps3ZR60CLRkj7\">Async-Await</a></li>\n<li><a href=\"/notes/P5nUdE8NTjpnjV6eLfJIg\">Cook</a></li>\n</ol>\n<hr>\n<strong>Backlinks</strong>\n<ul>\n<li><a href=\"/notes/ulicRRwo3lSFzh3tMfWH9\">Apache Flink</a></li>\n<li><a href=\"/notes/yoh4pwoXcfELInGKRdYf6\">Rxjs</a></li>\n<li><a href=\"/notes/nqv4bkm2rp1nljndftgqxdx\">Controllers</a></li>\n<li><a href=\"/notes/Ag4RGxbqigmzcZAUS9FRv\">Lambda Function</a></li>\n<li><a href=\"/notes/i0cxm46r54o0242vn13g38n\">Observable</a></li>\n<li><a href=\"/notes/WPpFrk4iwauCzKf88i6f0\">Async Iterator</a></li>\n<li><a href=\"/notes/o5M4VcoPps3ZR60CLRkj7\">Async-Await</a></li>\n</ul>","noteIndex":{"id":"olZIVfSs2uLLr3BppFh4K","title":"Digital Garden","desc":"","updated":1674517603573,"created":1615482407722,"custom":{"nav_order":0,"permalink":"/"},"fname":"root","type":"note","vault":{"fsPath":"../main/tech","name":"tech"},"contentHash":"effb007003ca6a91d7fd0c293e1d2436","links":[{"type":"wiki","from":{"fname":"root","id":"olZIVfSs2uLLr3BppFh4K","vaultName":"tech"},"value":"testing.method.unit","alias":"unit testing","position":{"start":{"line":18,"column":121,"offset":1146},"end":{"line":18,"column":157,"offset":1182},"indent":[]},"xvault":false,"sameFile":false,"to":{"fname":"testing.method.unit"}},{"type":"wiki","from":{"fname":"root","id":"olZIVfSs2uLLr3BppFh4K","vaultName":"tech"},"value":"general.arch.microservice","alias":"microservices","position":{"start":{"line":18,"column":188,"offset":1213},"end":{"line":18,"column":231,"offset":1256},"indent":[]},"xvault":false,"sameFile":false,"to":{"fname":"general.arch.microservice"}},{"type":"wiki","from":{"fname":"root","id":"olZIVfSs2uLLr3BppFh4K","vaultName":"tech"},"value":"paradigm.oop","alias":"OOP","position":{"start":{"line":36,"column":227,"offset":2718},"end":{"line":36,"column":247,"offset":2738},"indent":[]},"xvault":false,"sameFile":false,"to":{"fname":"paradigm.oop"}}],"anchors":{"tags":{"type":"header","text":"Tags","value":"tags","line":46,"column":0,"depth":3},"resources":{"type":"header","text":"Resources","value":"resources","line":55,"column":0,"depth":2},"ue-unexamined-resources":{"type":"header","text":"UE (Unexamined) Resources","value":"ue-unexamined-resources","line":56,"column":0,"depth":3},"e-examined-resources":{"type":"header","text":"E (Examined) Resources","value":"e-examined-resources","line":59,"column":0,"depth":3},"resources-1":{"type":"header","text":"Resources","value":"resources-1","line":62,"column":0,"depth":3}},"children":["40ubf88tephzbdjte8cdsa0","zFMjbn3xihVNHjUIdZCD1","IK6NOKemuDjhfstJBovKL","ZaTr28eWk1DrXOEsc1YVb","Vi0WYVLZunVM9iR8XZJn3","ngAbg7gluvbt1bY1UIRsi","RCPPXSakm5TvKka8kOmVp","LIcuGYV0DDt1VWbvH6Sed","MPx8ykTP57I40WTZvTP7f","ZU5WmdTG1bHoE8RcmZXZG","jqWiyYJff92RjXuUQt9PQ","KihijM8OQvZ4pASkkhqzL","F9vyqvls3OBCujtukqKhy","k6jxm2b3edgkhbordpuz6v1","facc2b01-755a-409f-99f6-57bef2d1501f","bZumdyapJ2H0wWWOmJ45i","elqpgoe2r951si4xrhujppj","m5ov42Vm6mR7RQWTvl1NW","cw8cerc0cos8lh871oz8rtf","PZxxZ4iESzSlbbHJKxuAZ","UDu62Pa6BaRqlG8uGoMhy","u3zcndycwqessho5h6x0nz9","ZgCUp366YrF2Tyky2NT73","DVpVUmavSoVDA7UIlPzLX","nMCtMXVvjBsJk3iw1zoIO","ANfx9Z4a6ZA0uJuSHtbIJ","BkG557LKUYbH1DnxprEVT","1TaH8zDTM98FZ9SYaeXLM","02v7ymc144e5c4pv3edkud7","dc79799f-a55d-48ab-a8be-c48adb1b19c0","f6feef57-b8f5-451f-a09a-7b63f6a07183","4sz47Y0LKs1Si73rWtyyh","g7ulqi8no93ezeocbesc3ll","5a9fb1df-478e-4687-9be0-5cb97e61ec57","1374e9e9-1cbc-4e1f-b1ca-66b8569533dd","D8Z3rjXkSj2EOymXQXF4Z","np3c1ykvnjqv5xoombpfwqz","f529cc34-aba0-45ca-ad7e-02ddda318941","0zcauha3il2NqtxZazIo7","9bbd6f68-03b2-41f4-92e4-2ca313e8b450","5a2ab598-fa7e-4471-8bda-9f5831b679ae","uV6w4mZPoohWyZV4Xaad0","QHXEIyeZGIGMVi5Q52UWI","RgE0mZLaUjPftFPZsiAoe","mytCOts26Pidush65tdRW","fwUzxfLSPMH1eL8oBoLWx","wazdsda6h25x66edvfmeuiv","TbW7PM9bg1y5TGkiWwQ8b","xiSIDeEtIc8X0lpUQlppI","0jxgntiLNHWFuCbzqtFGF","GkdMprLUe4QQULBxmGN6V","4SYc6v5hxY5g6Ip6kjpwO","czi7ilt2i1uoqm1f2otbntj","fqVQpS9FBiXgKsZX3R3sJ","L5JUZlGAGvTxrsEBB7DY8","ttyri4pwfyn5lcx0vp9804o","TeTedoeS2LdHPR632eCpM","ulicRRwo3lSFzh3tMfWH9","p7d24vyb8m00ombzn34t50c","e65188a1-177e-4ab2-99f9-75f85d537621","fajYnbVhCRDi74xn0H30R","bArGdGwqo3iFkyKMyE7qR","4Dcp7gbEVoLLgfu7bXFai","5d700782-fb81-416e-83f9-5dd88260e350","zubgzhNFE6KlTgXcjTz6O","8lpdfWa0cbSq1XJQbcYcY","2psluywdc416t7vrql0m058","17I8ZksXvqCH1mRtZDjHp","kF916Ow84qpJJeMRkWMIo","tMLkLcrIHHBz56xVmBLkP","CSePBQ6q7qhowKESqVwt7","laZ4OfLhZNK1Kuy6GaWUr","z5IJblOknQhMzZ5QZh4ye","N36FHxfxzwJfxDY3miWyX","3bb25f58-2b50-4fa3-af55-48ea9f88a081","7x07qjgbitozdfszqzuy7ix","u93Rz4fEWGu6VBR30Zraf","9hjMHnKvYT4jLKvuDSXaV","qC5GxCZBmNb4Ip6c0kU8x","LgW7mTIALODoXc54B3p6S","UYPxfHBFWX7fb6hHU5bB6","74lYtC8NKpCzcyFOZTfR1","sEoBNAEuaTxwSmTXDonZt","dj0jr9mpvs62e2pkg3zc3yy","z8ie0xjogb6ht7gzowav5xr","qxSOd6SPN8qf9ZUojVFDX","WQoMTf6VXBaxCgksXAVsj","2Mw4XgfyCHXHNOX5yoCIY","qcdt2f7jo51muquo5r95dpo","0XJqmcdtcMZu66glBI5O8","lK8r8BXS4ThiUTe4xKIZe","93de42ca-53ea-460a-baa7-b9ec5c47cb1e","Rxs2jaGpdFzqYtP7lAJFJ","aO8W81Z0PyIb6Hs7nOHPW","lhzisalkebu4w5n01np07i0","7b5l4b6fi65n7sv9org5q1l","I01hENHnh8Tqu3Ok8sLzG","03o3n0hz9v9jtb7j889zpd4","evqsPNutOaZ8hcBCqxFQu","zhhxcjZUHdU8uRLwGb9Zh","G1aFACZB2ooWGMGwyd3ZW","YWy1C4tgoaCcw1m8JJsr7","Szj3o5iaNxPpesiCqwrbu","613syb18hb3v0u1ydvor7ru","XhvCDW3fIw6h6MhY5ticq","Q70g7SusFZBQXzkuQifv4","AzfWDH3wp7jFpL2EYxBcW","y0fwpZ9qMqirsLiFyOciU","ZF8xj8wwDUqKlrwTrCFZ1","tAJvhqhdfyZZa87QHq1TU","4hRmipi8lxpBLyzWu5JVB","iTg0C7QjvnmqBZeEigJNs","3babc3d2-79ae-470a-9c06-ab8bba2e684e","bF3UsMFya3fMeXWDspVov","ULkfbL9WpktbVYnzhl6Jw","PpNOO8JYWe6dM8wruSa7x","di40pCxDn7IiqE8lFdD46","rmW0mkerqV35I8QPji6lM","3IFIK1ByzeIxZCByryGLN","iImkYAKfkw3beAl6pLbDn","ecDe8DNWrkeQTwpTEvHje","i2it5id8qwtg27n4usg8bo1","Yqhdd9mSJGN7OJOeyoSD2","Ws5tah8tpeyn9tK8VBTg8","gWAg15uBJgkS2B0wcpMAa","l7V3v2ep1YdDCt7DOr7Ci","yM2PJBdqJnHpD63cPA6sW","qn0bre7eLbi3QMbCfWkUi","fSu0KxFL41IRouotqmbHs","0gtg24Mj1a1bQFPRGQNlO","7iQPBMltLPLbFEz2qbjPu","yoh4pwoXcfELInGKRdYf6","dCGCWXgAmiOZXbdULT1m6","jMavlje07sNa6hSEIE8WA","Xxm0JE4dKHxrQAaZfzvxD","nRb6Im4Kcmc2ZWE7K1jZ1","PAEBZCyFBZJyR7OoMZ41E","PQ6km8RgRCuyICBPOYz8f","x5tm1nfjzyawwzedy3yitgd","2bhftt8rGuxYu4pFgNqru","hjYIZpHQWuXfeEoGeJEKW","K2M9bQqVq2eQfm29eslKL","X8obW1iKwYsvNgKWGyCzy","yJwSC7hqYIezTFHf5i0Ev","c4Z7ETcOHUILRMH32Sfjw","qiR6dIu857b9M9kTqjOyK","fc2coz74cnfy5czzofx4h5x","Ku1OgHMhELajzo61Gx7ye","LUrfhDWo8wuwZu7CN9TV8","osu6JGOnvXJ5gt3tpqWZY","1a6173cd-cf13-4b34-a522-8350bf9a364f","S2sBltrPfd8a7ICuD7CuH","GLQ2pmkJUNUa93THBDVsD","md6xitz4exia2joa06i490b","oWCuBXOg6JWfZzjmKxmNl","jOmhZ8ovLYTPbpM1vqSDx","p9bov84s0isgkl1ysaw93kk","FraC6xzLy1ei91l1ICyc9","6ceBas2RE9Q4787GDngH7","734cd78d-0bc9-426b-803d-1efc84dfffe5","k4Bb09px6r0FxIRs49SXV","oaG3H1S9IUBO644nGZigu","Ka7agQJkUMRSWN0uFdkWK","si3z090WsiLasMhJBa1Az","hs6rwzt4mogiicoc4gcykbi","ljKAVERmdEiKLK9hXGKBm","zxt3lhonfdhglvijd17ua8c","dd7dopve1dudqkoibkqvti4","923tgifqf59ovv5yldtyi0a","vrjwp01goqw47fqctm4f4lo","c99gdmmppju3r1tth8cb2jx","z2pvn5qxdz84zgygqzxage8"],"parent":null,"data":{},"body":"This Dendron vault of tech knowledge is organized according to domains and their sub-domains, along with specific implementation of those domains.\n\nFor instance, Git itself is a domain. Sub-domains of Git would include things like `commit`,\n`tags`, `reflog` etc. implementations of each of those could be `cli`, `strat`\n(strategies), `inner`, and so on.\n\nThe goal of the wiki is to present data in a manner that is from the perspective\nof a querying user. Here, a user is a programmer wanting to get key information\nfrom a specific domain. For instance, if a user wants to use postgres functions\nand hasn't done them in a while, they should be able to query\n`postgres.functions` to see what information is available to them.\n\nThis wiki has been written with myself in mind. While learning each of these\ndomains, I have been sensitive to the \"aha\" moments and have noted down my\ninsights as they arose. I have refrained from capturing information that I\nconsidered obvious or otherwise non-beneficial to my own understanding.\n\nAs a result, I have allowed myself to use potentially arcane concepts to explain other ones. For example, in my note on [[unit testing|testing.method.unit]], I have made reference to the [[microservices|general.arch.microservice]] note. If these notes were made with the public in mind, this would be a very bad strategy, given that you'd have to understand microservices to be able to draw that same parallel that I've already drawn. Since these notes are written for myself, I have been fine with taking these liberties.\n\nWhat I hope to gain from this wiki is the ability to step away from any\ngiven domain for a long period of time, and be able to be passably useful for\nwhatever my goals are within a short period of time. Of course this is all\nvague sounding, and really depends on the domain along with the ends I am\ntrying to reach.\n\nTo achieve this, the system should be steadfast to:\n- be able to put information in relatively easily, without too much thought\n\trequired to its location. While location is important, Dendron makes it easy\n\tto relocate notes, if it becomes apparent that a different place makes more\n\tsense.\n- be able to extract the information that is needed, meaning there is a\n\thigh-degree in confidence in the location of the information. The idea is\n\tthat information loses a large amount of its value when it is unfindable.\n\tTherefore, a relatively strict ideology should be used when determining\n\twhere a piece of information belongs.\n\t- Some concepts might realistically belong to multiple domains. For instance, the concept of *access modifiers* can be found in both `C#` and `Typescript`. Therefore, this note should be abstracted to a common place, such as [[OOP|paradigm.oop]].\n\nThis Dendron vault is the sister component to the [General Second Brain](https://tech.kyletycholiz.com).\n\n### Tags\nThroughout the garden, I have made use of tags, which give semantic meaning to the pieces of information.\n\n- `ex.` - Denotes an *example* of the preceding piece of information\n- `spec:` - Specifies that the preceding information has some degree of *speculation* to it, and may not be 100% factual. Ideally this gets clarified over time as my understanding develops.\n- `anal:` - Denotes an *analogy* of the preceding information. Often I will attempt to link concepts to others that I have previously learned.\n- `mn:` - Denotes a *mnemonic*\n- `expl:` - Denotes an *explanation*\n\n## Resources\n### UE (Unexamined) Resources\nOften, I come across sources of information that I believe to be high-quality. They may be recommendations or found in some other way. No matter their origin, I may be in a position where I don't have the time to fully examine them (and properly extract notes), or I may not require the information at that moment in time. In cases like these, I will add reference to a section of the note called **UE Resources**. The idea is that in the future when I am ready to examine them, I have a list of resources that I can start with. This is an alternative strategy to compiling browser bookmarks, which I've found can quickly become untenable.\n\n### E (Examined) Resources\nOnce a resource has been thoroughly examined and has been mined for notes, it will be moved from *UE Resources* to *E Resources*. This is to indicate that (in my own estimation), there is nothing more to be gained from the resource that is not already in the note.\n\n### Resources\nThis heading is for inexhaustible resources. \n- A prime example would be a quality website that continually posts articles.  - Another example would be a tool, such as software that measures frequencies in a room to help acoustically treat it.\n"},"collectionChildren":null,"customHeadContent":null,"config":{"version":5,"dev":{"enablePreviewV2":true},"commands":{"lookup":{"note":{"selectionMode":"extract","confirmVaultOnCreate":false,"leaveTrace":false,"bubbleUpCreateNew":true,"fuzzThreshold":0.2,"vaultSelectionModeOnCreate":"smart"}},"insertNote":{"initialValue":"templates"},"insertNoteLink":{"aliasMode":"none","enableMultiSelect":false},"insertNoteIndex":{"enableMarker":false},"randomNote":{},"copyNoteLink":{"aliasMode":"title"},"templateHierarchy":"template"},"workspace":{"dendronVersion":"0.83.0","vaults":[{"fsPath":"../main/tech","name":"tech"}],"journal":{"dailyDomain":"daily","name":"journal","dateFormat":"y.MM.dd","addBehavior":"childOfDomain"},"scratch":{"name":"scratch","dateFormat":"y.MM.dd.HHmmss","addBehavior":"asOwnDomain"},"graph":{"zoomSpeed":1,"createStub":false},"enableAutoCreateOnDefinition":false,"enableXVaultWikiLink":false,"enableRemoteVaultInit":true,"workspaceVaultSyncMode":"noCommit","enableAutoFoldFrontmatter":true,"maxPreviewsCached":10,"maxNoteLength":204800,"task":{"name":"","dateFormat":"","addBehavior":"childOfCurrent","statusSymbols":{"":" ","wip":"w","done":"x","assigned":"a","moved":"m","blocked":"b","delegated":"l","dropped":"d","pending":"y"},"prioritySymbols":{"H":"high","M":"medium","L":"low"},"todoIntegration":false,"createTaskSelectionType":"selection2link","taskCompleteStatus":["done","x"]},"enableUserTags":true,"enableHashTags":true,"enableEditorDecorations":true,"enableFullHierarchyNoteTitle":false},"preview":{"enableFMTitle":true,"enableNoteTitleForLink":true,"enableMermaid":true,"enablePrettyRefs":true,"enableKatex":true,"automaticallyShowPreview":false,"enableFrontmatterTags":true,"enableHashesForFMTags":false},"publishing":{"enableFMTitle":true,"enableNoteTitleForLink":true,"enablePrettyRefs":true,"enableKatex":true,"copyAssets":true,"siteHierarchies":["root"],"writeStubs":false,"siteRootDir":"docs","seo":{"title":"Dendron","description":"The Tech Digital Garden of Kyle Tycholiz"},"github":{"cname":"tech.kyletycholiz.com","enableEditLink":true,"editLinkText":"Edit this page on GitHub","editBranch":"master","editViewMode":"tree"},"enableSiteLastModified":true,"enableFrontmatterTags":true,"enableHashesForFMTags":false,"enableRandomlyColoredTags":true,"enableTaskNotes":true,"enablePrettyLinks":true,"searchMode":"lookup","enableMermaid":true,"siteUrl":"https://tech.kyletycholiz.com","duplicateNoteBehavior":{"action":"useVault","payload":["tech"]},"siteFaviconPath":"favicon.ico","siteIndex":"root"}}},"__N_SSG":true}