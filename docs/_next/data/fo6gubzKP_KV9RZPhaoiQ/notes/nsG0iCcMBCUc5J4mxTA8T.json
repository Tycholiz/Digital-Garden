{"pageProps":{"note":{"id":"nsG0iCcMBCUc5J4mxTA8T","title":"Triggers","desc":"","updated":1699897944439,"created":1614835076700,"custom":{},"fname":"pg.lang.triggers","type":"note","vault":{"fsPath":"../main/tech","name":"tech"},"contentHash":"42b9b16fc73f35c616dd1d0881719f35","links":[{"from":{"fname":"db.distributed.replication.strategies","id":"wbs6c9snnonnyzm8vk2t4b9","vaultName":"tech"},"type":"backlink","position":{"start":{"line":59,"column":43,"offset":4492},"end":{"line":59,"column":72,"offset":4521},"indent":[]},"value":"pg.lang.triggers"}],"anchors":{"syntax":{"type":"header","text":"Syntax","value":"syntax","line":27,"column":0,"depth":2},"parts-of-a-trigger":{"type":"header","text":"Parts of a Trigger","value":"parts-of-a-trigger","line":43,"column":0,"depth":1},"trigger":{"type":"header","text":"Trigger","value":"trigger","line":46,"column":0,"depth":2},"beforeafter-triggers":{"type":"header","text":"Before/After Triggers","value":"beforeafter-triggers","line":48,"column":0,"depth":3},"before":{"type":"header","text":"Before","value":"before","line":52,"column":0,"depth":4},"after":{"type":"header","text":"After","value":"after","line":63,"column":0,"depth":4},"trigger-function":{"type":"header","text":"Trigger Function","value":"trigger-function","line":71,"column":0,"depth":2},"infinite-loops":{"type":"header","text":"Infinite loops","value":"infinite-loops","line":78,"column":0,"depth":3},"return-value-of-trigger-functions":{"type":"header","text":"Return value of trigger functions","value":"return-value-of-trigger-functions","line":82,"column":0,"depth":3},"trigger-local-variables":{"type":"header","text":"Trigger Local Variables","value":"trigger-local-variables","line":96,"column":0,"depth":3}},"children":[],"parent":"OV4weBB6tmbhEK7I4R8Jm","data":{}},"body":"<h1 id=\"triggers\">Triggers<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#triggers\"></a></h1>\n<p>A trigger is a callback that is executed whenever a table (or view) is modified. Triggers can also be set to listen for specific user actions much like a callback.</p>\n<ul>\n<li>Can also be set up to be executed by using the INSTEAD OF condition.</li>\n</ul>\n<p>2 main types of trigger:</p>\n<ol>\n<li>row-level trigger</li>\n<li>statement-level trigger</li>\n</ol>\n<ul>\n<li>the difference between these two is in how many times each would be called in response to an event. \n<ul>\n<li>ex. if you issue an UPDATE statement that affects 20 rows, the row-level trigger will be invoked 20 times, while the statement level trigger will be invoked 1 time.</li>\n</ul>\n</li>\n</ul>\n<p>examples</p>\n<ul>\n<li>restrict DML (actions that modify the db) operations to business hours </li>\n<li>Automatically generate derived column values</li>\n</ul>\n<p>We can think of a trigger like a middleware that sits between the user's request (that interacts with the db) and the sql server. Every time our db is interacted with, listeners are able \"intercept\" the query and act on it</p>\n<ul>\n<li>Most triggers are only activated by either INSERT or UPDATE statements.</li>\n<li>We can specify columns on a trigger, which will cause the trigger to only fire if those columns are operated on (ex. we update those columns)</li>\n<li>If multiple triggers of the same kind are defined for the same event, they will be fired in alphanumerical order.\n<ul>\n<li>which is why it is useful to prepend them with numbers</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"syntax\">Syntax<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#syntax\"></a></h2>\n<ul>\n<li>A trigger that is marked <code>FOR EACH ROW</code> is called once for every row that the operation modifies.</li>\n<li>a trigger that is marked <code>FOR EACH STATEMENT</code> only executes once for any given operation</li>\n<li><code>WHEN</code> allows us to determine whether or not the trigger should be fired\n<ul>\n<li>In row-level triggers the <code>WHEN</code> condition can examine the old and/or new values of columns of the row</li>\n<li>ex. only execute the function if <code>OLD.balance</code> does not equal <code>NEW.balance</code>\n<ul>\n<li><code>WHEN (OLD.balance IS DISTINCT FROM NEW.balance)</code></li>\n</ul>\n</li>\n<li>ex. only execute function if anything has changed\n<ul>\n<li><code>WHEN (OLD.* IS DISTINCT FROM NEW.*)</code></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><code>CONSTRAINT</code> allows us to adjust the timing of when the trigger actually fires.\n<ul>\n<li>The trigger can be fired either:\n<ul>\n<li>At the end of the statement which caused the triggering event</li>\n<li>At the end of the containing transaction, which is the <code>COMMIT</code> (called deferred triggers)</li>\n</ul>\n</li>\n<li>Each constraint has its own IMMEDIATE or DEFERRED mode.</li>\n<li>only available <code>AFTER ROW</code></li>\n</ul>\n</li>\n</ul>\n<h1 id=\"parts-of-a-trigger\">Parts of a Trigger<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#parts-of-a-trigger\"></a></h1>\n<ul>\n<li>2 parts to a trigger: the trigger itself, and the function that is executed by the trigger</li>\n</ul>\n<h2 id=\"trigger\">Trigger<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#trigger\"></a></h2>\n<h3 id=\"beforeafter-triggers\">Before/After Triggers<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#beforeafter-triggers\"></a></h3>\n<p>The trigger can be specified to fire before the operation is attempted on a row, or after the operation has completed (after constraints are checked and the INSERT, UPDATE, or DELETE has completed)</p>\n<ul>\n<li>Trigger can also be set to fire <em>instead of</em> having the operation be performed. This only works on views</li>\n</ul>\n<h4 id=\"before\">Before<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#before\"></a></h4>\n<ul>\n<li>the constraints will not-yet have been checked, allowing us to perform some action before the actual operation has taken place.\n<ul>\n<li>ex. Imagine we want to keep only one of the user's credit cards specified as <code>is_primary</code>. Because of the uniqueness constraints applied on the table (allowing only one <code>is_primary</code> card per user), we must set <code>is_primary</code> to <code>false</code> for all of our cards, any time the user attempts to insert a new card where <code>is_primary</code> is true. \n<ul>\n<li>If we had instead ran the trigger <em>after</em> the <code>insert</code>, then we might have gotten an error, since we are potentially trying to insert a new card with <code>is_primary = true</code>, while one may already exist.</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>If the trigger fires before the event, the trigger can skip the operation for the current row, or change the row being inserted (for INSERT and UPDATE operations only)</li>\n<li>in <code>BEFORE</code>, the <code>WHEN</code> condition is evaluated just before the function is executed\n<ul>\n<li>Therefore, using <code>WHEN</code> (in the trigger itself) has the same effect as testing the same condition at the beginning of the triggered function with <code>TG_WHEN</code></li>\n<li>The implication of this is that the <code>NEW</code> value seen by the function is the current value, and not the value that would exist <em>following</em> the operation\n<ul>\n<li>Also consider that while this \"current value\" normally means \"prior to the operation being performed\", there is the possibility that previous triggers in the chain have already executed, potentially changing what \"current value\" means to us.</li>\n</ul>\n</li>\n<li>Another implication is that in <code>BEFORE</code>, a trigger's <code>WHEN</code> condition cannot examine the columns of the <code>NEW</code> row that is to be inserted/updated (because they wouldn't have been set yet)</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"after\">After<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#after\"></a></h4>\n<ul>\n<li>rows will be impacted with consideration to the constraints</li>\n<li>If the trigger fires after the event, all changes, including the effects of other triggers, are \"visible\" to the trigger.</li>\n<li>in <code>AFTER</code>, the <code>WHEN</code> condition is evaluated after the row update occurs.\n<ul>\n<li>The <code>WHEN</code> condition here also determines whether an event is queued to fire a trigger, following the operation.\n<ul>\n<li>Therefore, if <code>WHEN</code> does not return true, we do not have to queue an event; nor to re-fetch the row at the end of the statement\n<ul>\n<li>This can result in significant speedups in statements that modify many rows, if the trigger only needs to be fired for a few of the rows.</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"trigger-function\">Trigger Function<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#trigger-function\"></a></h2>\n<p>A trigger function returns a <code>trigger</code></p>\n<ul>\n<li>The function body must return either <code>NULL</code> or a row value having exactly the structure of the table the trigger was fired for.\n<ul>\n<li>ie. the the row being returned must have the same type of the table.</li>\n</ul>\n</li>\n</ul>\n<p>Depending on if we are using row-level triggers or table-level triggers, the function will be called for each row that is affected, or will be called once per table.</p>\n<h3 id=\"infinite-loops\">Infinite loops<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#infinite-loops\"></a></h3>\n<p>if a trigger function updates a row in the same table that the trigger is for and the operation is the same, then it will trigger a recursive infinite loop, since the trigger function will cause the trigger to fire in response to the </p>\n<ul>\n<li>ex. we have a trigger that is set to fire on update of <code>users</code> table, and the trigger function itself updates a row in that table. This update, will cause the trigger to fire again, and so on.</li>\n</ul>\n<h3 id=\"return-value-of-trigger-functions\">Return value of trigger functions<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#return-value-of-trigger-functions\"></a></h3>\n<p><code>BEFORE</code></p>\n<ul>\n<li>if we return <code>null</code> from the function, we are signalling to the trigger manager signal that we want to skip the rest of the operation for this row, meaning 2 things happen:\n<ol>\n<li>subsequent triggers will be short-circuited </li>\n<li>the operation will not occur for this row.</li>\n</ol>\n</li>\n<li>if we return a non-<code>null</code> value, then the operation proceeds with that value. \n<ul>\n<li>returning a row value that is different from the original value of <code>NEW</code> will alter the row to be inserted/updated\n<ul>\n<li>Therefore, if we want the trigger to succeed normally without altering the <code>NEW</code> row value, then we must return <code>NEW</code>\n<ul>\n<li>This means that we could alter single columns in the row, with <code>NEW.col = X</code>, and proceeding to return <code>NEW</code></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>a statement-level trigger fired <code>BEFORE</code> always ignores the return value of the trigger function, so it might as well be <code>null</code>.</li>\n</ul>\n<p><code>AFTER</code></p>\n<ul>\n<li>return value of a row-level trigger (or statement-level trigger) fired <code>AFTER</code> will always be ignored, so it might as well be <code>null</code></li>\n</ul>\n<h3 id=\"trigger-local-variables\">Trigger Local Variables<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#trigger-local-variables\"></a></h3>\n<p>A function called by a trigger receives data about its calling environment (called <code>TriggerData</code>)</p>\n<ul>\n<li>prefixed by <code>TG_</code></li>\n</ul>\n<p><code>NEW</code> </p>\n<ul>\n<li>variable holding the new database row for INSERT/UPDATE operations in row-level triggers</li>\n<li>type: <code>record</code></li>\n<li>in statement-level triggers and <code>DELETE</code> operations, this value is <code>null</code>\n<ul>\n<li>this shows why we can return <code>null</code> from the trigger function on <code>DELETE</code> operations. There is nothing to return to the table!</li>\n<li>must still return a non-<code>null</code> value from a DELETE trigger function, or we will short-circuit the trigger action. Normally, <code>OLD</code> is returned, since <code>NEW</code> is null</li>\n</ul>\n</li>\n</ul>\n<p><code>OLD</code></p>\n<ul>\n<li>variable holding the old database row for UPDATE/DELETE operations in row-level triggers</li>\n<li>type: <code>record</code></li>\n<li>in statement-level triggers and <code>INSERT</code> operations, this value is <code>null</code></li>\n</ul>\n<p><code>TG_WHEN</code></p>\n<ul>\n<li>evaluates to BEFORE, AFTER, or INSTEAD OF, depending on the trigger's definition.</li>\n<li>type: <code>text</code></li>\n</ul>\n<p><code>TG_OP</code></p>\n<ul>\n<li>evaluates to INSERT, UPDATE, DELETE, or TRUNCATE telling for which operation the trigger was fired.</li>\n<li>type: <code>text</code></li>\n</ul>\n<p><code>TG_ARGV</code></p>\n<ul>\n<li>the arguments passed in to the trigger's function call</li>\n<li>type: <code>text[]</code></li>\n</ul>\n<p>Also\n<code>TG_TABLE_NAME</code>, <code>TG_TABLE_SCHEMA</code>, <code>TG_NARGS</code> (# of args)</p>\n<hr>\n<strong>Backlinks</strong>\n<ul>\n<li><a href=\"/notes/wbs6c9snnonnyzm8vk2t4b9\">Strategies</a></li>\n</ul>","noteIndex":{"id":"olZIVfSs2uLLr3BppFh4K","title":"Digital Garden","desc":"","updated":1674517603573,"created":1615482407722,"custom":{"nav_order":0,"permalink":"/"},"fname":"root","type":"note","vault":{"fsPath":"../main/tech","name":"tech"},"contentHash":"effb007003ca6a91d7fd0c293e1d2436","links":[{"type":"wiki","from":{"fname":"root","id":"olZIVfSs2uLLr3BppFh4K","vaultName":"tech"},"value":"testing.method.unit","alias":"unit testing","position":{"start":{"line":18,"column":121,"offset":1146},"end":{"line":18,"column":157,"offset":1182},"indent":[]},"xvault":false,"sameFile":false,"to":{"fname":"testing.method.unit"}},{"type":"wiki","from":{"fname":"root","id":"olZIVfSs2uLLr3BppFh4K","vaultName":"tech"},"value":"general.arch.microservice","alias":"microservices","position":{"start":{"line":18,"column":188,"offset":1213},"end":{"line":18,"column":231,"offset":1256},"indent":[]},"xvault":false,"sameFile":false,"to":{"fname":"general.arch.microservice"}},{"type":"wiki","from":{"fname":"root","id":"olZIVfSs2uLLr3BppFh4K","vaultName":"tech"},"value":"paradigm.oop","alias":"OOP","position":{"start":{"line":36,"column":227,"offset":2718},"end":{"line":36,"column":247,"offset":2738},"indent":[]},"xvault":false,"sameFile":false,"to":{"fname":"paradigm.oop"}}],"anchors":{"tags":{"type":"header","text":"Tags","value":"tags","line":46,"column":0,"depth":3},"resources":{"type":"header","text":"Resources","value":"resources","line":55,"column":0,"depth":2},"ue-unexamined-resources":{"type":"header","text":"UE (Unexamined) Resources","value":"ue-unexamined-resources","line":56,"column":0,"depth":3},"e-examined-resources":{"type":"header","text":"E (Examined) Resources","value":"e-examined-resources","line":59,"column":0,"depth":3},"resources-1":{"type":"header","text":"Resources","value":"resources-1","line":62,"column":0,"depth":3}},"children":["40ubf88tephzbdjte8cdsa0","zFMjbn3xihVNHjUIdZCD1","IK6NOKemuDjhfstJBovKL","ZaTr28eWk1DrXOEsc1YVb","Vi0WYVLZunVM9iR8XZJn3","ngAbg7gluvbt1bY1UIRsi","RCPPXSakm5TvKka8kOmVp","LIcuGYV0DDt1VWbvH6Sed","MPx8ykTP57I40WTZvTP7f","ZU5WmdTG1bHoE8RcmZXZG","jqWiyYJff92RjXuUQt9PQ","KihijM8OQvZ4pASkkhqzL","F9vyqvls3OBCujtukqKhy","k6jxm2b3edgkhbordpuz6v1","facc2b01-755a-409f-99f6-57bef2d1501f","bZumdyapJ2H0wWWOmJ45i","elqpgoe2r951si4xrhujppj","m5ov42Vm6mR7RQWTvl1NW","cw8cerc0cos8lh871oz8rtf","PZxxZ4iESzSlbbHJKxuAZ","UDu62Pa6BaRqlG8uGoMhy","u3zcndycwqessho5h6x0nz9","ZgCUp366YrF2Tyky2NT73","DVpVUmavSoVDA7UIlPzLX","nMCtMXVvjBsJk3iw1zoIO","ANfx9Z4a6ZA0uJuSHtbIJ","BkG557LKUYbH1DnxprEVT","1TaH8zDTM98FZ9SYaeXLM","02v7ymc144e5c4pv3edkud7","dc79799f-a55d-48ab-a8be-c48adb1b19c0","f6feef57-b8f5-451f-a09a-7b63f6a07183","4sz47Y0LKs1Si73rWtyyh","g7ulqi8no93ezeocbesc3ll","5a9fb1df-478e-4687-9be0-5cb97e61ec57","1374e9e9-1cbc-4e1f-b1ca-66b8569533dd","D8Z3rjXkSj2EOymXQXF4Z","np3c1ykvnjqv5xoombpfwqz","f529cc34-aba0-45ca-ad7e-02ddda318941","0zcauha3il2NqtxZazIo7","9bbd6f68-03b2-41f4-92e4-2ca313e8b450","5a2ab598-fa7e-4471-8bda-9f5831b679ae","uV6w4mZPoohWyZV4Xaad0","QHXEIyeZGIGMVi5Q52UWI","RgE0mZLaUjPftFPZsiAoe","mytCOts26Pidush65tdRW","fwUzxfLSPMH1eL8oBoLWx","wazdsda6h25x66edvfmeuiv","TbW7PM9bg1y5TGkiWwQ8b","xiSIDeEtIc8X0lpUQlppI","0jxgntiLNHWFuCbzqtFGF","GkdMprLUe4QQULBxmGN6V","4SYc6v5hxY5g6Ip6kjpwO","czi7ilt2i1uoqm1f2otbntj","fqVQpS9FBiXgKsZX3R3sJ","L5JUZlGAGvTxrsEBB7DY8","ttyri4pwfyn5lcx0vp9804o","TeTedoeS2LdHPR632eCpM","ulicRRwo3lSFzh3tMfWH9","p7d24vyb8m00ombzn34t50c","e65188a1-177e-4ab2-99f9-75f85d537621","fajYnbVhCRDi74xn0H30R","bArGdGwqo3iFkyKMyE7qR","4Dcp7gbEVoLLgfu7bXFai","5d700782-fb81-416e-83f9-5dd88260e350","zubgzhNFE6KlTgXcjTz6O","8lpdfWa0cbSq1XJQbcYcY","2psluywdc416t7vrql0m058","17I8ZksXvqCH1mRtZDjHp","kF916Ow84qpJJeMRkWMIo","tMLkLcrIHHBz56xVmBLkP","CSePBQ6q7qhowKESqVwt7","laZ4OfLhZNK1Kuy6GaWUr","z5IJblOknQhMzZ5QZh4ye","N36FHxfxzwJfxDY3miWyX","3bb25f58-2b50-4fa3-af55-48ea9f88a081","7x07qjgbitozdfszqzuy7ix","u93Rz4fEWGu6VBR30Zraf","9hjMHnKvYT4jLKvuDSXaV","qC5GxCZBmNb4Ip6c0kU8x","LgW7mTIALODoXc54B3p6S","UYPxfHBFWX7fb6hHU5bB6","74lYtC8NKpCzcyFOZTfR1","sEoBNAEuaTxwSmTXDonZt","dj0jr9mpvs62e2pkg3zc3yy","z8ie0xjogb6ht7gzowav5xr","qxSOd6SPN8qf9ZUojVFDX","WQoMTf6VXBaxCgksXAVsj","2Mw4XgfyCHXHNOX5yoCIY","qcdt2f7jo51muquo5r95dpo","0XJqmcdtcMZu66glBI5O8","lK8r8BXS4ThiUTe4xKIZe","93de42ca-53ea-460a-baa7-b9ec5c47cb1e","Rxs2jaGpdFzqYtP7lAJFJ","aO8W81Z0PyIb6Hs7nOHPW","lhzisalkebu4w5n01np07i0","7b5l4b6fi65n7sv9org5q1l","I01hENHnh8Tqu3Ok8sLzG","03o3n0hz9v9jtb7j889zpd4","evqsPNutOaZ8hcBCqxFQu","zhhxcjZUHdU8uRLwGb9Zh","G1aFACZB2ooWGMGwyd3ZW","YWy1C4tgoaCcw1m8JJsr7","Szj3o5iaNxPpesiCqwrbu","613syb18hb3v0u1ydvor7ru","XhvCDW3fIw6h6MhY5ticq","Q70g7SusFZBQXzkuQifv4","AzfWDH3wp7jFpL2EYxBcW","y0fwpZ9qMqirsLiFyOciU","ZF8xj8wwDUqKlrwTrCFZ1","tAJvhqhdfyZZa87QHq1TU","4hRmipi8lxpBLyzWu5JVB","iTg0C7QjvnmqBZeEigJNs","3babc3d2-79ae-470a-9c06-ab8bba2e684e","bF3UsMFya3fMeXWDspVov","ULkfbL9WpktbVYnzhl6Jw","PpNOO8JYWe6dM8wruSa7x","di40pCxDn7IiqE8lFdD46","rmW0mkerqV35I8QPji6lM","3IFIK1ByzeIxZCByryGLN","iImkYAKfkw3beAl6pLbDn","ecDe8DNWrkeQTwpTEvHje","i2it5id8qwtg27n4usg8bo1","Yqhdd9mSJGN7OJOeyoSD2","Ws5tah8tpeyn9tK8VBTg8","gWAg15uBJgkS2B0wcpMAa","l7V3v2ep1YdDCt7DOr7Ci","yM2PJBdqJnHpD63cPA6sW","qn0bre7eLbi3QMbCfWkUi","fSu0KxFL41IRouotqmbHs","0gtg24Mj1a1bQFPRGQNlO","7iQPBMltLPLbFEz2qbjPu","yoh4pwoXcfELInGKRdYf6","dCGCWXgAmiOZXbdULT1m6","jMavlje07sNa6hSEIE8WA","Xxm0JE4dKHxrQAaZfzvxD","nRb6Im4Kcmc2ZWE7K1jZ1","PAEBZCyFBZJyR7OoMZ41E","PQ6km8RgRCuyICBPOYz8f","x5tm1nfjzyawwzedy3yitgd","2bhftt8rGuxYu4pFgNqru","hjYIZpHQWuXfeEoGeJEKW","K2M9bQqVq2eQfm29eslKL","X8obW1iKwYsvNgKWGyCzy","yJwSC7hqYIezTFHf5i0Ev","c4Z7ETcOHUILRMH32Sfjw","qiR6dIu857b9M9kTqjOyK","fc2coz74cnfy5czzofx4h5x","Ku1OgHMhELajzo61Gx7ye","LUrfhDWo8wuwZu7CN9TV8","osu6JGOnvXJ5gt3tpqWZY","1a6173cd-cf13-4b34-a522-8350bf9a364f","S2sBltrPfd8a7ICuD7CuH","GLQ2pmkJUNUa93THBDVsD","md6xitz4exia2joa06i490b","oWCuBXOg6JWfZzjmKxmNl","jOmhZ8ovLYTPbpM1vqSDx","p9bov84s0isgkl1ysaw93kk","FraC6xzLy1ei91l1ICyc9","6ceBas2RE9Q4787GDngH7","734cd78d-0bc9-426b-803d-1efc84dfffe5","k4Bb09px6r0FxIRs49SXV","oaG3H1S9IUBO644nGZigu","Ka7agQJkUMRSWN0uFdkWK","si3z090WsiLasMhJBa1Az","hs6rwzt4mogiicoc4gcykbi","ljKAVERmdEiKLK9hXGKBm","zxt3lhonfdhglvijd17ua8c","dd7dopve1dudqkoibkqvti4","923tgifqf59ovv5yldtyi0a","vrjwp01goqw47fqctm4f4lo","c99gdmmppju3r1tth8cb2jx","z2pvn5qxdz84zgygqzxage8"],"parent":null,"data":{},"body":"This Dendron vault of tech knowledge is organized according to domains and their sub-domains, along with specific implementation of those domains.\n\nFor instance, Git itself is a domain. Sub-domains of Git would include things like `commit`,\n`tags`, `reflog` etc. implementations of each of those could be `cli`, `strat`\n(strategies), `inner`, and so on.\n\nThe goal of the wiki is to present data in a manner that is from the perspective\nof a querying user. Here, a user is a programmer wanting to get key information\nfrom a specific domain. For instance, if a user wants to use postgres functions\nand hasn't done them in a while, they should be able to query\n`postgres.functions` to see what information is available to them.\n\nThis wiki has been written with myself in mind. While learning each of these\ndomains, I have been sensitive to the \"aha\" moments and have noted down my\ninsights as they arose. I have refrained from capturing information that I\nconsidered obvious or otherwise non-beneficial to my own understanding.\n\nAs a result, I have allowed myself to use potentially arcane concepts to explain other ones. For example, in my note on [[unit testing|testing.method.unit]], I have made reference to the [[microservices|general.arch.microservice]] note. If these notes were made with the public in mind, this would be a very bad strategy, given that you'd have to understand microservices to be able to draw that same parallel that I've already drawn. Since these notes are written for myself, I have been fine with taking these liberties.\n\nWhat I hope to gain from this wiki is the ability to step away from any\ngiven domain for a long period of time, and be able to be passably useful for\nwhatever my goals are within a short period of time. Of course this is all\nvague sounding, and really depends on the domain along with the ends I am\ntrying to reach.\n\nTo achieve this, the system should be steadfast to:\n- be able to put information in relatively easily, without too much thought\n\trequired to its location. While location is important, Dendron makes it easy\n\tto relocate notes, if it becomes apparent that a different place makes more\n\tsense.\n- be able to extract the information that is needed, meaning there is a\n\thigh-degree in confidence in the location of the information. The idea is\n\tthat information loses a large amount of its value when it is unfindable.\n\tTherefore, a relatively strict ideology should be used when determining\n\twhere a piece of information belongs.\n\t- Some concepts might realistically belong to multiple domains. For instance, the concept of *access modifiers* can be found in both `C#` and `Typescript`. Therefore, this note should be abstracted to a common place, such as [[OOP|paradigm.oop]].\n\nThis Dendron vault is the sister component to the [General Second Brain](https://tech.kyletycholiz.com).\n\n### Tags\nThroughout the garden, I have made use of tags, which give semantic meaning to the pieces of information.\n\n- `ex.` - Denotes an *example* of the preceding piece of information\n- `spec:` - Specifies that the preceding information has some degree of *speculation* to it, and may not be 100% factual. Ideally this gets clarified over time as my understanding develops.\n- `anal:` - Denotes an *analogy* of the preceding information. Often I will attempt to link concepts to others that I have previously learned.\n- `mn:` - Denotes a *mnemonic*\n- `expl:` - Denotes an *explanation*\n\n## Resources\n### UE (Unexamined) Resources\nOften, I come across sources of information that I believe to be high-quality. They may be recommendations or found in some other way. No matter their origin, I may be in a position where I don't have the time to fully examine them (and properly extract notes), or I may not require the information at that moment in time. In cases like these, I will add reference to a section of the note called **UE Resources**. The idea is that in the future when I am ready to examine them, I have a list of resources that I can start with. This is an alternative strategy to compiling browser bookmarks, which I've found can quickly become untenable.\n\n### E (Examined) Resources\nOnce a resource has been thoroughly examined and has been mined for notes, it will be moved from *UE Resources* to *E Resources*. This is to indicate that (in my own estimation), there is nothing more to be gained from the resource that is not already in the note.\n\n### Resources\nThis heading is for inexhaustible resources. \n- A prime example would be a quality website that continually posts articles.  - Another example would be a tool, such as software that measures frequencies in a room to help acoustically treat it.\n"},"collectionChildren":null,"customHeadContent":null,"config":{"version":5,"dev":{"enablePreviewV2":true},"commands":{"lookup":{"note":{"selectionMode":"extract","confirmVaultOnCreate":false,"leaveTrace":false,"bubbleUpCreateNew":true,"fuzzThreshold":0.2,"vaultSelectionModeOnCreate":"smart"}},"insertNote":{"initialValue":"templates"},"insertNoteLink":{"aliasMode":"none","enableMultiSelect":false},"insertNoteIndex":{"enableMarker":false},"randomNote":{},"copyNoteLink":{"aliasMode":"title"},"templateHierarchy":"template"},"workspace":{"dendronVersion":"0.83.0","vaults":[{"fsPath":"../main/tech","name":"tech"}],"journal":{"dailyDomain":"daily","name":"journal","dateFormat":"y.MM.dd","addBehavior":"childOfDomain"},"scratch":{"name":"scratch","dateFormat":"y.MM.dd.HHmmss","addBehavior":"asOwnDomain"},"graph":{"zoomSpeed":1,"createStub":false},"enableAutoCreateOnDefinition":false,"enableXVaultWikiLink":false,"enableRemoteVaultInit":true,"workspaceVaultSyncMode":"noCommit","enableAutoFoldFrontmatter":true,"maxPreviewsCached":10,"maxNoteLength":204800,"task":{"name":"","dateFormat":"","addBehavior":"childOfCurrent","statusSymbols":{"":" ","wip":"w","done":"x","assigned":"a","moved":"m","blocked":"b","delegated":"l","dropped":"d","pending":"y"},"prioritySymbols":{"H":"high","M":"medium","L":"low"},"todoIntegration":false,"createTaskSelectionType":"selection2link","taskCompleteStatus":["done","x"]},"enableUserTags":true,"enableHashTags":true,"enableEditorDecorations":true,"enableFullHierarchyNoteTitle":false},"preview":{"enableFMTitle":true,"enableNoteTitleForLink":true,"enableMermaid":true,"enablePrettyRefs":true,"enableKatex":true,"automaticallyShowPreview":false,"enableFrontmatterTags":true,"enableHashesForFMTags":false},"publishing":{"enableFMTitle":true,"enableNoteTitleForLink":true,"enablePrettyRefs":true,"enableKatex":true,"copyAssets":true,"siteHierarchies":["root"],"writeStubs":false,"siteRootDir":"docs","seo":{"title":"Dendron","description":"The Tech Digital Garden of Kyle Tycholiz"},"github":{"cname":"tech.kyletycholiz.com","enableEditLink":true,"editLinkText":"Edit this page on GitHub","editBranch":"master","editViewMode":"tree"},"enableSiteLastModified":true,"enableFrontmatterTags":true,"enableHashesForFMTags":false,"enableRandomlyColoredTags":true,"enableTaskNotes":true,"enablePrettyLinks":true,"searchMode":"lookup","enableMermaid":true,"siteUrl":"https://tech.kyletycholiz.com","duplicateNoteBehavior":{"action":"useVault","payload":["tech"]},"siteFaviconPath":"favicon.ico","siteIndex":"root"}}},"__N_SSG":true}