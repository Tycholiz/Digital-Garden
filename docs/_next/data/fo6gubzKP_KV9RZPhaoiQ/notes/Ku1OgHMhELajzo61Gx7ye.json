{"pageProps":{"note":{"id":"Ku1OgHMhELajzo61Gx7ye","title":"Terraform","desc":"","updated":1657235291989,"created":1637797305761,"custom":{},"fname":"terraform","type":"note","vault":{"fsPath":"../main/tech","name":"tech"},"contentHash":"db8f067f9da7f4ff9c1080b63b4c6e24","links":[{"type":"wiki","from":{"fname":"terraform","id":"Ku1OgHMhELajzo61Gx7ye","vaultName":"tech"},"value":"deploy.IaC","alias":"IaC","position":{"start":{"line":3,"column":31,"offset":46},"end":{"line":3,"column":49,"offset":64},"indent":[]},"xvault":false,"sameFile":false,"to":{"fname":"deploy.IaC"}},{"type":"wiki","from":{"fname":"terraform","id":"Ku1OgHMhELajzo61Gx7ye","vaultName":"tech"},"value":"terraform.cli","position":{"start":{"line":15,"column":1,"offset":647},"end":{"line":15,"column":18,"offset":664},"indent":[]},"xvault":false,"sameFile":false,"to":{"fname":"terraform.cli"}},{"type":"ref","from":{"fname":"terraform","id":"Ku1OgHMhELajzo61Gx7ye","vaultName":"tech"},"value":"terraform.provider","position":{"start":{"line":19,"column":1,"offset":694},"end":{"line":19,"column":37,"offset":730},"indent":[]},"xvault":false,"to":{"fname":"terraform.provider","anchorHeader":"summary,1:#*"}},{"type":"ref","from":{"fname":"terraform","id":"Ku1OgHMhELajzo61Gx7ye","vaultName":"tech"},"value":"terraform.resource","position":{"start":{"line":22,"column":1,"offset":745},"end":{"line":22,"column":37,"offset":781},"indent":[]},"xvault":false,"to":{"fname":"terraform.resource","anchorHeader":"summary,1:#*"}},{"type":"ref","from":{"fname":"terraform","id":"Ku1OgHMhELajzo61Gx7ye","vaultName":"tech"},"value":"terraform.module","position":{"start":{"line":25,"column":1,"offset":794},"end":{"line":25,"column":35,"offset":828},"indent":[]},"xvault":false,"to":{"fname":"terraform.module","anchorHeader":"summary,1:#*"}},{"type":"ref","from":{"fname":"terraform","id":"Ku1OgHMhELajzo61Gx7ye","vaultName":"tech"},"value":"terraform.data-source","position":{"start":{"line":28,"column":1,"offset":846},"end":{"line":28,"column":40,"offset":885},"indent":[]},"xvault":false,"to":{"fname":"terraform.data-source","anchorHeader":"summary,1:#*"}},{"type":"ref","from":{"fname":"terraform","id":"Ku1OgHMhELajzo61Gx7ye","vaultName":"tech"},"value":"terraform.variables","position":{"start":{"line":35,"column":1,"offset":1019},"end":{"line":35,"column":25,"offset":1043},"indent":[]},"xvault":false,"to":{"fname":"terraform.variables"}},{"type":"ref","from":{"fname":"terraform","id":"Ku1OgHMhELajzo61Gx7ye","vaultName":"tech"},"value":"terraform.state","position":{"start":{"line":38,"column":1,"offset":1055},"end":{"line":38,"column":21,"offset":1075},"indent":[]},"xvault":false,"to":{"fname":"terraform.state"}},{"from":{"fname":"aws.CDK","id":"KutlqQVGLBAdLTslz3D9A","vaultName":"tech"},"type":"backlink","position":{"start":{"line":5,"column":26,"offset":189},"end":{"line":5,"column":39,"offset":202},"indent":[]},"value":"terraform"},{"from":{"fname":"devops.IaC","id":"7Hd68M5niADEkip4CdU85","vaultName":"tech"},"type":"backlink","position":{"start":{"line":19,"column":3,"offset":1025},"end":{"line":19,"column":26,"offset":1048},"indent":[]},"value":"terraform"},{"from":{"fname":"terraform.terragrunt","id":"C84fC8TYNY902iA8f7nCD","vaultName":"tech"},"type":"backlink","position":{"start":{"line":2,"column":32,"offset":32},"end":{"line":2,"column":45,"offset":45},"indent":[]},"value":"terraform"},{"from":{"fname":"aws.svc.cloud-formation","id":"NbGOJJpZuEbf0hXs2UvAB","vaultName":"tech"},"type":"backlink","position":{"start":{"line":15,"column":53,"offset":855},"end":{"line":15,"column":76,"offset":878},"indent":[]},"value":"terraform"},{"from":{"fname":"aws.svc.lambda","id":"OSdV9FvBG3wDbRNLllg0V","vaultName":"tech"},"type":"backlink","position":{"start":{"line":105,"column":108,"offset":6156},"end":{"line":105,"column":131,"offset":6179},"indent":[]},"value":"terraform"},{"from":{"fname":"aws.svc.sam","id":"tn4qi4x8bodysdvtd5rq0f4","vaultName":"tech"},"type":"backlink","position":{"start":{"line":45,"column":57,"offset":2113},"end":{"line":45,"column":80,"offset":2136},"indent":[]},"value":"terraform"},{"from":{"fname":"aws.svc.xray","id":"begrl6j3rxln3bcsz87ornn","vaultName":"tech"},"type":"backlink","position":{"start":{"line":9,"column":54,"offset":844},"end":{"line":9,"column":67,"offset":857},"indent":[]},"value":"terraform"},{"from":{"fname":"devops.IaC.gitops","id":"lBasXzi1eHzGwL2pEuOv8","vaultName":"tech"},"type":"backlink","position":{"start":{"line":39,"column":78,"offset":3548},"end":{"line":39,"column":101,"offset":3571},"indent":[]},"value":"terraform"}],"anchors":{"what-is-it":{"type":"header","text":"What is it?","value":"what-is-it","line":8,"column":0,"depth":2},"provisioning-workflow":{"type":"header","text":"Provisioning Workflow","value":"provisioning-workflow","line":18,"column":0,"depth":2},"terminology":{"type":"header","text":"Terminology","value":"terminology","line":23,"column":0,"depth":2},"provider":{"type":"header","text":"Provider","value":"provider","line":24,"column":0,"depth":3},"resource":{"type":"header","text":"Resource","value":"resource","line":27,"column":0,"depth":3},"module":{"type":"header","text":"Module","value":"module","line":30,"column":0,"depth":3},"data-source":{"type":"header","text":"Data source","value":"data-source","line":33,"column":0,"depth":3},"local":{"type":"header","text":"Local","value":"local","line":36,"column":0,"depth":3},"variable":{"type":"header","text":"Variable","value":"variable","line":40,"column":0,"depth":3},"state":{"type":"header","text":"State","value":"state","line":43,"column":0,"depth":3},"workspaces":{"type":"header","text":"Workspaces","value":"workspaces","line":46,"column":0,"depth":3},"cli":{"type":"header","text":"CLI","value":"cli","line":56,"column":0,"depth":4},"terraform-cloud":{"type":"header","text":"Terraform Cloud","value":"terraform-cloud","line":61,"column":0,"depth":3},"lifecycle":{"type":"header","text":"Lifecycle","value":"lifecycle","line":69,"column":0,"depth":3},"provisioner":{"type":"header","text":"Provisioner","value":"provisioner","line":82,"column":0,"depth":3},"misc":{"type":"header","text":"Misc","value":"misc","line":89,"column":0,"depth":2},"multi-line-string":{"type":"header","text":"Multi-line string","value":"multi-line-string","line":90,"column":0,"depth":3},"outputting-to-console-stdout":{"type":"header","text":"Outputting to console (stdout)","value":"outputting-to-console-stdout","line":118,"column":0,"depth":3},"folder-structure":{"type":"header","text":"Folder structure","value":"folder-structure","line":132,"column":0,"depth":3},"tools":{"type":"header","text":"Tools","value":"tools","line":143,"column":0,"depth":2},"alternatives":{"type":"header","text":"Alternatives","value":"alternatives","line":148,"column":0,"depth":2}},"children":["Ky3O7oxftnwQbcZlZ0nEe","mO2rzcwfMls7YDt3r3iGX","zSuIFLNNKKEtLtwhe8nez","0aidQMXuED5nPrEAqPSwg","Nt5U2FxZNGStbEcYYBjKE","NsY5hHUmyMhwB61BfihyD","C84fC8TYNY902iA8f7nCD","456RSqs23EDalVWwggIy1"],"parent":"olZIVfSs2uLLr3BppFh4K","data":{}},"body":"<h1 id=\"terraform\">Terraform<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#terraform\"></a></h1>\n<h2 id=\"what-is-it\">What is it?<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#what-is-it\"></a></h2>\n<p>Terraform is a cloud-agnostic <a title=\"Private\" href=\"https://wiki.dendron.so/notes/hfyvYGJZQiUwQaaxQO27q.html\" target=\"_blank\" class=\"private\">IaC (Private)</a> solution.</p>\n<p>Terraform is split into two parts:</p>\n<ul>\n<li>One part is the Terraform engine, which understands... \n<ul>\n<li>how to read state from a provider</li>\n<li>read HCL code</li>\n<li>how to get from the state your infrastructure is currently into the state you want your infrastructure to be in.</li>\n</ul>\n</li>\n<li>The other part is the provider, which talks to the infrastructure to find out the current state and make changes using the infrastructure’s API.</li>\n</ul>\n<h2 id=\"provisioning-workflow\">Provisioning Workflow<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#provisioning-workflow\"></a></h2>\n<p>There are 3 main CLI commands that involve creating, modifying and destroying infrastructure: <code>plan</code>, <code>apply</code> and <code>destroy</code>.</p>\n<p><a href=\"/notes/Ky3O7oxftnwQbcZlZ0nEe\">Terraform CLI</a></p>\n<h2 id=\"terminology\">Terminology<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#terminology\"></a></h2>\n<h3 id=\"provider\">Provider<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#provider\"></a></h3>\n<p></p><p></p><div class=\"portal-container\">\n<div class=\"portal-head\">\n<div class=\"portal-backlink\">\n<div class=\"portal-title\">From <span class=\"portal-text-title\">Provider</span></div>\n<a href=\"/notes/0aidQMXuED5nPrEAqPSwg\" class=\"portal-arrow\">Go to text <span class=\"right-arrow\">→</span></a>\n</div>\n</div>\n<div id=\"portal-parent-anchor\" class=\"portal-parent\" markdown=\"1\">\n<div class=\"portal-parent-fader-top\"></div>\n<div class=\"portal-parent-fader-bottom\"></div><p>A provider is a connection that allows Terraform to manage infrastructure using an interface (e.g. AWS API)</p>\n</div></div><p></p><p></p>\n<h3 id=\"resource\">Resource<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#resource\"></a></h3>\n<p></p><p></p><div class=\"portal-container\">\n<div class=\"portal-head\">\n<div class=\"portal-backlink\">\n<div class=\"portal-title\">From <span class=\"portal-text-title\">Resource</span></div>\n<a href=\"/notes/Nt5U2FxZNGStbEcYYBjKE\" class=\"portal-arrow\">Go to text <span class=\"right-arrow\">→</span></a>\n</div>\n</div>\n<div id=\"portal-parent-anchor\" class=\"portal-parent\" markdown=\"1\">\n<div class=\"portal-parent-fader-top\"></div>\n<div class=\"portal-parent-fader-bottom\"></div><p>A resource represents a piece of real world infrastructure </p>\n<p>Examples:</p>\n<ul>\n<li>an S3 bucket</li>\n<li>an EKS (Elastic Kubernetes) cluster</li>\n<li>a Postgres <a href=\"/notes/WRqfLQI6kPDa2M8aIurYo\">role</a></li>\n</ul>\n</div></div><p></p><p></p>\n<h3 id=\"module\">Module<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#module\"></a></h3>\n<p></p><p></p><div class=\"portal-container\">\n<div class=\"portal-head\">\n<div class=\"portal-backlink\">\n<div class=\"portal-title\">From <span class=\"portal-text-title\">Module</span></div>\n<a href=\"/notes/zSuIFLNNKKEtLtwhe8nez\" class=\"portal-arrow\">Go to text <span class=\"right-arrow\">→</span></a>\n</div>\n</div>\n<div id=\"portal-parent-anchor\" class=\"portal-parent\" markdown=\"1\">\n<div class=\"portal-parent-fader-top\"></div>\n<div class=\"portal-parent-fader-bottom\"></div><p>A Terraform module is a set of Terraform configuration files in a single directory that can be considered its own standalone Terraform project.</p>\n<ul>\n<li>it can therefore...\n<ul>\n<li>contain its own resources, data sources, locals, etc.</li>\n<li>take variables (ie. inputs on a per-module basis)</li>\n</ul>\n</li>\n</ul>\n</div></div><p></p><p></p>\n<h3 id=\"data-source\">Data source<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#data-source\"></a></h3>\n<p></p><p></p><div class=\"portal-container\">\n<div class=\"portal-head\">\n<div class=\"portal-backlink\">\n<div class=\"portal-title\">From <span class=\"portal-text-title\">Data Source</span></div>\n<a href=\"/notes/mO2rzcwfMls7YDt3r3iGX\" class=\"portal-arrow\">Go to text <span class=\"right-arrow\">→</span></a>\n</div>\n</div>\n<div id=\"portal-parent-anchor\" class=\"portal-parent\" markdown=\"1\">\n<div class=\"portal-parent-fader-top\"></div>\n<div class=\"portal-parent-fader-bottom\"></div><p>A data source is used to fetch data from a resource that is not managed by the current Terraform project.</p>\n<ul>\n<li>think of it as a read-only resource that already exists</li>\n</ul>\n</div></div><p></p><p></p>\n<h3 id=\"local\">Local<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#local\"></a></h3>\n<p>A <code>local</code> is Terraform's representation of a variable.</p>\n<ul>\n<li>note: not to be confused with Terraform variables.</li>\n</ul>\n<h3 id=\"variable\">Variable<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#variable\"></a></h3>\n<p></p><p></p><div class=\"portal-container\">\n<div class=\"portal-head\">\n<div class=\"portal-backlink\">\n<div class=\"portal-title\">From <span class=\"portal-text-title\">Variables</span></div>\n<a href=\"/notes/456RSqs23EDalVWwggIy1\" class=\"portal-arrow\">Go to text <span class=\"right-arrow\">→</span></a>\n</div>\n</div>\n<div id=\"portal-parent-anchor\" class=\"portal-parent\" markdown=\"1\">\n<div class=\"portal-parent-fader-top\"></div>\n<div class=\"portal-parent-fader-bottom\"></div><p>A variable is set at runtime, allowing us to vary Terraform's behaviour. </p>\n<ul>\n<li>Therefore, if Terraform were a function, a variable would be an input to the function.</li>\n<li>note: not to be confused with <code>locals</code>, which themselves are actually more like variables as used in general programming</li>\n</ul>\n<pre class=\"language-hcl\"><code class=\"language-hcl\"><span class=\"token keyword\">variable<span class=\"token type variable\"> \"bucket_name\" </span></span><span class=\"token punctuation\">{</span>\n    <span class=\"token property\">type</span> <span class=\"token punctuation\">=</span> string\n    <span class=\"token comment\"># describe what this variable is used for</span>\n    <span class=\"token property\">description</span> <span class=\"token punctuation\">=</span> <span class=\"token string\">\"the name of the bucket we are creating\"</span>\n    <span class=\"token property\">default</span> <span class=\"token punctuation\">=</span> <span class=\"token string\">\"default_bucket_name\"</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">resource <span class=\"token type variable\">\"aws_s3_bucket\"</span></span> <span class=\"token string\">\"bucket\"</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">bucket</span> <span class=\"token punctuation\">=</span> var.bucket_name\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>Variables can be more complex too:</p>\n<pre class=\"language-tfvars\"><code class=\"language-tfvars\">instance_map = {\n    dev = \"t3.small\"\n    test = \"t3.medium\"\n    prod = \"t3.large\"\n}\n\nenvironment_type = \"dev\"\n</code></pre>\n<p>And referenced like:</p>\n<pre class=\"language-hcl\"><code class=\"language-hcl\"><span class=\"token keyword\">variable<span class=\"token type variable\"> \"instance_map\" </span></span><span class=\"token punctuation\">{</span>\n    <span class=\"token property\">type</span> <span class=\"token punctuation\">=</span> map(string)\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">variable<span class=\"token type variable\"> \"environment_type\" </span></span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">output<span class=\"token type variable\"> \"selected_instance\" </span></span><span class=\"token punctuation\">{</span>\n    <span class=\"token property\">value</span> <span class=\"token punctuation\">=</span> var.instance_map<span class=\"token punctuation\">[</span>var.environment_type<span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h4 id=\"types\">Types<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#types\"></a></h4>\n<ul>\n<li><code>string</code></li>\n<li><code>bool</code></li>\n<li><code>number</code></li>\n<li><code>list(&#x3C;TYPE>)</code></li>\n<li><code>set(&#x3C;TYPE>)</code>\n<ul>\n<li>each value is unique</li>\n</ul>\n</li>\n<li><code>map(&#x3C;TYPE>)</code></li>\n<li><code>object()</code>\n<ul>\n<li>like a map, but values can be different types</li>\n</ul>\n</li>\n<li><code>tuple([&#x3C;TYPE>, …])</code>\n<ul>\n<li>number of values and order is preserved</li>\n</ul>\n</li>\n<li><code>any</code>\n<ul>\n<li>unlike <code>any</code> type from <a href=\"/notes/S2sBltrPfd8a7ICuD7CuH\">Typescript</a>; this <code>any</code> allows Terraform to infer based on the actual value.</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"providing-variables-4-ways\">Providing variables (4 ways)<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#providing-variables-4-ways\"></a></h4>\n<ol>\n<li>\n<p>When we run <code>terraform init</code> and <code>terraform apply</code>, we will be prompted to provide a value for the variable(s).</p>\n</li>\n<li>\n<p>pass the value with:</p>\n</li>\n</ol>\n<pre class=\"language-sh\"><code class=\"language-sh\">terraform apply -var bucket_name=my_bucket\n</code></pre>\n<ol start=\"3\">\n<li><code>export</code> environment variables in the terminal prefixed with <code>TF_VAR_</code>:</li>\n</ol>\n<pre class=\"language-sh\"><code class=\"language-sh\">export TF_VAR_bucket_name=my_bucket\n</code></pre>\n<ol start=\"4\">\n<li>create a <code>terraform.tfvars</code> file (or <code>&#x3C;ANYNAME>.auto.tfvars</code>):</li>\n</ol>\n<pre class=\"language-tfvars\"><code class=\"language-tfvars\">bucket_name = \"my_bucket\"\n</code></pre></div></div><p></p><p></p>\n<h3 id=\"state\">State<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#state\"></a></h3>\n<p></p><p></p><div class=\"portal-container\">\n<div class=\"portal-head\">\n<div class=\"portal-backlink\">\n<div class=\"portal-title\">From <span class=\"portal-text-title\">State</span></div>\n<a href=\"/notes/NsY5hHUmyMhwB61BfihyD\" class=\"portal-arrow\">Go to text <span class=\"right-arrow\">→</span></a>\n</div>\n</div>\n<div id=\"portal-parent-anchor\" class=\"portal-parent\" markdown=\"1\">\n<div class=\"portal-parent-fader-top\"></div>\n<div class=\"portal-parent-fader-bottom\"></div><p>State is the place where Terraform stores of all of the resources (and their metadata) it has created.</p>\n<ul>\n<li>run <code>terraform state list</code> to see all resources existing in state.</li>\n</ul>\n<p>This state is used by Terraform to work out how changes need to be made.</p>\n<p>State is stored in <code>terraform.tfstate</code></p>\n<p>If we want to move resource creation from one project to another, state needs to be manipulated directly </p>\n<ul>\n<li>\n<p>this can be handled by (example uses a AWS VPC resource)</p>\n<ol>\n<li>running <code>terraform state rm aws_vpc.my_vpc</code> command, which will remove the resource from state (so Terraform is no longer managing it), but will not delete the resource in the cloud.</li>\n<li>in the new project, copy+paste over the resource and run <code>terraform import aws_vpc.my_pc &#x3C;VPC_ID></code></li>\n<li>run <code>terraform apply</code></li>\n</ol>\n</li>\n<li>\n<p>some resources do not support <code>import</code>. In this case, use <code>terraform state mv</code></p>\n</li>\n</ul>\n<h3 id=\"remote-state\">Remote state<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#remote-state\"></a></h3>\n<p>Multiple people working on the same Terraform project can introduce a lot of complexity, since a local state file is used to store a record of what has been created. If we run terraform commands on a second machine, it will try to create double the resources.</p>\n<ul>\n<li>to get around this issue, we can store state in a remote location (e.g. in an S3 bucket)</li>\n</ul>\n<p>We specify the remote state location using the <code>backend</code> keyword. Here we are using an S3 bucket:</p>\n<pre class=\"language-tf\"><code class=\"language-tf\"># state.tf\nbackend \"s3\" {\n    bucket = \"&#x3C;bucket-name>\"\n    key = \"my-project.state\"\n    region = \"us-west-1\"\n}\n</code></pre>\n<p>The remote state backend needs to support \"locking\", which prevents changes to the state while Terraform commands are running.</p>\n<p>A good idea is to use S3 bucket versioning so we can time travel through different Terraform states.</p></div></div><p></p><p></p>\n<h3 id=\"workspaces\">Workspaces<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#workspaces\"></a></h3>\n<p>Workspaces solve the problem \"how do we create multiple environments using the same code?\"</p>\n<p><code>terraform.workspace</code> is a special variable that resolves to the current workspace we are running in.</p>\n<p>Unless we explicitly specify, we are running in the <code>default</code> workspace.</p>\n<p>Local workspaces are stored in <code>terraform.tfstate.d/</code></p>\n<ul>\n<li>each workspace has its own state</li>\n</ul>\n<h4 id=\"cli\">CLI<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#cli\"></a></h4>\n<ul>\n<li>List workspaces -  <code>terraform workspaces list</code></li>\n<li>Create new workspace - <code>terraform workspace new development</code></li>\n<li>Switch workspaces - <code>terraform workspace select development</code></li>\n</ul>\n<h3 id=\"terraform-cloud\">Terraform Cloud<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#terraform-cloud\"></a></h3>\n<p>Terraform cloud provides us with a method to change our input variables at the top level, meaning each set of infra (for each environment) can have its own set of variables.</p>\n<p>With it, we:</p>\n<ol>\n<li>create a workspace </li>\n<li>point it at a source control repo containing your Terraform code</li>\n<li>set the variables for that workspace</li>\n</ol>\n<h3 id=\"lifecycle\">Lifecycle<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#lifecycle\"></a></h3>\n<p>Each resource has a special attribute block called <code>lifecycle</code> that gives us extra control.</p>\n<p>It allows us to:</p>\n<ul>\n<li><code>create_before_destroy</code>, to ensure a new resource is created prior to deleting the old one</li>\n<li><code>prevent_destroy</code>, to prevent Terraform from ever deleting the resource, so long as the property exists</li>\n</ul>\n<pre class=\"language-tf\"><code class=\"language-tf\">lifecycle {\n  prevent_destroy = true\n}\n</code></pre>\n<h3 id=\"provisioner\">Provisioner<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#provisioner\"></a></h3>\n<p>Provisioners allow us to run a script (remotely or locally) after a resource has been created.</p>\n<ul>\n<li>provisioners allow us to step in and solve problems ourselves when they are not solved out of the box by the provider we are using.</li>\n<li>because provisioners are imperative, they are seen as a last resort approach to solving our problem.</li>\n</ul>\n<hr>\n<h2 id=\"misc\">Misc<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#misc\"></a></h2>\n<h3 id=\"multi-line-string\">Multi-line string<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#multi-line-string\"></a></h3>\n<p>Multi-line strings are declared between <code>&#x3C;&#x3C;ANYWORD</code> and <code>ANYWORD</code>:</p>\n<pre class=\"language-tf\"><code class=\"language-tf\">resource \"aws_iam_policy\" \"my_bucket_policy\" {\n    name = \"my-bucket-policy\"\n\n    policy = &#x3C;&#x3C;POLICY\n    {\n        \"Version\": \"2012-10-17\",\n        \"Statement\": [\n            {\n                \"Action\": [\n                    \"s3:ListBucket\"\n                ],\n                \"Effect\": \"Allow\",\n                \"Resource\": [\n                    \"${data.aws_s3_bucket.bucket.arn}\"\n                ]\n            }\n        ]\n    }\n    POLICY\n}\n</code></pre>\n<p>String interpolation (<code>${interpolated_value}</code>) can be used inside a multi-line string.</p>\n<ul>\n<li>only needed when inside quotes (<code>\"\"</code>)</li>\n</ul>\n<h3 id=\"outputting-to-console-stdout\">Outputting to console (stdout)<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#outputting-to-console-stdout\"></a></h3>\n<pre class=\"language-tf\"><code class=\"language-tf\">output \"message\" {\n    value = aws_s3_bucket.my_bucket.id\n}\n</code></pre>\n<p>or we can print all attributes exported by a resource:</p>\n<pre class=\"language-tf\"><code class=\"language-tf\">output \"all\" {\n    aws_s3_bucket.my_bucket\n}\n</code></pre>\n<h3 id=\"folder-structure\">Folder structure<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#folder-structure\"></a></h3>\n<p>All Terraform files should be in a single directory (the Terraform project) at the top level. Any files within subdirectories will be ignored. Conceptually, when we run Terraform commands, everything will be appended into a single file anyway.</p>\n<ul>\n<li>child directories are used to set up Modules</li>\n</ul>\n<p>By convention,</p>\n<ul>\n<li>set up providers in <code>main.tf</code>.</li>\n<li>resources named after their type (e.g. <code>sqs.tf</code>, <code>api-gateway.tf</code>)</li>\n<li>variables in <code>variables.tf</code></li>\n</ul>\n<hr>\n<h2 id=\"tools\">Tools<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#tools\"></a></h2>\n<ul>\n<li><a href=\"https://www.runatlantis.io/\">Atlantis</a> - Pull Request automation for Terraform\n<ul>\n<li>purpose is to have improved code review for infra changes.</li>\n</ul>\n</li>\n<li>Terratest - a unit testing framework for Terraform</li>\n</ul>\n<h2 id=\"alternatives\">Alternatives<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#alternatives\"></a></h2>\n<ul>\n<li>Chef/Puppet - these are configuration management tools. They are designed to configure and manage the already existing infrastructure, while Terraform is designed to set up the infrastructre itself.\n<ul>\n<li>In other words, Puppet and Chef would be used to configure servers, while Terraform would be used to create the server itself.</li>\n</ul>\n</li>\n<li>Pulumi - This IaC tool uses a programming language (like Typescript) instead of a configuration language.</li>\n</ul>\n<hr>\n<strong>Children</strong>\n<ol>\n<li><a href=\"/notes/mO2rzcwfMls7YDt3r3iGX\">Data Source</a></li>\n<li><a href=\"/notes/zSuIFLNNKKEtLtwhe8nez\">Module</a></li>\n<li><a href=\"/notes/0aidQMXuED5nPrEAqPSwg\">Provider</a></li>\n<li><a href=\"/notes/Nt5U2FxZNGStbEcYYBjKE\">Resource</a></li>\n<li><a href=\"/notes/NsY5hHUmyMhwB61BfihyD\">State</a></li>\n<li><a href=\"/notes/Ky3O7oxftnwQbcZlZ0nEe\">Terraform CLI</a></li>\n<li><a href=\"/notes/C84fC8TYNY902iA8f7nCD\">Terragrunt</a></li>\n<li><a href=\"/notes/456RSqs23EDalVWwggIy1\">Variables</a></li>\n</ol>\n<hr>\n<strong>Backlinks</strong>\n<ul>\n<li><a href=\"/notes/KutlqQVGLBAdLTslz3D9A\">CDK</a></li>\n<li><a href=\"/notes/7Hd68M5niADEkip4CdU85\">IaC (Infrastructure-as-Code)</a></li>\n<li><a href=\"/notes/C84fC8TYNY902iA8f7nCD\">Terragrunt</a></li>\n<li><a href=\"/notes/NbGOJJpZuEbf0hXs2UvAB\">CloudFormation</a></li>\n<li><a href=\"/notes/OSdV9FvBG3wDbRNLllg0V\">AWS Lambda</a></li>\n<li><a href=\"/notes/tn4qi4x8bodysdvtd5rq0f4\">SAM</a></li>\n<li><a href=\"/notes/begrl6j3rxln3bcsz87ornn\">Xray</a></li>\n<li><a href=\"/notes/lBasXzi1eHzGwL2pEuOv8\">GitOps</a></li>\n</ul>","noteIndex":{"id":"olZIVfSs2uLLr3BppFh4K","title":"Digital Garden","desc":"","updated":1674517603573,"created":1615482407722,"custom":{"nav_order":0,"permalink":"/"},"fname":"root","type":"note","vault":{"fsPath":"../main/tech","name":"tech"},"contentHash":"effb007003ca6a91d7fd0c293e1d2436","links":[{"type":"wiki","from":{"fname":"root","id":"olZIVfSs2uLLr3BppFh4K","vaultName":"tech"},"value":"testing.method.unit","alias":"unit testing","position":{"start":{"line":18,"column":121,"offset":1146},"end":{"line":18,"column":157,"offset":1182},"indent":[]},"xvault":false,"sameFile":false,"to":{"fname":"testing.method.unit"}},{"type":"wiki","from":{"fname":"root","id":"olZIVfSs2uLLr3BppFh4K","vaultName":"tech"},"value":"general.arch.microservice","alias":"microservices","position":{"start":{"line":18,"column":188,"offset":1213},"end":{"line":18,"column":231,"offset":1256},"indent":[]},"xvault":false,"sameFile":false,"to":{"fname":"general.arch.microservice"}},{"type":"wiki","from":{"fname":"root","id":"olZIVfSs2uLLr3BppFh4K","vaultName":"tech"},"value":"paradigm.oop","alias":"OOP","position":{"start":{"line":36,"column":227,"offset":2718},"end":{"line":36,"column":247,"offset":2738},"indent":[]},"xvault":false,"sameFile":false,"to":{"fname":"paradigm.oop"}}],"anchors":{"tags":{"type":"header","text":"Tags","value":"tags","line":46,"column":0,"depth":3},"resources":{"type":"header","text":"Resources","value":"resources","line":55,"column":0,"depth":2},"ue-unexamined-resources":{"type":"header","text":"UE (Unexamined) Resources","value":"ue-unexamined-resources","line":56,"column":0,"depth":3},"e-examined-resources":{"type":"header","text":"E (Examined) Resources","value":"e-examined-resources","line":59,"column":0,"depth":3},"resources-1":{"type":"header","text":"Resources","value":"resources-1","line":62,"column":0,"depth":3}},"children":["40ubf88tephzbdjte8cdsa0","zFMjbn3xihVNHjUIdZCD1","IK6NOKemuDjhfstJBovKL","ZaTr28eWk1DrXOEsc1YVb","Vi0WYVLZunVM9iR8XZJn3","ngAbg7gluvbt1bY1UIRsi","RCPPXSakm5TvKka8kOmVp","LIcuGYV0DDt1VWbvH6Sed","MPx8ykTP57I40WTZvTP7f","ZU5WmdTG1bHoE8RcmZXZG","jqWiyYJff92RjXuUQt9PQ","KihijM8OQvZ4pASkkhqzL","F9vyqvls3OBCujtukqKhy","k6jxm2b3edgkhbordpuz6v1","facc2b01-755a-409f-99f6-57bef2d1501f","bZumdyapJ2H0wWWOmJ45i","elqpgoe2r951si4xrhujppj","m5ov42Vm6mR7RQWTvl1NW","cw8cerc0cos8lh871oz8rtf","PZxxZ4iESzSlbbHJKxuAZ","UDu62Pa6BaRqlG8uGoMhy","u3zcndycwqessho5h6x0nz9","ZgCUp366YrF2Tyky2NT73","DVpVUmavSoVDA7UIlPzLX","nMCtMXVvjBsJk3iw1zoIO","ANfx9Z4a6ZA0uJuSHtbIJ","BkG557LKUYbH1DnxprEVT","1TaH8zDTM98FZ9SYaeXLM","02v7ymc144e5c4pv3edkud7","dc79799f-a55d-48ab-a8be-c48adb1b19c0","f6feef57-b8f5-451f-a09a-7b63f6a07183","4sz47Y0LKs1Si73rWtyyh","g7ulqi8no93ezeocbesc3ll","5a9fb1df-478e-4687-9be0-5cb97e61ec57","1374e9e9-1cbc-4e1f-b1ca-66b8569533dd","D8Z3rjXkSj2EOymXQXF4Z","np3c1ykvnjqv5xoombpfwqz","f529cc34-aba0-45ca-ad7e-02ddda318941","0zcauha3il2NqtxZazIo7","9bbd6f68-03b2-41f4-92e4-2ca313e8b450","5a2ab598-fa7e-4471-8bda-9f5831b679ae","uV6w4mZPoohWyZV4Xaad0","QHXEIyeZGIGMVi5Q52UWI","RgE0mZLaUjPftFPZsiAoe","mytCOts26Pidush65tdRW","fwUzxfLSPMH1eL8oBoLWx","wazdsda6h25x66edvfmeuiv","TbW7PM9bg1y5TGkiWwQ8b","xiSIDeEtIc8X0lpUQlppI","0jxgntiLNHWFuCbzqtFGF","GkdMprLUe4QQULBxmGN6V","4SYc6v5hxY5g6Ip6kjpwO","czi7ilt2i1uoqm1f2otbntj","fqVQpS9FBiXgKsZX3R3sJ","L5JUZlGAGvTxrsEBB7DY8","ttyri4pwfyn5lcx0vp9804o","TeTedoeS2LdHPR632eCpM","ulicRRwo3lSFzh3tMfWH9","p7d24vyb8m00ombzn34t50c","e65188a1-177e-4ab2-99f9-75f85d537621","fajYnbVhCRDi74xn0H30R","bArGdGwqo3iFkyKMyE7qR","4Dcp7gbEVoLLgfu7bXFai","5d700782-fb81-416e-83f9-5dd88260e350","zubgzhNFE6KlTgXcjTz6O","8lpdfWa0cbSq1XJQbcYcY","2psluywdc416t7vrql0m058","17I8ZksXvqCH1mRtZDjHp","kF916Ow84qpJJeMRkWMIo","tMLkLcrIHHBz56xVmBLkP","CSePBQ6q7qhowKESqVwt7","laZ4OfLhZNK1Kuy6GaWUr","z5IJblOknQhMzZ5QZh4ye","N36FHxfxzwJfxDY3miWyX","3bb25f58-2b50-4fa3-af55-48ea9f88a081","7x07qjgbitozdfszqzuy7ix","u93Rz4fEWGu6VBR30Zraf","9hjMHnKvYT4jLKvuDSXaV","qC5GxCZBmNb4Ip6c0kU8x","LgW7mTIALODoXc54B3p6S","UYPxfHBFWX7fb6hHU5bB6","74lYtC8NKpCzcyFOZTfR1","sEoBNAEuaTxwSmTXDonZt","dj0jr9mpvs62e2pkg3zc3yy","z8ie0xjogb6ht7gzowav5xr","qxSOd6SPN8qf9ZUojVFDX","WQoMTf6VXBaxCgksXAVsj","2Mw4XgfyCHXHNOX5yoCIY","qcdt2f7jo51muquo5r95dpo","0XJqmcdtcMZu66glBI5O8","lK8r8BXS4ThiUTe4xKIZe","93de42ca-53ea-460a-baa7-b9ec5c47cb1e","Rxs2jaGpdFzqYtP7lAJFJ","aO8W81Z0PyIb6Hs7nOHPW","lhzisalkebu4w5n01np07i0","7b5l4b6fi65n7sv9org5q1l","I01hENHnh8Tqu3Ok8sLzG","03o3n0hz9v9jtb7j889zpd4","evqsPNutOaZ8hcBCqxFQu","zhhxcjZUHdU8uRLwGb9Zh","G1aFACZB2ooWGMGwyd3ZW","YWy1C4tgoaCcw1m8JJsr7","Szj3o5iaNxPpesiCqwrbu","613syb18hb3v0u1ydvor7ru","XhvCDW3fIw6h6MhY5ticq","Q70g7SusFZBQXzkuQifv4","AzfWDH3wp7jFpL2EYxBcW","y0fwpZ9qMqirsLiFyOciU","ZF8xj8wwDUqKlrwTrCFZ1","tAJvhqhdfyZZa87QHq1TU","4hRmipi8lxpBLyzWu5JVB","iTg0C7QjvnmqBZeEigJNs","3babc3d2-79ae-470a-9c06-ab8bba2e684e","bF3UsMFya3fMeXWDspVov","ULkfbL9WpktbVYnzhl6Jw","PpNOO8JYWe6dM8wruSa7x","di40pCxDn7IiqE8lFdD46","rmW0mkerqV35I8QPji6lM","3IFIK1ByzeIxZCByryGLN","iImkYAKfkw3beAl6pLbDn","ecDe8DNWrkeQTwpTEvHje","i2it5id8qwtg27n4usg8bo1","Yqhdd9mSJGN7OJOeyoSD2","Ws5tah8tpeyn9tK8VBTg8","gWAg15uBJgkS2B0wcpMAa","l7V3v2ep1YdDCt7DOr7Ci","yM2PJBdqJnHpD63cPA6sW","qn0bre7eLbi3QMbCfWkUi","fSu0KxFL41IRouotqmbHs","0gtg24Mj1a1bQFPRGQNlO","7iQPBMltLPLbFEz2qbjPu","yoh4pwoXcfELInGKRdYf6","dCGCWXgAmiOZXbdULT1m6","jMavlje07sNa6hSEIE8WA","Xxm0JE4dKHxrQAaZfzvxD","nRb6Im4Kcmc2ZWE7K1jZ1","PAEBZCyFBZJyR7OoMZ41E","PQ6km8RgRCuyICBPOYz8f","x5tm1nfjzyawwzedy3yitgd","2bhftt8rGuxYu4pFgNqru","hjYIZpHQWuXfeEoGeJEKW","K2M9bQqVq2eQfm29eslKL","X8obW1iKwYsvNgKWGyCzy","yJwSC7hqYIezTFHf5i0Ev","c4Z7ETcOHUILRMH32Sfjw","qiR6dIu857b9M9kTqjOyK","fc2coz74cnfy5czzofx4h5x","Ku1OgHMhELajzo61Gx7ye","LUrfhDWo8wuwZu7CN9TV8","osu6JGOnvXJ5gt3tpqWZY","1a6173cd-cf13-4b34-a522-8350bf9a364f","S2sBltrPfd8a7ICuD7CuH","GLQ2pmkJUNUa93THBDVsD","md6xitz4exia2joa06i490b","oWCuBXOg6JWfZzjmKxmNl","jOmhZ8ovLYTPbpM1vqSDx","p9bov84s0isgkl1ysaw93kk","FraC6xzLy1ei91l1ICyc9","6ceBas2RE9Q4787GDngH7","734cd78d-0bc9-426b-803d-1efc84dfffe5","k4Bb09px6r0FxIRs49SXV","oaG3H1S9IUBO644nGZigu","Ka7agQJkUMRSWN0uFdkWK","si3z090WsiLasMhJBa1Az","hs6rwzt4mogiicoc4gcykbi","ljKAVERmdEiKLK9hXGKBm","zxt3lhonfdhglvijd17ua8c","dd7dopve1dudqkoibkqvti4","923tgifqf59ovv5yldtyi0a","vrjwp01goqw47fqctm4f4lo","c99gdmmppju3r1tth8cb2jx","z2pvn5qxdz84zgygqzxage8"],"parent":null,"data":{},"body":"This Dendron vault of tech knowledge is organized according to domains and their sub-domains, along with specific implementation of those domains.\n\nFor instance, Git itself is a domain. Sub-domains of Git would include things like `commit`,\n`tags`, `reflog` etc. implementations of each of those could be `cli`, `strat`\n(strategies), `inner`, and so on.\n\nThe goal of the wiki is to present data in a manner that is from the perspective\nof a querying user. Here, a user is a programmer wanting to get key information\nfrom a specific domain. For instance, if a user wants to use postgres functions\nand hasn't done them in a while, they should be able to query\n`postgres.functions` to see what information is available to them.\n\nThis wiki has been written with myself in mind. While learning each of these\ndomains, I have been sensitive to the \"aha\" moments and have noted down my\ninsights as they arose. I have refrained from capturing information that I\nconsidered obvious or otherwise non-beneficial to my own understanding.\n\nAs a result, I have allowed myself to use potentially arcane concepts to explain other ones. For example, in my note on [[unit testing|testing.method.unit]], I have made reference to the [[microservices|general.arch.microservice]] note. If these notes were made with the public in mind, this would be a very bad strategy, given that you'd have to understand microservices to be able to draw that same parallel that I've already drawn. Since these notes are written for myself, I have been fine with taking these liberties.\n\nWhat I hope to gain from this wiki is the ability to step away from any\ngiven domain for a long period of time, and be able to be passably useful for\nwhatever my goals are within a short period of time. Of course this is all\nvague sounding, and really depends on the domain along with the ends I am\ntrying to reach.\n\nTo achieve this, the system should be steadfast to:\n- be able to put information in relatively easily, without too much thought\n\trequired to its location. While location is important, Dendron makes it easy\n\tto relocate notes, if it becomes apparent that a different place makes more\n\tsense.\n- be able to extract the information that is needed, meaning there is a\n\thigh-degree in confidence in the location of the information. The idea is\n\tthat information loses a large amount of its value when it is unfindable.\n\tTherefore, a relatively strict ideology should be used when determining\n\twhere a piece of information belongs.\n\t- Some concepts might realistically belong to multiple domains. For instance, the concept of *access modifiers* can be found in both `C#` and `Typescript`. Therefore, this note should be abstracted to a common place, such as [[OOP|paradigm.oop]].\n\nThis Dendron vault is the sister component to the [General Second Brain](https://tech.kyletycholiz.com).\n\n### Tags\nThroughout the garden, I have made use of tags, which give semantic meaning to the pieces of information.\n\n- `ex.` - Denotes an *example* of the preceding piece of information\n- `spec:` - Specifies that the preceding information has some degree of *speculation* to it, and may not be 100% factual. Ideally this gets clarified over time as my understanding develops.\n- `anal:` - Denotes an *analogy* of the preceding information. Often I will attempt to link concepts to others that I have previously learned.\n- `mn:` - Denotes a *mnemonic*\n- `expl:` - Denotes an *explanation*\n\n## Resources\n### UE (Unexamined) Resources\nOften, I come across sources of information that I believe to be high-quality. They may be recommendations or found in some other way. No matter their origin, I may be in a position where I don't have the time to fully examine them (and properly extract notes), or I may not require the information at that moment in time. In cases like these, I will add reference to a section of the note called **UE Resources**. The idea is that in the future when I am ready to examine them, I have a list of resources that I can start with. This is an alternative strategy to compiling browser bookmarks, which I've found can quickly become untenable.\n\n### E (Examined) Resources\nOnce a resource has been thoroughly examined and has been mined for notes, it will be moved from *UE Resources* to *E Resources*. This is to indicate that (in my own estimation), there is nothing more to be gained from the resource that is not already in the note.\n\n### Resources\nThis heading is for inexhaustible resources. \n- A prime example would be a quality website that continually posts articles.  - Another example would be a tool, such as software that measures frequencies in a room to help acoustically treat it.\n"},"collectionChildren":null,"customHeadContent":null,"config":{"version":5,"dev":{"enablePreviewV2":true},"commands":{"lookup":{"note":{"selectionMode":"extract","confirmVaultOnCreate":false,"leaveTrace":false,"bubbleUpCreateNew":true,"fuzzThreshold":0.2,"vaultSelectionModeOnCreate":"smart"}},"insertNote":{"initialValue":"templates"},"insertNoteLink":{"aliasMode":"none","enableMultiSelect":false},"insertNoteIndex":{"enableMarker":false},"randomNote":{},"copyNoteLink":{"aliasMode":"title"},"templateHierarchy":"template"},"workspace":{"dendronVersion":"0.83.0","vaults":[{"fsPath":"../main/tech","name":"tech"}],"journal":{"dailyDomain":"daily","name":"journal","dateFormat":"y.MM.dd","addBehavior":"childOfDomain"},"scratch":{"name":"scratch","dateFormat":"y.MM.dd.HHmmss","addBehavior":"asOwnDomain"},"graph":{"zoomSpeed":1,"createStub":false},"enableAutoCreateOnDefinition":false,"enableXVaultWikiLink":false,"enableRemoteVaultInit":true,"workspaceVaultSyncMode":"noCommit","enableAutoFoldFrontmatter":true,"maxPreviewsCached":10,"maxNoteLength":204800,"task":{"name":"","dateFormat":"","addBehavior":"childOfCurrent","statusSymbols":{"":" ","wip":"w","done":"x","assigned":"a","moved":"m","blocked":"b","delegated":"l","dropped":"d","pending":"y"},"prioritySymbols":{"H":"high","M":"medium","L":"low"},"todoIntegration":false,"createTaskSelectionType":"selection2link","taskCompleteStatus":["done","x"]},"enableUserTags":true,"enableHashTags":true,"enableEditorDecorations":true,"enableFullHierarchyNoteTitle":false},"preview":{"enableFMTitle":true,"enableNoteTitleForLink":true,"enableMermaid":true,"enablePrettyRefs":true,"enableKatex":true,"automaticallyShowPreview":false,"enableFrontmatterTags":true,"enableHashesForFMTags":false},"publishing":{"enableFMTitle":true,"enableNoteTitleForLink":true,"enablePrettyRefs":true,"enableKatex":true,"copyAssets":true,"siteHierarchies":["root"],"writeStubs":false,"siteRootDir":"docs","seo":{"title":"Dendron","description":"The Tech Digital Garden of Kyle Tycholiz"},"github":{"cname":"tech.kyletycholiz.com","enableEditLink":true,"editLinkText":"Edit this page on GitHub","editBranch":"master","editViewMode":"tree"},"enableSiteLastModified":true,"enableFrontmatterTags":true,"enableHashesForFMTags":false,"enableRandomlyColoredTags":true,"enableTaskNotes":true,"enablePrettyLinks":true,"searchMode":"lookup","enableMermaid":true,"siteUrl":"https://tech.kyletycholiz.com","duplicateNoteBehavior":{"action":"useVault","payload":["tech"]},"siteFaviconPath":"favicon.ico","siteIndex":"root"}}},"__N_SSG":true}