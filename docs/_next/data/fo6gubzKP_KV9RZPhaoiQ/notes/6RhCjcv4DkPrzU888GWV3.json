{"pageProps":{"note":{"id":"6RhCjcv4DkPrzU888GWV3","title":"Apollo Client Cache","desc":"","updated":1649871478635,"created":1614905430441,"custom":{},"fname":"apollo.client.cache","type":"note","vault":{"fsPath":"../main/tech","name":"tech"},"contentHash":"71684d27758ef96beb062d7250178af6","links":[{"type":"wiki","from":{"fname":"apollo.client.cache","id":"6RhCjcv4DkPrzU888GWV3","vaultName":"tech"},"value":"general.arch.cache","alias":"cache","position":{"start":{"line":2,"column":65,"offset":65},"end":{"line":2,"column":93,"offset":93},"indent":[]},"xvault":false,"sameFile":false,"to":{"fname":"general.arch.cache"}},{"type":"ref","from":{"fname":"apollo.client.cache","id":"6RhCjcv4DkPrzU888GWV3","vaultName":"tech"},"value":"apollo.client.cache.api","position":{"start":{"line":42,"column":1,"offset":2361},"end":{"line":42,"column":29,"offset":2389},"indent":[]},"xvault":false,"to":{"fname":"apollo.client.cache.api"}}],"anchors":{"normalization":{"type":"header","text":"Normalization","value":"normalization","line":12,"column":0,"depth":3},"interacting-directly-with-the-cache":{"type":"header","text":"Interacting directly with the Cache","value":"interacting-directly-with-the-cache","line":33,"column":0,"depth":2},"manually-updating-the-cache":{"type":"header","text":"Manually updating the cache","value":"manually-updating-the-cache","line":44,"column":0,"depth":3},"local-only-fields":{"type":"header","text":"Local-only fields","value":"local-only-fields","line":50,"column":0,"depth":3},"type-policies":{"type":"header","text":"Type Policies","value":"type-policies","line":64,"column":0,"depth":3}},"children":["v2my8qqcjc7zzy2zzw6iod1","z9s37a2gqp8ru7ufjp0apm5"],"parent":"ea472414-ba4f-4e48-b784-810034a1ab8f","data":{}},"body":"<h1 id=\"apollo-client-cache\">Apollo Client Cache<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#apollo-client-cache\"></a></h1>\n<p>Apollo caches the result of every graphql query in a normalized <a href=\"/notes/8swgk5qh3sy2b9kkfuwx3uu\">cache</a>.</p>\n<ul>\n<li>The cache normalizes query response objects before it saves them to its internal data store.</li>\n<li>though like the result of a graphql query, the object can be arbitrarily deep. However, references are used, so that the same object is never stored twice.</li>\n</ul>\n<h3 id=\"normalization\">Normalization<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#normalization\"></a></h3>\n<p>Normalization happens in the following steps:</p>\n<ol>\n<li>The cache generates a CacheId for every identifiable object included in the response. \n<ul>\n<li>The CacheId will be in format: <code>&#x3C;__typename>:&#x3C;id></code> (ex. <code>Bucket:232</code>)</li>\n</ul>\n</li>\n<li>All the objects are stored by that generated ID in a flat lookup table.</li>\n<li>Whenever an incoming object is stored with the same CacheId as an existing object, the fields of those objects are merged.\n<ul>\n<li>this means that the only time anything is overwritten is when the field names are the same. If the incoming object has different fieldnames than the existing one, they will be preserved </li>\n<li>ex. this has the further implication that if we had one query that returned a list of books (but only the title and author), then we subsequently clicked on a book and another query was made to get all the metadata data (description, page count, reviews etc.), that single book would not have been overwritten. The additional fields from the second query would have simply been merged.</li>\n</ul>\n</li>\n</ol>\n<p>The apollo cache takes the following shape:</p>\n<pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"__typename\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Person\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"id\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"cGVvcGxlOjE=\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Luke Skywalker\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"homeworld\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"__ref\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Planet:cGxhbmV0czox\"</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h2 id=\"interacting-directly-with-the-cache\">Interacting directly with the Cache<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#interacting-directly-with-the-cache\"></a></h2>\n<p>We can read/write to the Apollo cache without interacting with our Graphql server.</p>\n<p>We can do this in a few different ways:</p>\n<ul>\n<li>using regular Graphql queries to manage both remote and local data\n<ul>\n<li><code>readQuery</code> / <code>writeQuery</code> / <code>updateQuery</code></li>\n</ul>\n</li>\n<li>using Graphql fragments to access the fields of a cached object without having to compose an entire query to reach that object.\n<ul>\n<li><code>readFragment</code> / <code>writeFragment</code> / <code>updateFragment</code></li>\n</ul>\n</li>\n<li>modify the cache directly without using Graphql at all\n<ul>\n<li><code>cache.modify</code></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"manually-updating-the-cache\">Manually updating the cache<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#manually-updating-the-cache\"></a></h3>\n<p>When a single resource is updated with a mutation, Apollo handles caching for us (as long as we return the <code>id</code> and fields that were updated). </p>\n<ul>\n<li>creating, deleting, or updating many at once will require us to manually update the cache.</li>\n</ul>\n<p></p><p></p><div class=\"portal-container\">\n<div class=\"portal-head\">\n<div class=\"portal-backlink\">\n<div class=\"portal-title\">From <span class=\"portal-text-title\">API</span></div>\n<a href=\"/notes/v2my8qqcjc7zzy2zzw6iod1\" class=\"portal-arrow\">Go to text <span class=\"right-arrow\">â†’</span></a>\n</div>\n</div>\n<div id=\"portal-parent-anchor\" class=\"portal-parent\" markdown=\"1\">\n<div class=\"portal-parent-fader-top\"></div>\n<div class=\"portal-parent-fader-bottom\"></div><p><code>useMutation</code> has an <code>update</code> function, whose purpose is to modify your cached data to match the modifications that a mutation makes to your back-end data</p>\n<ul>\n<li>this method allows us to interact with the cache as if we were interacting with a graphql API. \n<ul>\n<li>ex. we can make general queries, as well as use fragments to help</li>\n</ul>\n</li>\n<li>we can interact directly with the cache with <code>readQuery, writeQuery, readFragment, writeFragment</code>, which are methods on the <code>ApolloClient</code> class</li>\n<li>we can get the cached version of an entity with <code>cache.identify</code>\n<ul>\n<li>an input <code>{ id: 1, title: '', mediaItems: [{...}] }</code> gives us <code>Nugget:1</code></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"apollo-cache-object\">Apollo <code>cache</code> object<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#apollo-cache-object\"></a></h2>\n<ul>\n<li>Here, queries mirror what our gql queries would look like to target the same data from a Graphql server. Therefore, it must be a complete and valid query.</li>\n<li>fragments on the other hand provide more <em>random access</em> (as opposed to <em>sequential access</em>) to our cached data.\n<ul>\n<li>therefore, we need to provide the cacheId as an argument to the fragment methods.</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"readquery\"><code>readQuery</code><a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#readquery\"></a></h3>\n<ul>\n<li>like a regular graphql query, only it is performed on the cache, rather than the GraphQL API</li>\n</ul>\n<h3 id=\"writequery\"><code>writeQuery</code><a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#writequery\"></a></h3>\n<ul>\n<li>uses the same shape as <code>readQuery</code>, but requires us to include a <code>data</code> option with the modifications we wish to make</li>\n<li>the shape of our query is not enforced, and we can write fields that aren't present in our Graphql schema.</li>\n<li><a href=\"https://www.apollographql.com/docs/react/caching/cache-interaction/#writequery\">docs</a></li>\n</ul>\n<h3 id=\"readfragment\"><code>readFragment</code><a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#readfragment\"></a></h3>\n<p>If the object in the cache is missing fields that exist on the fragment, then we will be returned <code>null</code>.</p>\n<h3 id=\"writefragment\"><code>writeFragment</code><a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#writefragment\"></a></h3>\n<p>Just like <code>readFragment</code>, but like <code>writeQuery</code>, it requires a <code>data</code> object with the fields that we are writing.</p>\n<h3 id=\"updatequery--updatefragment\"><code>updateQuery</code> / <code>updateFragment</code><a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#updatequery--updatefragment\"></a></h3>\n<p>Allows us to read and write cached data in a single method call.</p>\n<ul>\n<li>ApolloClient 3.5 and later</li>\n<li><a href=\"https://www.apollographql.com/docs/react/caching/cache-interaction/#using-updatequery-and-updatefragment\">docs</a></li>\n</ul>\n<h3 id=\"cachemodify\"><code>cache.modify</code><a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#cachemodify\"></a></h3>\n<ul>\n<li><a href=\"https://www.apollographql.com/docs/react/caching/cache-interaction/#using-cachemodify\">docs</a></li>\n</ul>\n<p><code>modify</code> is a method we can execute on our cache that lets us modify individual fields directly </p>\n<ul>\n<li>differs from <code>writeQuery</code> and <code>writeFragment</code> in that it will circumvent any <code>merge</code> function we have defined, meaning that fields are always overwritten with exactly the values you specify.</li>\n<li>cannot write fields that do not already exist on the object in the cache.</li>\n</ul>\n<h3 id=\"cacheidentify\"><code>cache.identify</code><a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#cacheidentify\"></a></h3>\n<p>Returns the cacheId for the specified object</p>\n</div></div><p></p><p></p>\n<h3 id=\"local-only-fields\">Local-only fields<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#local-only-fields\"></a></h3>\n<p>We can store and retrieve fields that only exist in the cache by using the <code>@client</code> decorator on our graphql query.</p>\n<pre class=\"language-gql\"><code class=\"language-gql\">query ProductDetails($productId: ID!) {\n  product(id: $productId) {\n    name\n    price\n    isInCart @client # This is a local-only field\n  }\n}\n</code></pre>\n<hr>\n<h3 id=\"type-policies\">Type Policies<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#type-policies\"></a></h3>\n<p>By defining type policies, we can determine how the cache interacts with specific types in the schema</p>\n<ul>\n<li>done by mapping a <code>__typename</code> to the whole <code>TypePolicy</code> object.</li>\n<li>in other words, the <code>typePolicies</code> object has <code>key</code>-<code>values</code> of <code>__typename</code>-<code>TypePolicy Object</code></li>\n</ul>\n<p>each field in a <code>typePolicies</code> object is a type's <code>__typename</code></p>\n<p>we can customize how a particular field within our Apollo cache is written to and read. For this, we have 2 methods: <code>merge</code> and <code>read</code>.</p>\n<ul>\n<li>with <code>read</code>, the cache calls that function whenever your client queries for the field. In the query response, the field is populated with the read functionâ€™s return value, instead of the fieldâ€™s cached value.\n<ul>\n<li>Read is useful for manipulating values when theyâ€™re read from the cache, for example, things like formatting strings, dates, etc.</li>\n</ul>\n</li>\n<li>with <code>merge</code>, the cache calls that function whenever the field is about to be written with an incoming value. When the write occurs, the fieldâ€™s new value is set to the merge functionâ€™s return value, instead of the original incoming value.\n<ul>\n<li>Merge can take incoming data and manipulate it before merging it with existing data. Suppose you want to merge arrays or non-normalized objects.</li>\n</ul>\n</li>\n<li>to define the policy for a single field, we need to first know which TypePolicy object the field corresponds to.</li>\n</ul>\n<p><code>FieldPolicy</code> lets us customize how individual fields in the Apollo Client cache are read and written.</p>\n<hr>\n<strong>Children</strong>\n<ol>\n<li><a href=\"/notes/v2my8qqcjc7zzy2zzw6iod1\">API</a></li>\n<li><a href=\"/notes/z9s37a2gqp8ru7ufjp0apm5\">Cook</a></li>\n</ol>","noteIndex":{"id":"olZIVfSs2uLLr3BppFh4K","title":"Digital Garden","desc":"","updated":1674517603573,"created":1615482407722,"custom":{"nav_order":0,"permalink":"/"},"fname":"root","type":"note","vault":{"fsPath":"../main/tech","name":"tech"},"contentHash":"effb007003ca6a91d7fd0c293e1d2436","links":[{"type":"wiki","from":{"fname":"root","id":"olZIVfSs2uLLr3BppFh4K","vaultName":"tech"},"value":"testing.method.unit","alias":"unit testing","position":{"start":{"line":18,"column":121,"offset":1146},"end":{"line":18,"column":157,"offset":1182},"indent":[]},"xvault":false,"sameFile":false,"to":{"fname":"testing.method.unit"}},{"type":"wiki","from":{"fname":"root","id":"olZIVfSs2uLLr3BppFh4K","vaultName":"tech"},"value":"general.arch.microservice","alias":"microservices","position":{"start":{"line":18,"column":188,"offset":1213},"end":{"line":18,"column":231,"offset":1256},"indent":[]},"xvault":false,"sameFile":false,"to":{"fname":"general.arch.microservice"}},{"type":"wiki","from":{"fname":"root","id":"olZIVfSs2uLLr3BppFh4K","vaultName":"tech"},"value":"paradigm.oop","alias":"OOP","position":{"start":{"line":36,"column":227,"offset":2718},"end":{"line":36,"column":247,"offset":2738},"indent":[]},"xvault":false,"sameFile":false,"to":{"fname":"paradigm.oop"}}],"anchors":{"tags":{"type":"header","text":"Tags","value":"tags","line":46,"column":0,"depth":3},"resources":{"type":"header","text":"Resources","value":"resources","line":55,"column":0,"depth":2},"ue-unexamined-resources":{"type":"header","text":"UE (Unexamined) Resources","value":"ue-unexamined-resources","line":56,"column":0,"depth":3},"e-examined-resources":{"type":"header","text":"E (Examined) Resources","value":"e-examined-resources","line":59,"column":0,"depth":3},"resources-1":{"type":"header","text":"Resources","value":"resources-1","line":62,"column":0,"depth":3}},"children":["40ubf88tephzbdjte8cdsa0","zFMjbn3xihVNHjUIdZCD1","IK6NOKemuDjhfstJBovKL","ZaTr28eWk1DrXOEsc1YVb","Vi0WYVLZunVM9iR8XZJn3","ngAbg7gluvbt1bY1UIRsi","RCPPXSakm5TvKka8kOmVp","LIcuGYV0DDt1VWbvH6Sed","MPx8ykTP57I40WTZvTP7f","ZU5WmdTG1bHoE8RcmZXZG","jqWiyYJff92RjXuUQt9PQ","KihijM8OQvZ4pASkkhqzL","F9vyqvls3OBCujtukqKhy","k6jxm2b3edgkhbordpuz6v1","facc2b01-755a-409f-99f6-57bef2d1501f","bZumdyapJ2H0wWWOmJ45i","elqpgoe2r951si4xrhujppj","m5ov42Vm6mR7RQWTvl1NW","cw8cerc0cos8lh871oz8rtf","PZxxZ4iESzSlbbHJKxuAZ","UDu62Pa6BaRqlG8uGoMhy","u3zcndycwqessho5h6x0nz9","ZgCUp366YrF2Tyky2NT73","DVpVUmavSoVDA7UIlPzLX","nMCtMXVvjBsJk3iw1zoIO","ANfx9Z4a6ZA0uJuSHtbIJ","BkG557LKUYbH1DnxprEVT","1TaH8zDTM98FZ9SYaeXLM","02v7ymc144e5c4pv3edkud7","dc79799f-a55d-48ab-a8be-c48adb1b19c0","f6feef57-b8f5-451f-a09a-7b63f6a07183","4sz47Y0LKs1Si73rWtyyh","g7ulqi8no93ezeocbesc3ll","5a9fb1df-478e-4687-9be0-5cb97e61ec57","1374e9e9-1cbc-4e1f-b1ca-66b8569533dd","D8Z3rjXkSj2EOymXQXF4Z","np3c1ykvnjqv5xoombpfwqz","f529cc34-aba0-45ca-ad7e-02ddda318941","0zcauha3il2NqtxZazIo7","9bbd6f68-03b2-41f4-92e4-2ca313e8b450","5a2ab598-fa7e-4471-8bda-9f5831b679ae","uV6w4mZPoohWyZV4Xaad0","QHXEIyeZGIGMVi5Q52UWI","RgE0mZLaUjPftFPZsiAoe","mytCOts26Pidush65tdRW","fwUzxfLSPMH1eL8oBoLWx","wazdsda6h25x66edvfmeuiv","TbW7PM9bg1y5TGkiWwQ8b","xiSIDeEtIc8X0lpUQlppI","0jxgntiLNHWFuCbzqtFGF","GkdMprLUe4QQULBxmGN6V","4SYc6v5hxY5g6Ip6kjpwO","czi7ilt2i1uoqm1f2otbntj","fqVQpS9FBiXgKsZX3R3sJ","L5JUZlGAGvTxrsEBB7DY8","ttyri4pwfyn5lcx0vp9804o","TeTedoeS2LdHPR632eCpM","ulicRRwo3lSFzh3tMfWH9","p7d24vyb8m00ombzn34t50c","e65188a1-177e-4ab2-99f9-75f85d537621","fajYnbVhCRDi74xn0H30R","bArGdGwqo3iFkyKMyE7qR","4Dcp7gbEVoLLgfu7bXFai","5d700782-fb81-416e-83f9-5dd88260e350","zubgzhNFE6KlTgXcjTz6O","8lpdfWa0cbSq1XJQbcYcY","2psluywdc416t7vrql0m058","17I8ZksXvqCH1mRtZDjHp","kF916Ow84qpJJeMRkWMIo","tMLkLcrIHHBz56xVmBLkP","CSePBQ6q7qhowKESqVwt7","laZ4OfLhZNK1Kuy6GaWUr","z5IJblOknQhMzZ5QZh4ye","N36FHxfxzwJfxDY3miWyX","3bb25f58-2b50-4fa3-af55-48ea9f88a081","7x07qjgbitozdfszqzuy7ix","u93Rz4fEWGu6VBR30Zraf","9hjMHnKvYT4jLKvuDSXaV","qC5GxCZBmNb4Ip6c0kU8x","LgW7mTIALODoXc54B3p6S","UYPxfHBFWX7fb6hHU5bB6","74lYtC8NKpCzcyFOZTfR1","sEoBNAEuaTxwSmTXDonZt","dj0jr9mpvs62e2pkg3zc3yy","z8ie0xjogb6ht7gzowav5xr","qxSOd6SPN8qf9ZUojVFDX","WQoMTf6VXBaxCgksXAVsj","2Mw4XgfyCHXHNOX5yoCIY","qcdt2f7jo51muquo5r95dpo","0XJqmcdtcMZu66glBI5O8","lK8r8BXS4ThiUTe4xKIZe","93de42ca-53ea-460a-baa7-b9ec5c47cb1e","Rxs2jaGpdFzqYtP7lAJFJ","aO8W81Z0PyIb6Hs7nOHPW","lhzisalkebu4w5n01np07i0","7b5l4b6fi65n7sv9org5q1l","I01hENHnh8Tqu3Ok8sLzG","03o3n0hz9v9jtb7j889zpd4","evqsPNutOaZ8hcBCqxFQu","zhhxcjZUHdU8uRLwGb9Zh","G1aFACZB2ooWGMGwyd3ZW","YWy1C4tgoaCcw1m8JJsr7","Szj3o5iaNxPpesiCqwrbu","613syb18hb3v0u1ydvor7ru","XhvCDW3fIw6h6MhY5ticq","Q70g7SusFZBQXzkuQifv4","AzfWDH3wp7jFpL2EYxBcW","y0fwpZ9qMqirsLiFyOciU","ZF8xj8wwDUqKlrwTrCFZ1","tAJvhqhdfyZZa87QHq1TU","4hRmipi8lxpBLyzWu5JVB","iTg0C7QjvnmqBZeEigJNs","3babc3d2-79ae-470a-9c06-ab8bba2e684e","bF3UsMFya3fMeXWDspVov","ULkfbL9WpktbVYnzhl6Jw","PpNOO8JYWe6dM8wruSa7x","di40pCxDn7IiqE8lFdD46","rmW0mkerqV35I8QPji6lM","3IFIK1ByzeIxZCByryGLN","iImkYAKfkw3beAl6pLbDn","ecDe8DNWrkeQTwpTEvHje","i2it5id8qwtg27n4usg8bo1","Yqhdd9mSJGN7OJOeyoSD2","Ws5tah8tpeyn9tK8VBTg8","gWAg15uBJgkS2B0wcpMAa","l7V3v2ep1YdDCt7DOr7Ci","yM2PJBdqJnHpD63cPA6sW","qn0bre7eLbi3QMbCfWkUi","fSu0KxFL41IRouotqmbHs","0gtg24Mj1a1bQFPRGQNlO","7iQPBMltLPLbFEz2qbjPu","yoh4pwoXcfELInGKRdYf6","dCGCWXgAmiOZXbdULT1m6","jMavlje07sNa6hSEIE8WA","Xxm0JE4dKHxrQAaZfzvxD","nRb6Im4Kcmc2ZWE7K1jZ1","PAEBZCyFBZJyR7OoMZ41E","PQ6km8RgRCuyICBPOYz8f","x5tm1nfjzyawwzedy3yitgd","2bhftt8rGuxYu4pFgNqru","hjYIZpHQWuXfeEoGeJEKW","K2M9bQqVq2eQfm29eslKL","X8obW1iKwYsvNgKWGyCzy","yJwSC7hqYIezTFHf5i0Ev","c4Z7ETcOHUILRMH32Sfjw","qiR6dIu857b9M9kTqjOyK","fc2coz74cnfy5czzofx4h5x","Ku1OgHMhELajzo61Gx7ye","LUrfhDWo8wuwZu7CN9TV8","osu6JGOnvXJ5gt3tpqWZY","1a6173cd-cf13-4b34-a522-8350bf9a364f","S2sBltrPfd8a7ICuD7CuH","GLQ2pmkJUNUa93THBDVsD","md6xitz4exia2joa06i490b","oWCuBXOg6JWfZzjmKxmNl","jOmhZ8ovLYTPbpM1vqSDx","p9bov84s0isgkl1ysaw93kk","FraC6xzLy1ei91l1ICyc9","6ceBas2RE9Q4787GDngH7","734cd78d-0bc9-426b-803d-1efc84dfffe5","k4Bb09px6r0FxIRs49SXV","oaG3H1S9IUBO644nGZigu","Ka7agQJkUMRSWN0uFdkWK","si3z090WsiLasMhJBa1Az","hs6rwzt4mogiicoc4gcykbi","ljKAVERmdEiKLK9hXGKBm","zxt3lhonfdhglvijd17ua8c","dd7dopve1dudqkoibkqvti4","923tgifqf59ovv5yldtyi0a","vrjwp01goqw47fqctm4f4lo","c99gdmmppju3r1tth8cb2jx","z2pvn5qxdz84zgygqzxage8"],"parent":null,"data":{},"body":"This Dendron vault of tech knowledge is organized according to domains and their sub-domains, along with specific implementation of those domains.\n\nFor instance, Git itself is a domain. Sub-domains of Git would include things like `commit`,\n`tags`, `reflog` etc. implementations of each of those could be `cli`, `strat`\n(strategies), `inner`, and so on.\n\nThe goal of the wiki is to present data in a manner that is from the perspective\nof a querying user. Here, a user is a programmer wanting to get key information\nfrom a specific domain. For instance, if a user wants to use postgres functions\nand hasn't done them in a while, they should be able to query\n`postgres.functions` to see what information is available to them.\n\nThis wiki has been written with myself in mind. While learning each of these\ndomains, I have been sensitive to the \"aha\" moments and have noted down my\ninsights as they arose. I have refrained from capturing information that I\nconsidered obvious or otherwise non-beneficial to my own understanding.\n\nAs a result, I have allowed myself to use potentially arcane concepts to explain other ones. For example, in my note on [[unit testing|testing.method.unit]], I have made reference to the [[microservices|general.arch.microservice]] note. If these notes were made with the public in mind, this would be a very bad strategy, given that you'd have to understand microservices to be able to draw that same parallel that I've already drawn. Since these notes are written for myself, I have been fine with taking these liberties.\n\nWhat I hope to gain from this wiki is the ability to step away from any\ngiven domain for a long period of time, and be able to be passably useful for\nwhatever my goals are within a short period of time. Of course this is all\nvague sounding, and really depends on the domain along with the ends I am\ntrying to reach.\n\nTo achieve this, the system should be steadfast to:\n- be able to put information in relatively easily, without too much thought\n\trequired to its location. While location is important, Dendron makes it easy\n\tto relocate notes, if it becomes apparent that a different place makes more\n\tsense.\n- be able to extract the information that is needed, meaning there is a\n\thigh-degree in confidence in the location of the information. The idea is\n\tthat information loses a large amount of its value when it is unfindable.\n\tTherefore, a relatively strict ideology should be used when determining\n\twhere a piece of information belongs.\n\t- Some concepts might realistically belong to multiple domains. For instance, the concept of *access modifiers* can be found in both `C#` and `Typescript`. Therefore, this note should be abstracted to a common place, such as [[OOP|paradigm.oop]].\n\nThis Dendron vault is the sister component to the [General Second Brain](https://tech.kyletycholiz.com).\n\n### Tags\nThroughout the garden, I have made use of tags, which give semantic meaning to the pieces of information.\n\n- `ex.` - Denotes an *example* of the preceding piece of information\n- `spec:` - Specifies that the preceding information has some degree of *speculation* to it, and may not be 100% factual. Ideally this gets clarified over time as my understanding develops.\n- `anal:` - Denotes an *analogy* of the preceding information. Often I will attempt to link concepts to others that I have previously learned.\n- `mn:` - Denotes a *mnemonic*\n- `expl:` - Denotes an *explanation*\n\n## Resources\n### UE (Unexamined) Resources\nOften, I come across sources of information that I believe to be high-quality. They may be recommendations or found in some other way. No matter their origin, I may be in a position where I don't have the time to fully examine them (and properly extract notes), or I may not require the information at that moment in time. In cases like these, I will add reference to a section of the note called **UE Resources**. The idea is that in the future when I am ready to examine them, I have a list of resources that I can start with. This is an alternative strategy to compiling browser bookmarks, which I've found can quickly become untenable.\n\n### E (Examined) Resources\nOnce a resource has been thoroughly examined and has been mined for notes, it will be moved from *UE Resources* to *E Resources*. This is to indicate that (in my own estimation), there is nothing more to be gained from the resource that is not already in the note.\n\n### Resources\nThis heading is for inexhaustible resources. \n- A prime example would be a quality website that continually posts articles.  - Another example would be a tool, such as software that measures frequencies in a room to help acoustically treat it.\n"},"collectionChildren":null,"customHeadContent":null,"config":{"version":5,"dev":{"enablePreviewV2":true},"commands":{"lookup":{"note":{"selectionMode":"extract","confirmVaultOnCreate":false,"leaveTrace":false,"bubbleUpCreateNew":true,"fuzzThreshold":0.2,"vaultSelectionModeOnCreate":"smart"}},"insertNote":{"initialValue":"templates"},"insertNoteLink":{"aliasMode":"none","enableMultiSelect":false},"insertNoteIndex":{"enableMarker":false},"randomNote":{},"copyNoteLink":{"aliasMode":"title"},"templateHierarchy":"template"},"workspace":{"dendronVersion":"0.83.0","vaults":[{"fsPath":"../main/tech","name":"tech"}],"journal":{"dailyDomain":"daily","name":"journal","dateFormat":"y.MM.dd","addBehavior":"childOfDomain"},"scratch":{"name":"scratch","dateFormat":"y.MM.dd.HHmmss","addBehavior":"asOwnDomain"},"graph":{"zoomSpeed":1,"createStub":false},"enableAutoCreateOnDefinition":false,"enableXVaultWikiLink":false,"enableRemoteVaultInit":true,"workspaceVaultSyncMode":"noCommit","enableAutoFoldFrontmatter":true,"maxPreviewsCached":10,"maxNoteLength":204800,"task":{"name":"","dateFormat":"","addBehavior":"childOfCurrent","statusSymbols":{"":" ","wip":"w","done":"x","assigned":"a","moved":"m","blocked":"b","delegated":"l","dropped":"d","pending":"y"},"prioritySymbols":{"H":"high","M":"medium","L":"low"},"todoIntegration":false,"createTaskSelectionType":"selection2link","taskCompleteStatus":["done","x"]},"enableUserTags":true,"enableHashTags":true,"enableEditorDecorations":true,"enableFullHierarchyNoteTitle":false},"preview":{"enableFMTitle":true,"enableNoteTitleForLink":true,"enableMermaid":true,"enablePrettyRefs":true,"enableKatex":true,"automaticallyShowPreview":false,"enableFrontmatterTags":true,"enableHashesForFMTags":false},"publishing":{"enableFMTitle":true,"enableNoteTitleForLink":true,"enablePrettyRefs":true,"enableKatex":true,"copyAssets":true,"siteHierarchies":["root"],"writeStubs":false,"siteRootDir":"docs","seo":{"title":"Dendron","description":"The Tech Digital Garden of Kyle Tycholiz"},"github":{"cname":"tech.kyletycholiz.com","enableEditLink":true,"editLinkText":"Edit this page on GitHub","editBranch":"master","editViewMode":"tree"},"enableSiteLastModified":true,"enableFrontmatterTags":true,"enableHashesForFMTags":false,"enableRandomlyColoredTags":true,"enableTaskNotes":true,"enablePrettyLinks":true,"searchMode":"lookup","enableMermaid":true,"siteUrl":"https://tech.kyletycholiz.com","duplicateNoteBehavior":{"action":"useVault","payload":["tech"]},"siteFaviconPath":"favicon.ico","siteIndex":"root"}}},"__N_SSG":true}