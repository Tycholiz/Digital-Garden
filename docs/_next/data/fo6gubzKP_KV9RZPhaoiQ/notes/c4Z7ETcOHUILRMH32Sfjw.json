{"pageProps":{"note":{"id":"c4Z7ETcOHUILRMH32Sfjw","title":"Svelte","desc":"","updated":1634794144363,"created":1634248380452,"custom":{},"fname":"svelte","type":"note","vault":{"fsPath":"../main/tech","name":"tech"},"contentHash":"eb8c4bbf22af75fc84715c92f7f13dc1","links":[{"type":"wiki","from":{"fname":"svelte","id":"c4Z7ETcOHUILRMH32Sfjw","vaultName":"tech"},"value":"js.event-loop.event-bubbling","alias":"bubble","position":{"start":{"line":171,"column":43,"offset":5217},"end":{"line":171,"column":82,"offset":5256},"indent":[]},"xvault":false,"sameFile":false,"to":{"fname":"js.event-loop.event-bubbling"}}],"anchors":{"features-of-the-framework":{"type":"header","text":"Features of the framework","value":"features-of-the-framework","line":10,"column":0,"depth":1},"updates-to-the-dom":{"type":"header","text":"Updates to the DOM","value":"updates-to-the-dom","line":11,"column":0,"depth":2},"reactivity-in-svelte":{"type":"header","text":"Reactivity in Svelte","value":"reactivity-in-svelte","line":15,"column":0,"depth":2},"reactive-declarations":{"type":"header","text":"Reactive declarations","value":"reactive-declarations","line":28,"column":0,"depth":3},"props":{"type":"header","text":"Props","value":"props","line":64,"column":0,"depth":2},"dom-logic":{"type":"header","text":"DOM Logic","value":"dom-logic","line":78,"column":0,"depth":2},"conditional-rendering":{"type":"header","text":"Conditional rendering","value":"conditional-rendering","line":79,"column":0,"depth":3},"loop":{"type":"header","text":"Loop","value":"loop","line":92,"column":0,"depth":3},"data-fetching":{"type":"header","text":"Data fetching","value":"data-fetching","line":104,"column":0,"depth":3},"events":{"type":"header","text":"Events","value":"events","line":118,"column":0,"depth":2},"event-modifiers":{"type":"header","text":"Event modifiers","value":"event-modifiers","line":126,"column":0,"depth":3},"event-dispatching":{"type":"header","text":"Event dispatching","value":"event-dispatching","line":140,"column":0,"depth":3},"event-forwarding":{"type":"header","text":"Event forwarding","value":"event-forwarding","line":176,"column":0,"depth":3},"binding":{"type":"header","text":"Binding","value":"binding","line":188,"column":0,"depth":3},"lifecycles":{"type":"header","text":"Lifecycles","value":"lifecycles","line":209,"column":0,"depth":2},"tick":{"type":"header","text":"tick","value":"tick","line":213,"column":0,"depth":3},"stores":{"type":"header","text":"Stores","value":"stores","line":216,"column":0,"depth":2},"motions-animations-and-transitions":{"type":"header","text":"Motions, Animations and Transitions","value":"motions-animations-and-transitions","line":235,"column":0,"depth":2},"actions":{"type":"header","text":"Actions","value":"actions","line":243,"column":0,"depth":2},"context-api":{"type":"header","text":"Context API","value":"context-api","line":255,"column":0,"depth":2},"parts-to-it":{"type":"header","text":"Parts to it","value":"parts-to-it","line":258,"column":0,"depth":3},"css-class-shorthand":{"type":"header","text":"CSS Class shorthand","value":"css-class-shorthand","line":267,"column":0,"depth":2},"component-children":{"type":"header","text":"Component children","value":"component-children","line":283,"column":0,"depth":2}},"children":["TxUkS5FuZPJ7z1NN3FOjE"],"parent":"olZIVfSs2uLLr3BppFh4K","data":{}},"body":"<h1 id=\"svelte\">Svelte<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#svelte\"></a></h1>\n<p>Unlike the traditional frameworks (React and Vue) which carry out the bulk of their work in the browser, Svelte shifts that work into a compile step that happens when an app is built.</p>\n<h1 id=\"features-of-the-framework\">Features of the framework<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#features-of-the-framework\"></a></h1>\n<h2 id=\"updates-to-the-dom\">Updates to the DOM<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#updates-to-the-dom\"></a></h2>\n<p>When you update component state in Svelte, it doesn't update the DOM immediately. Instead, it waits until the next microtask to see if there are any other changes that need to be applied, including in other components. Doing so avoids unnecessary work and allows the browser to batch things more effectively.</p>\n<ul>\n<li>sometimes this behavior is undesirable, and for that we can turn to <code>tick()</code> lifecycle method</li>\n</ul>\n<h2 id=\"reactivity-in-svelte\">Reactivity in Svelte<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#reactivity-in-svelte\"></a></h2>\n<p>Svelte's reactivity is triggered by assignments (ie. setting a new variable, or changing the assignment of an existing variable)</p>\n<ul>\n<li>therefore <code>map</code>, <code>filter</code> and <code>reduce</code> all trigger re-renders, because those methods return a new array. <code>push</code> would not trigger a re-render, unless we reassign the same variable to equal itself:</li>\n</ul>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">addNumber</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\tnumbers<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">push</span><span class=\"token punctuation\">(</span>numbers<span class=\"token punctuation\">.</span><span class=\"token property-access\">length</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tnumbers <span class=\"token operator\">=</span> numbers<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>The idiomatic way of course is just to use non-mutative methods.</p>\n<p>Updating properties of an object will also cause the re-render, since assigning new values to keys of an object is considered to be assignment.</p>\n<h3 id=\"reactive-declarations\">Reactive declarations<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#reactive-declarations\"></a></h3>\n<p>Some parts of a component's state need to be computed from other state , and therefore need to be computed when its dependent values change </p>\n<ul>\n<li>eg. fullname computed from firstname+lastname. If firstname changes, then fullname needs to be recomputed.</li>\n</ul>\n<p>For these circumstances, we can use reactive declarations, which look like:</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> firstname <span class=\"token operator\">=</span> <span class=\"token string\">'joe'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> lastname <span class=\"token operator\">=</span> <span class=\"token string\">'schmidt'</span><span class=\"token punctuation\">;</span>\n<span class=\"token literal-property property\">$</span><span class=\"token operator\">:</span> fullname <span class=\"token operator\">=</span> firstname <span class=\"token operator\">+</span> lastname<span class=\"token punctuation\">;</span>\n</code></pre>\n<p><code>$: </code> basically says, \"do this thing (e.g. set fullname equal to firstname + lastname) whenever the dependent variables involved are updated (ie. whenever firstname or lastname change)\". </p>\n<ul>\n<li>In other words, this symbol marks a statement as reactive.</li>\n</ul>\n<p>This symbol is known as the \"destiny operator\" in reactive programming.</p>\n<ul>\n<li>A destiny operator ensures a variable is updated whenever values that it's computed from are changed)</li>\n</ul>\n<p>Reactive values become particularly valuable when you need to reference them multiple times, or you have values that depend on other reactive values.</p>\n<p>We can also just run arbitrary code blocks that are executed any time a dependent variable changes:</p>\n<ul>\n<li>ex. here, any time firstname or lastname changes, the codeblock is run</li>\n</ul>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token literal-property property\">$</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Nice to meet you!</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span>\n    <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">my fullname is </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>firstname<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>lastname<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>We can even use conditionals:</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token literal-property property\">$</span><span class=\"token operator\">:</span> <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span>count <span class=\"token operator\">>=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">count is dangerously high!</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tcount <span class=\"token operator\">=</span> <span class=\"token number\">9</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h2 id=\"props\">Props<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#props\"></a></h2>\n<p>Declare props in the <code>&#x3C;script></code> tag:</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token operator\">&#x3C;</span>script<span class=\"token operator\">></span>\n\t<span class=\"token keyword module\">export</span> <span class=\"token keyword\">let</span> answer<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword module\">export</span> <span class=\"token keyword\">let</span> name <span class=\"token operator\">=</span> <span class=\"token string\">'Kyle'</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// defaultValue</span>\n<span class=\"token operator\">&#x3C;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">></span>\n</code></pre>\n<p>Props are passed (almost) identically to React</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token operator\">&#x3C;</span><span class=\"token maybe-class-name\">Nested</span> answer<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token number\">42</span><span class=\"token punctuation\">}</span><span class=\"token operator\">/</span><span class=\"token operator\">></span>\n</code></pre>\n<h2 id=\"dom-logic\">DOM Logic<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#dom-logic\"></a></h2>\n<h3 id=\"conditional-rendering\">Conditional rendering<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#conditional-rendering\"></a></h3>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">{</span>#<span class=\"token keyword control-flow\">if</span> user<span class=\"token punctuation\">.</span><span class=\"token property-access\">loggedIn</span><span class=\"token punctuation\">}</span>\n\t<span class=\"token operator\">&#x3C;</span>button on<span class=\"token operator\">:</span>click<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>toggle<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n\t\t<span class=\"token maybe-class-name\">Log</span> out\n\t<span class=\"token operator\">&#x3C;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span>\n<span class=\"token punctuation\">{</span><span class=\"token operator\">:</span><span class=\"token keyword control-flow\">else</span><span class=\"token punctuation\">}</span>\n\t<span class=\"token operator\">&#x3C;</span>button on<span class=\"token operator\">:</span>click<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>toggle<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n\t\t<span class=\"token maybe-class-name\">Log</span> <span class=\"token keyword\">in</span>\n\t<span class=\"token operator\">&#x3C;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span>\n<span class=\"token punctuation\">{</span><span class=\"token operator\">/</span><span class=\"token keyword control-flow\">if</span><span class=\"token punctuation\">}</span>\n</code></pre>\n<h3 id=\"loop\">Loop<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#loop\"></a></h3>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token operator\">&#x3C;</span>ul<span class=\"token operator\">></span>\n\t<span class=\"token punctuation\">{</span>#each cats <span class=\"token keyword module\">as</span> <span class=\"token punctuation\">{</span> id<span class=\"token punctuation\">,</span> name <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span> <span class=\"token comment\">// destructuring here</span>\n\t\t<span class=\"token operator\">&#x3C;</span>li<span class=\"token operator\">></span><span class=\"token operator\">&#x3C;</span>a target<span class=\"token operator\">=</span><span class=\"token string\">\"_blank\"</span> href<span class=\"token operator\">=</span><span class=\"token string\">\"https://www.youtube.com/watch?v={cat.id}\"</span><span class=\"token operator\">></span>\n            <span class=\"token constant\">ID</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>id<span class=\"token punctuation\">}</span>\n\t\t\t<span class=\"token literal-property property\">Name</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>name<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token operator\">&#x3C;</span><span class=\"token operator\">/</span>a<span class=\"token operator\">></span><span class=\"token operator\">&#x3C;</span><span class=\"token operator\">/</span>li<span class=\"token operator\">></span>\n\t<span class=\"token punctuation\">{</span><span class=\"token operator\">/</span>each<span class=\"token punctuation\">}</span>\n<span class=\"token operator\">&#x3C;</span><span class=\"token operator\">/</span>ul<span class=\"token operator\">></span>\n</code></pre>\n<h3 id=\"data-fetching\">Data fetching<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#data-fetching\"></a></h3>\n<p>Svelte makes it easy to await the value of  directly in your markup:</p>\n<ul>\n<li>Only the most recent promise is considered, meaning you don't need to worry about race conditions.</li>\n</ul>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">{</span>#<span class=\"token keyword control-flow\">await</span> promise<span class=\"token punctuation\">}</span>\n\t<span class=\"token operator\">&#x3C;</span>p<span class=\"token operator\">></span><span class=\"token spread operator\">...</span>waiting<span class=\"token operator\">&#x3C;</span><span class=\"token operator\">/</span>p<span class=\"token operator\">></span>\n<span class=\"token punctuation\">{</span><span class=\"token operator\">:</span>then number<span class=\"token punctuation\">}</span>\n\t<span class=\"token operator\">&#x3C;</span>p<span class=\"token operator\">></span><span class=\"token maybe-class-name\">The</span> number is <span class=\"token punctuation\">{</span>number<span class=\"token punctuation\">}</span><span class=\"token operator\">&#x3C;</span><span class=\"token operator\">/</span>p<span class=\"token operator\">></span>\n<span class=\"token punctuation\">{</span><span class=\"token operator\">:</span><span class=\"token keyword control-flow\">catch</span> error<span class=\"token punctuation\">}</span>\n\t<span class=\"token operator\">&#x3C;</span>p style<span class=\"token operator\">=</span><span class=\"token string\">\"color: red\"</span><span class=\"token operator\">></span><span class=\"token punctuation\">{</span>error<span class=\"token punctuation\">.</span><span class=\"token property-access\">message</span><span class=\"token punctuation\">}</span><span class=\"token operator\">&#x3C;</span><span class=\"token operator\">/</span>p<span class=\"token operator\">></span>\n<span class=\"token punctuation\">{</span><span class=\"token operator\">/</span><span class=\"token keyword control-flow\">await</span><span class=\"token punctuation\">}</span>\n</code></pre>\n<h2 id=\"events\">Events<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#events\"></a></h2>\n<p>More or less in the same manner as React, any event can be listened to with the <code>on</code> directive:</p>\n<pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;</span>div</span> <span class=\"token attr-name\"><span class=\"token namespace\">on:</span>mousemove</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span>{handleMousemove}</span><span class=\"token punctuation\">></span></span>\n\tThe mouse position is {m.x} x {m.y}\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;/</span>div</span><span class=\"token punctuation\">></span></span>\n</code></pre>\n<h3 id=\"event-modifiers\">Event modifiers<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#event-modifiers\"></a></h3>\n<p>DOM event handlers can have modifiers that alter their behaviour. </p>\n<ul>\n<li>ex. a handler with a once modifier will only run a single time:</li>\n</ul>\n<pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;</span>button</span> <span class=\"token attr-name\"><span class=\"token namespace\">on:</span>click|once</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span>{handleClick}</span><span class=\"token punctuation\">></span></span>\n\tClick me\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;/</span>button</span><span class=\"token punctuation\">></span></span>\n</code></pre>\n<p>Notable modifiers:</p>\n<ul>\n<li><code>preventDefault</code></li>\n<li><code>once</code> - remove the handler after first time it runs</li>\n<li><code>self</code> - only trigger handler if <code>event.target</code> is the element itself</li>\n</ul>\n<h3 id=\"event-dispatching\">Event dispatching<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#event-dispatching\"></a></h3>\n<p>A component can be set to dispatch events by creating an event dispatcher and calling them via a handler. The parent component (here <code>App</code>) can listen to messages dispatched from a child component via the <code>on:message</code> directive (where <code>message</code> is the event name we are dispatching).</p>\n<ul>\n<li>Without this <code>on:message</code> attribute, messages would still be dispatched, but the App would not react to it.</li>\n</ul>\n<p>inner.svelte:</p>\n<pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;</span>script</span><span class=\"token punctuation\">></span></span><span class=\"token script\"><span class=\"token language-javascript\">\n\t<span class=\"token keyword module\">import</span> <span class=\"token imports\"><span class=\"token punctuation\">{</span> createEventDispatcher <span class=\"token punctuation\">}</span></span> <span class=\"token keyword module\">from</span> <span class=\"token string\">'svelte'</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">const</span> dispatch <span class=\"token operator\">=</span> <span class=\"token function\">createEventDispatcher</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">function</span> <span class=\"token function\">sayHello</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span><span class=\"token string\">'message'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token literal-property property\">text</span><span class=\"token operator\">:</span> <span class=\"token string\">'Hello!'</span>\n\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;/</span>script</span><span class=\"token punctuation\">></span></span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;</span>button</span> <span class=\"token attr-name\"><span class=\"token namespace\">on:</span>click</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span>{sayHello}</span><span class=\"token punctuation\">></span></span>\n\tClick to say hello\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;/</span>button</span><span class=\"token punctuation\">></span></span>\n</code></pre>\n<p>App.svelte:</p>\n<pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;</span>script</span><span class=\"token punctuation\">></span></span><span class=\"token script\"><span class=\"token language-javascript\">\n\t<span class=\"token keyword module\">import</span> <span class=\"token imports\"><span class=\"token maybe-class-name\">Inner</span></span> <span class=\"token keyword module\">from</span> <span class=\"token string\">'./Inner.svelte'</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">function</span> <span class=\"token function\">handleMessage</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">.</span><span class=\"token property-access\">detail</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">text</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;/</span>script</span><span class=\"token punctuation\">></span></span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;</span>Inner</span> <span class=\"token attr-name\"><span class=\"token namespace\">on:</span>message</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span>{handleMessage}/</span><span class=\"token punctuation\">></span></span>\n</code></pre>\n<h3 id=\"event-forwarding\">Event forwarding<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#event-forwarding\"></a></h3>\n<p>Unlike DOM events, component events don't <a href=\"/notes/8AyRVnb9vPBVuFpEHnZ2n\">bubble</a>. If you want to listen to an event on a deeply nested component, the intermediate components must <em>forward</em> the event.</p>\n<p>This would be the mid-layer, with a dispatched event called in the <code>Inner</code> component. Here, <code>on:message</code> is what bubbles the event up to the parent</p>\n<pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;</span>script</span><span class=\"token punctuation\">></span></span><span class=\"token script\"><span class=\"token language-javascript\">\n\t<span class=\"token keyword module\">import</span> <span class=\"token imports\"><span class=\"token maybe-class-name\">Inner</span></span> <span class=\"token keyword module\">from</span> <span class=\"token string\">'./Inner.svelte'</span><span class=\"token punctuation\">;</span>\n</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;/</span>script</span><span class=\"token punctuation\">></span></span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;</span>Inner</span> <span class=\"token attr-name\"><span class=\"token namespace\">on:</span>message</span><span class=\"token punctuation\">/></span></span>\n</code></pre>\n<h3 id=\"binding\">Binding<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#binding\"></a></h3>\n<p>Though Svelte takes a top-down data flow approach like React, it can be useful to break that paradigm, and can be done so with bindings.</p>\n<p>we can use the bind:value directive:</p>\n<pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;</span>input</span> <span class=\"token attr-name\"><span class=\"token namespace\">bind:</span>value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span>{name}</span><span class=\"token punctuation\">></span></span>\n</code></pre>\n<p>This means that not only will changes to the value of <code>name</code> update the input value, but changes to the input value will update <code>name</code>.</p>\n<p>Checkbox:</p>\n<pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span>checkbox</span> <span class=\"token attr-name\"><span class=\"token namespace\">bind:</span>checked</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span>{yes}</span><span class=\"token punctuation\">></span></span>\n</code></pre>\n<p>Radio:</p>\n<pre class=\"language-html\"><code class=\"language-html\">// `scoops` is an array of choices\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span>radio</span> <span class=\"token attr-name\"><span class=\"token namespace\">bind:</span>group</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span>{scoops}</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>scoops<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span>{1}</span><span class=\"token punctuation\">></span></span>\n</code></pre>\n<h2 id=\"lifecycles\">Lifecycles<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#lifecycles\"></a></h2>\n<p>Like React, Svelte has a familiar (albeit simpler) list of lifecycle methods.\n<code>onMount</code>, <code>onDestroy</code>, <code>onUpdate</code>, <code>beforeUpdate</code>, <code>afterUpdate</code></p>\n<h3 id=\"tick\">tick<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#tick\"></a></h3>\n<p><code>tick</code> is a lifecycle method distinct from the familiar ones. It's different in that it can be called any time. It returns a promise that resolves as soon as pending state changes have been applied to the DOM.</p>\n<h2 id=\"stores\">Stores<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#stores\"></a></h2>\n<p>Global state solution of Svelte.\nA store is simply an object with <code>subscribe</code> method, allowing interested parties to be notified whenever the value changes.</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// stores.js</span>\n<span class=\"token keyword module\">import</span> <span class=\"token imports\"><span class=\"token punctuation\">{</span> writable <span class=\"token punctuation\">}</span></span> <span class=\"token keyword module\">from</span> <span class=\"token string\">'svelte/store'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// this is a writable store</span>\n<span class=\"token keyword module\">export</span> <span class=\"token keyword\">const</span> count <span class=\"token operator\">=</span> <span class=\"token function\">writable</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/* * * * * * * * * * * * * * * * * * * */</span>\n<span class=\"token comment\">// Incrementor.svelte</span>\n<span class=\"token keyword module\">import</span> <span class=\"token imports\"><span class=\"token punctuation\">{</span> count <span class=\"token punctuation\">}</span></span> <span class=\"token keyword module\">from</span> <span class=\"token string\">'./stores.js'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">decrement</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    count<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">update</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">n</span> <span class=\"token arrow operator\">=></span> n <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h2 id=\"motions-animations-and-transitions\">Motions, Animations and Transitions<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#motions-animations-and-transitions\"></a></h2>\n<p>Svelte provides lots of motion, animation and transition support out-of-the-box:</p>\n<p>Examples: </p>\n<ul>\n<li><a href=\"https://svelte.dev/tutorial/tweened\">https://svelte.dev/tutorial/tweened</a></li>\n<li><a href=\"https://svelte.dev/tutorial/spring\">https://svelte.dev/tutorial/spring</a></li>\n<li><a href=\"https://svelte.dev/tutorial/transition\">https://svelte.dev/tutorial/transition</a></li>\n</ul>\n<h2 id=\"actions\">Actions<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#actions\"></a></h2>\n<p>Actions are essentially element-level lifecycle functions. They're useful for things like:</p>\n<ul>\n<li>interfacing with third-party libraries</li>\n<li>lazy-loaded images</li>\n<li>tooltips</li>\n<li>adding custom event handlers</li>\n</ul>\n<p>Svelte actions allows you to build code in response to the lifecycle of DOM elements</p>\n<p><a href=\"https://svelte.dev/tutorial/actions\">Make an on-screen object pannable</a></p>\n<h2 id=\"context-api\">Context API<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#context-api\"></a></h2>\n<p>The context API provides a mechanism for components to 'talk' to each other without passing around data and functions as props, or dispatching lots of events.</p>\n<h3 id=\"parts-to-it\">Parts to it<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#parts-to-it\"></a></h3>\n<p><a href=\"https://svelte.dev/tutorial/context-api\">source</a>\nThere are 2 halves to the API: <code>setContext</code> and <code>getContext</code>.</p>\n<ul>\n<li>if a component calls <code>setContext(key, context)</code>, then any child component can retrieve that context with <code>getContext(key)</code></li>\n</ul>\n<p>Unlike React Context, you do not need to import and wrap your subtree with the Provider in order to get access to the context. Simply, the parent component calls <code>setContext</code> and that context is available to all children to want access to it.</p>\n<hr>\n<h2 id=\"css-class-shorthand\">CSS Class shorthand<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#css-class-shorthand\"></a></h2>\n<pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;</span>button</span>\n\t<span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>{current === <span class=\"token punctuation\">'</span>foo<span class=\"token punctuation\">'</span> ? <span class=\"token punctuation\">'</span>selected<span class=\"token punctuation\">'</span> : <span class=\"token punctuation\">'</span><span class=\"token punctuation\">'</span>}<span class=\"token punctuation\">\"</span></span>\n\t<span class=\"token attr-name\"><span class=\"token namespace\">on:</span>click</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>{() => current = <span class=\"token punctuation\">'</span>foo<span class=\"token punctuation\">'</span>}<span class=\"token punctuation\">\"</span></span>\n<span class=\"token punctuation\">></span></span>foo<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;/</span>button</span><span class=\"token punctuation\">></span></span>\n</code></pre>\n<p>Can be shortened to:</p>\n<pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;</span>button</span>\n\t<span class=\"token attr-name\"><span class=\"token namespace\">class:</span>selected</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>{current === <span class=\"token punctuation\">'</span>foo<span class=\"token punctuation\">'</span>}<span class=\"token punctuation\">\"</span></span>\n\t<span class=\"token attr-name\"><span class=\"token namespace\">on:</span>click</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>{() => current = <span class=\"token punctuation\">'</span>foo<span class=\"token punctuation\">'</span>}<span class=\"token punctuation\">\"</span></span>\n<span class=\"token punctuation\">></span></span>foo<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;/</span>button</span><span class=\"token punctuation\">></span></span>\n</code></pre>\n<h2 id=\"component-children\">Component children<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#component-children\"></a></h2>\n<p>We can render children of a component like React by passing content between a component's tags.</p>\n<p>In React, it looks like this:</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">childComponent</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> children <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword control-flow\">return</span> <span class=\"token punctuation\">(</span>\n        <span class=\"token operator\">&#x3C;</span>div<span class=\"token operator\">></span>\n            <span class=\"token punctuation\">{</span>children<span class=\"token punctuation\">}</span>\n        <span class=\"token operator\">&#x3C;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n    <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>In Svelte, it looks like this:</p>\n<pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;</span>div</span><span class=\"token punctuation\">></span></span>\n\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;</span>slot</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;/</span>slot</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;/</span>div</span><span class=\"token punctuation\">></span></span>\n</code></pre>\n<p>Fallbacks can be specified by placing data between the <code>&#x3C;slot></code> tags. Think of this like a default value to the children \"prop\". This is called a <em>default slot</em>d</p>\n<ul>\n<li><a href=\"https://svelte.dev/tutorial/named-slots\">named slots</a> can also be used for more control over placement.</li>\n</ul>\n<hr>\n<strong>Children</strong>\n<ol>\n<li><a href=\"/notes/TxUkS5FuZPJ7z1NN3FOjE\">Sveltekit</a></li>\n</ol>","noteIndex":{"id":"olZIVfSs2uLLr3BppFh4K","title":"Digital Garden","desc":"","updated":1674517603573,"created":1615482407722,"custom":{"nav_order":0,"permalink":"/"},"fname":"root","type":"note","vault":{"fsPath":"../main/tech","name":"tech"},"contentHash":"effb007003ca6a91d7fd0c293e1d2436","links":[{"type":"wiki","from":{"fname":"root","id":"olZIVfSs2uLLr3BppFh4K","vaultName":"tech"},"value":"testing.method.unit","alias":"unit testing","position":{"start":{"line":18,"column":121,"offset":1146},"end":{"line":18,"column":157,"offset":1182},"indent":[]},"xvault":false,"sameFile":false,"to":{"fname":"testing.method.unit"}},{"type":"wiki","from":{"fname":"root","id":"olZIVfSs2uLLr3BppFh4K","vaultName":"tech"},"value":"general.arch.microservice","alias":"microservices","position":{"start":{"line":18,"column":188,"offset":1213},"end":{"line":18,"column":231,"offset":1256},"indent":[]},"xvault":false,"sameFile":false,"to":{"fname":"general.arch.microservice"}},{"type":"wiki","from":{"fname":"root","id":"olZIVfSs2uLLr3BppFh4K","vaultName":"tech"},"value":"paradigm.oop","alias":"OOP","position":{"start":{"line":36,"column":227,"offset":2718},"end":{"line":36,"column":247,"offset":2738},"indent":[]},"xvault":false,"sameFile":false,"to":{"fname":"paradigm.oop"}}],"anchors":{"tags":{"type":"header","text":"Tags","value":"tags","line":46,"column":0,"depth":3},"resources":{"type":"header","text":"Resources","value":"resources","line":55,"column":0,"depth":2},"ue-unexamined-resources":{"type":"header","text":"UE (Unexamined) Resources","value":"ue-unexamined-resources","line":56,"column":0,"depth":3},"e-examined-resources":{"type":"header","text":"E (Examined) Resources","value":"e-examined-resources","line":59,"column":0,"depth":3},"resources-1":{"type":"header","text":"Resources","value":"resources-1","line":62,"column":0,"depth":3}},"children":["40ubf88tephzbdjte8cdsa0","zFMjbn3xihVNHjUIdZCD1","IK6NOKemuDjhfstJBovKL","ZaTr28eWk1DrXOEsc1YVb","Vi0WYVLZunVM9iR8XZJn3","ngAbg7gluvbt1bY1UIRsi","RCPPXSakm5TvKka8kOmVp","LIcuGYV0DDt1VWbvH6Sed","MPx8ykTP57I40WTZvTP7f","ZU5WmdTG1bHoE8RcmZXZG","jqWiyYJff92RjXuUQt9PQ","KihijM8OQvZ4pASkkhqzL","F9vyqvls3OBCujtukqKhy","k6jxm2b3edgkhbordpuz6v1","facc2b01-755a-409f-99f6-57bef2d1501f","bZumdyapJ2H0wWWOmJ45i","elqpgoe2r951si4xrhujppj","m5ov42Vm6mR7RQWTvl1NW","cw8cerc0cos8lh871oz8rtf","PZxxZ4iESzSlbbHJKxuAZ","UDu62Pa6BaRqlG8uGoMhy","u3zcndycwqessho5h6x0nz9","ZgCUp366YrF2Tyky2NT73","DVpVUmavSoVDA7UIlPzLX","nMCtMXVvjBsJk3iw1zoIO","ANfx9Z4a6ZA0uJuSHtbIJ","BkG557LKUYbH1DnxprEVT","1TaH8zDTM98FZ9SYaeXLM","02v7ymc144e5c4pv3edkud7","dc79799f-a55d-48ab-a8be-c48adb1b19c0","f6feef57-b8f5-451f-a09a-7b63f6a07183","4sz47Y0LKs1Si73rWtyyh","g7ulqi8no93ezeocbesc3ll","5a9fb1df-478e-4687-9be0-5cb97e61ec57","1374e9e9-1cbc-4e1f-b1ca-66b8569533dd","D8Z3rjXkSj2EOymXQXF4Z","np3c1ykvnjqv5xoombpfwqz","f529cc34-aba0-45ca-ad7e-02ddda318941","0zcauha3il2NqtxZazIo7","9bbd6f68-03b2-41f4-92e4-2ca313e8b450","5a2ab598-fa7e-4471-8bda-9f5831b679ae","uV6w4mZPoohWyZV4Xaad0","QHXEIyeZGIGMVi5Q52UWI","RgE0mZLaUjPftFPZsiAoe","mytCOts26Pidush65tdRW","fwUzxfLSPMH1eL8oBoLWx","wazdsda6h25x66edvfmeuiv","TbW7PM9bg1y5TGkiWwQ8b","xiSIDeEtIc8X0lpUQlppI","0jxgntiLNHWFuCbzqtFGF","GkdMprLUe4QQULBxmGN6V","4SYc6v5hxY5g6Ip6kjpwO","czi7ilt2i1uoqm1f2otbntj","fqVQpS9FBiXgKsZX3R3sJ","L5JUZlGAGvTxrsEBB7DY8","ttyri4pwfyn5lcx0vp9804o","TeTedoeS2LdHPR632eCpM","ulicRRwo3lSFzh3tMfWH9","p7d24vyb8m00ombzn34t50c","e65188a1-177e-4ab2-99f9-75f85d537621","fajYnbVhCRDi74xn0H30R","bArGdGwqo3iFkyKMyE7qR","4Dcp7gbEVoLLgfu7bXFai","5d700782-fb81-416e-83f9-5dd88260e350","zubgzhNFE6KlTgXcjTz6O","8lpdfWa0cbSq1XJQbcYcY","2psluywdc416t7vrql0m058","17I8ZksXvqCH1mRtZDjHp","kF916Ow84qpJJeMRkWMIo","tMLkLcrIHHBz56xVmBLkP","CSePBQ6q7qhowKESqVwt7","laZ4OfLhZNK1Kuy6GaWUr","z5IJblOknQhMzZ5QZh4ye","N36FHxfxzwJfxDY3miWyX","3bb25f58-2b50-4fa3-af55-48ea9f88a081","7x07qjgbitozdfszqzuy7ix","u93Rz4fEWGu6VBR30Zraf","9hjMHnKvYT4jLKvuDSXaV","qC5GxCZBmNb4Ip6c0kU8x","LgW7mTIALODoXc54B3p6S","UYPxfHBFWX7fb6hHU5bB6","74lYtC8NKpCzcyFOZTfR1","sEoBNAEuaTxwSmTXDonZt","dj0jr9mpvs62e2pkg3zc3yy","z8ie0xjogb6ht7gzowav5xr","qxSOd6SPN8qf9ZUojVFDX","WQoMTf6VXBaxCgksXAVsj","2Mw4XgfyCHXHNOX5yoCIY","qcdt2f7jo51muquo5r95dpo","0XJqmcdtcMZu66glBI5O8","lK8r8BXS4ThiUTe4xKIZe","93de42ca-53ea-460a-baa7-b9ec5c47cb1e","Rxs2jaGpdFzqYtP7lAJFJ","aO8W81Z0PyIb6Hs7nOHPW","lhzisalkebu4w5n01np07i0","7b5l4b6fi65n7sv9org5q1l","I01hENHnh8Tqu3Ok8sLzG","03o3n0hz9v9jtb7j889zpd4","evqsPNutOaZ8hcBCqxFQu","zhhxcjZUHdU8uRLwGb9Zh","G1aFACZB2ooWGMGwyd3ZW","YWy1C4tgoaCcw1m8JJsr7","Szj3o5iaNxPpesiCqwrbu","613syb18hb3v0u1ydvor7ru","XhvCDW3fIw6h6MhY5ticq","Q70g7SusFZBQXzkuQifv4","AzfWDH3wp7jFpL2EYxBcW","y0fwpZ9qMqirsLiFyOciU","ZF8xj8wwDUqKlrwTrCFZ1","tAJvhqhdfyZZa87QHq1TU","4hRmipi8lxpBLyzWu5JVB","iTg0C7QjvnmqBZeEigJNs","3babc3d2-79ae-470a-9c06-ab8bba2e684e","bF3UsMFya3fMeXWDspVov","ULkfbL9WpktbVYnzhl6Jw","PpNOO8JYWe6dM8wruSa7x","di40pCxDn7IiqE8lFdD46","rmW0mkerqV35I8QPji6lM","3IFIK1ByzeIxZCByryGLN","iImkYAKfkw3beAl6pLbDn","ecDe8DNWrkeQTwpTEvHje","i2it5id8qwtg27n4usg8bo1","Yqhdd9mSJGN7OJOeyoSD2","Ws5tah8tpeyn9tK8VBTg8","gWAg15uBJgkS2B0wcpMAa","l7V3v2ep1YdDCt7DOr7Ci","yM2PJBdqJnHpD63cPA6sW","qn0bre7eLbi3QMbCfWkUi","fSu0KxFL41IRouotqmbHs","0gtg24Mj1a1bQFPRGQNlO","7iQPBMltLPLbFEz2qbjPu","yoh4pwoXcfELInGKRdYf6","dCGCWXgAmiOZXbdULT1m6","jMavlje07sNa6hSEIE8WA","Xxm0JE4dKHxrQAaZfzvxD","nRb6Im4Kcmc2ZWE7K1jZ1","PAEBZCyFBZJyR7OoMZ41E","PQ6km8RgRCuyICBPOYz8f","x5tm1nfjzyawwzedy3yitgd","2bhftt8rGuxYu4pFgNqru","hjYIZpHQWuXfeEoGeJEKW","K2M9bQqVq2eQfm29eslKL","X8obW1iKwYsvNgKWGyCzy","yJwSC7hqYIezTFHf5i0Ev","c4Z7ETcOHUILRMH32Sfjw","qiR6dIu857b9M9kTqjOyK","fc2coz74cnfy5czzofx4h5x","Ku1OgHMhELajzo61Gx7ye","LUrfhDWo8wuwZu7CN9TV8","osu6JGOnvXJ5gt3tpqWZY","1a6173cd-cf13-4b34-a522-8350bf9a364f","S2sBltrPfd8a7ICuD7CuH","GLQ2pmkJUNUa93THBDVsD","md6xitz4exia2joa06i490b","oWCuBXOg6JWfZzjmKxmNl","jOmhZ8ovLYTPbpM1vqSDx","p9bov84s0isgkl1ysaw93kk","FraC6xzLy1ei91l1ICyc9","6ceBas2RE9Q4787GDngH7","734cd78d-0bc9-426b-803d-1efc84dfffe5","k4Bb09px6r0FxIRs49SXV","oaG3H1S9IUBO644nGZigu","Ka7agQJkUMRSWN0uFdkWK","si3z090WsiLasMhJBa1Az","hs6rwzt4mogiicoc4gcykbi","ljKAVERmdEiKLK9hXGKBm","zxt3lhonfdhglvijd17ua8c","dd7dopve1dudqkoibkqvti4","923tgifqf59ovv5yldtyi0a","vrjwp01goqw47fqctm4f4lo","c99gdmmppju3r1tth8cb2jx","z2pvn5qxdz84zgygqzxage8"],"parent":null,"data":{},"body":"This Dendron vault of tech knowledge is organized according to domains and their sub-domains, along with specific implementation of those domains.\n\nFor instance, Git itself is a domain. Sub-domains of Git would include things like `commit`,\n`tags`, `reflog` etc. implementations of each of those could be `cli`, `strat`\n(strategies), `inner`, and so on.\n\nThe goal of the wiki is to present data in a manner that is from the perspective\nof a querying user. Here, a user is a programmer wanting to get key information\nfrom a specific domain. For instance, if a user wants to use postgres functions\nand hasn't done them in a while, they should be able to query\n`postgres.functions` to see what information is available to them.\n\nThis wiki has been written with myself in mind. While learning each of these\ndomains, I have been sensitive to the \"aha\" moments and have noted down my\ninsights as they arose. I have refrained from capturing information that I\nconsidered obvious or otherwise non-beneficial to my own understanding.\n\nAs a result, I have allowed myself to use potentially arcane concepts to explain other ones. For example, in my note on [[unit testing|testing.method.unit]], I have made reference to the [[microservices|general.arch.microservice]] note. If these notes were made with the public in mind, this would be a very bad strategy, given that you'd have to understand microservices to be able to draw that same parallel that I've already drawn. Since these notes are written for myself, I have been fine with taking these liberties.\n\nWhat I hope to gain from this wiki is the ability to step away from any\ngiven domain for a long period of time, and be able to be passably useful for\nwhatever my goals are within a short period of time. Of course this is all\nvague sounding, and really depends on the domain along with the ends I am\ntrying to reach.\n\nTo achieve this, the system should be steadfast to:\n- be able to put information in relatively easily, without too much thought\n\trequired to its location. While location is important, Dendron makes it easy\n\tto relocate notes, if it becomes apparent that a different place makes more\n\tsense.\n- be able to extract the information that is needed, meaning there is a\n\thigh-degree in confidence in the location of the information. The idea is\n\tthat information loses a large amount of its value when it is unfindable.\n\tTherefore, a relatively strict ideology should be used when determining\n\twhere a piece of information belongs.\n\t- Some concepts might realistically belong to multiple domains. For instance, the concept of *access modifiers* can be found in both `C#` and `Typescript`. Therefore, this note should be abstracted to a common place, such as [[OOP|paradigm.oop]].\n\nThis Dendron vault is the sister component to the [General Second Brain](https://tech.kyletycholiz.com).\n\n### Tags\nThroughout the garden, I have made use of tags, which give semantic meaning to the pieces of information.\n\n- `ex.` - Denotes an *example* of the preceding piece of information\n- `spec:` - Specifies that the preceding information has some degree of *speculation* to it, and may not be 100% factual. Ideally this gets clarified over time as my understanding develops.\n- `anal:` - Denotes an *analogy* of the preceding information. Often I will attempt to link concepts to others that I have previously learned.\n- `mn:` - Denotes a *mnemonic*\n- `expl:` - Denotes an *explanation*\n\n## Resources\n### UE (Unexamined) Resources\nOften, I come across sources of information that I believe to be high-quality. They may be recommendations or found in some other way. No matter their origin, I may be in a position where I don't have the time to fully examine them (and properly extract notes), or I may not require the information at that moment in time. In cases like these, I will add reference to a section of the note called **UE Resources**. The idea is that in the future when I am ready to examine them, I have a list of resources that I can start with. This is an alternative strategy to compiling browser bookmarks, which I've found can quickly become untenable.\n\n### E (Examined) Resources\nOnce a resource has been thoroughly examined and has been mined for notes, it will be moved from *UE Resources* to *E Resources*. This is to indicate that (in my own estimation), there is nothing more to be gained from the resource that is not already in the note.\n\n### Resources\nThis heading is for inexhaustible resources. \n- A prime example would be a quality website that continually posts articles.  - Another example would be a tool, such as software that measures frequencies in a room to help acoustically treat it.\n"},"collectionChildren":null,"customHeadContent":null,"config":{"version":5,"dev":{"enablePreviewV2":true},"commands":{"lookup":{"note":{"selectionMode":"extract","confirmVaultOnCreate":false,"leaveTrace":false,"bubbleUpCreateNew":true,"fuzzThreshold":0.2,"vaultSelectionModeOnCreate":"smart"}},"insertNote":{"initialValue":"templates"},"insertNoteLink":{"aliasMode":"none","enableMultiSelect":false},"insertNoteIndex":{"enableMarker":false},"randomNote":{},"copyNoteLink":{"aliasMode":"title"},"templateHierarchy":"template"},"workspace":{"dendronVersion":"0.83.0","vaults":[{"fsPath":"../main/tech","name":"tech"}],"journal":{"dailyDomain":"daily","name":"journal","dateFormat":"y.MM.dd","addBehavior":"childOfDomain"},"scratch":{"name":"scratch","dateFormat":"y.MM.dd.HHmmss","addBehavior":"asOwnDomain"},"graph":{"zoomSpeed":1,"createStub":false},"enableAutoCreateOnDefinition":false,"enableXVaultWikiLink":false,"enableRemoteVaultInit":true,"workspaceVaultSyncMode":"noCommit","enableAutoFoldFrontmatter":true,"maxPreviewsCached":10,"maxNoteLength":204800,"task":{"name":"","dateFormat":"","addBehavior":"childOfCurrent","statusSymbols":{"":" ","wip":"w","done":"x","assigned":"a","moved":"m","blocked":"b","delegated":"l","dropped":"d","pending":"y"},"prioritySymbols":{"H":"high","M":"medium","L":"low"},"todoIntegration":false,"createTaskSelectionType":"selection2link","taskCompleteStatus":["done","x"]},"enableUserTags":true,"enableHashTags":true,"enableEditorDecorations":true,"enableFullHierarchyNoteTitle":false},"preview":{"enableFMTitle":true,"enableNoteTitleForLink":true,"enableMermaid":true,"enablePrettyRefs":true,"enableKatex":true,"automaticallyShowPreview":false,"enableFrontmatterTags":true,"enableHashesForFMTags":false},"publishing":{"enableFMTitle":true,"enableNoteTitleForLink":true,"enablePrettyRefs":true,"enableKatex":true,"copyAssets":true,"siteHierarchies":["root"],"writeStubs":false,"siteRootDir":"docs","seo":{"title":"Dendron","description":"The Tech Digital Garden of Kyle Tycholiz"},"github":{"cname":"tech.kyletycholiz.com","enableEditLink":true,"editLinkText":"Edit this page on GitHub","editBranch":"master","editViewMode":"tree"},"enableSiteLastModified":true,"enableFrontmatterTags":true,"enableHashesForFMTags":false,"enableRandomlyColoredTags":true,"enableTaskNotes":true,"enablePrettyLinks":true,"searchMode":"lookup","enableMermaid":true,"siteUrl":"https://tech.kyletycholiz.com","duplicateNoteBehavior":{"action":"useVault","payload":["tech"]},"siteFaviconPath":"favicon.ico","siteIndex":"root"}}},"__N_SSG":true}