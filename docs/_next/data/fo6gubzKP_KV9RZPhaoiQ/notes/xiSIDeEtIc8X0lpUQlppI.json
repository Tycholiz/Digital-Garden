{"pageProps":{"note":{"id":"xiSIDeEtIc8X0lpUQlppI","title":"Elastic Search","desc":"","updated":1708464471694,"created":1615339612946,"custom":{},"fname":"elastic-search","type":"note","vault":{"fsPath":"../main/tech","name":"tech"},"contentHash":"9b78e16de16c142658fb0d64bc054bd1","links":[{"type":"wiki","from":{"fname":"elastic-search","id":"xiSIDeEtIc8X0lpUQlppI","vaultName":"tech"},"value":"db.design.normalization","alias":"denormalized","position":{"start":{"line":10,"column":28,"offset":783},"end":{"line":10,"column":68,"offset":823},"indent":[]},"xvault":false,"sameFile":false,"to":{"fname":"db.design.normalization"}},{"type":"wiki","from":{"fname":"elastic-search","id":"xiSIDeEtIc8X0lpUQlppI","vaultName":"tech"},"value":"db.strategies.index","alias":"indexes","position":{"start":{"line":70,"column":11,"offset":4679},"end":{"line":70,"column":42,"offset":4710},"indent":[]},"xvault":false,"sameFile":false,"to":{"fname":"db.strategies.index"}},{"type":"wiki","from":{"fname":"elastic-search","id":"xiSIDeEtIc8X0lpUQlppI","vaultName":"tech"},"value":"db.strategies.index","alias":"database indexes","position":{"start":{"line":121,"column":47,"offset":8495},"end":{"line":121,"column":87,"offset":8535},"indent":[]},"xvault":false,"sameFile":false,"to":{"fname":"db.strategies.index"}},{"from":{"fname":"flink","id":"ulicRRwo3lSFzh3tMfWH9","vaultName":"tech"},"type":"backlink","position":{"start":{"line":15,"column":208,"offset":1312},"end":{"line":15,"column":226,"offset":1330},"indent":[]},"value":"elastic-search"},{"from":{"fname":"nosql","id":"ZF8xj8wwDUqKlrwTrCFZ1","vaultName":"tech"},"type":"backlink","position":{"start":{"line":62,"column":1,"offset":4477},"end":{"line":62,"column":20,"offset":4496},"indent":[]},"value":"elastic-search"},{"from":{"fname":"db.distributed.partitioning","id":"FuHcb7zDdczt8IDTtOH0b","vaultName":"tech"},"type":"backlink","position":{"start":{"line":106,"column":39,"offset":12057},"end":{"line":106,"column":57,"offset":12075},"indent":[]},"value":"elastic-search"}],"anchors":{"what-is-it":{"type":"header","text":"What is it?","value":"what-is-it","line":8,"column":0,"depth":3},"example-reddit-post-as-elasticsearch-document":{"type":"header","text":"Example Reddit post as ElasticSearch document:","value":"example-reddit-post-as-elasticsearch-document","line":18,"column":0,"depth":4},"why-use-it":{"type":"header","text":"Why use it?","value":"why-use-it","line":34,"column":0,"depth":3},"as-part-of-the-elasticstack-elk":{"type":"header","text":"As part of the ElasticStack (ELK)","value":"as-part-of-the-elasticstack-elk","line":59,"column":0,"depth":4},"how-does-it-work":{"type":"header","text":"How does it work?","value":"how-does-it-work","line":65,"column":0,"depth":3},"how-data-is-retrieved":{"type":"header","text":"How data is retrieved","value":"how-data-is-retrieved","line":80,"column":0,"depth":4},"how-to-use-it":{"type":"header","text":"How to use it?","value":"how-to-use-it","line":97,"column":0,"depth":3},"searching-data":{"type":"header","text":"Searching data","value":"searching-data","line":98,"column":0,"depth":4},"performing-aggregations":{"type":"header","text":"Performing aggregations","value":"performing-aggregations","line":105,"column":0,"depth":4},"elasticsearch-primitives":{"type":"header","text":"ElasticSearch Primitives","value":"elasticsearch-primitives","line":120,"column":0,"depth":2},"index":{"type":"header","text":"Index","value":"index","line":125,"column":0,"depth":3},"index-mapping":{"type":"header","text":"Index Mapping","value":"index-mapping","line":130,"column":0,"depth":3},"analyzer":{"type":"header","text":"Analyzer","value":"analyzer","line":135,"column":0,"depth":3},"tokenizer":{"type":"header","text":"Tokenizer","value":"tokenizer","line":143,"column":0,"depth":3},"n-gram-tokenizer":{"type":"header","text":"N-gram tokenizer","value":"n-gram-tokenizer","line":152,"column":0,"depth":4},"edge-n-gram-tokenizer":{"type":"header","text":"Edge N-gram tokenizer","value":"edge-n-gram-tokenizer","line":156,"column":0,"depth":4},"filter":{"type":"header","text":"Filter","value":"filter","line":159,"column":0,"depth":3},"normalizer":{"type":"header","text":"Normalizer","value":"normalizer","line":162,"column":0,"depth":3},"queries":{"type":"header","text":"Queries","value":"queries","line":168,"column":0,"depth":2},"full-text-query":{"type":"header","text":"Full-text Query","value":"full-text-query","line":182,"column":0,"depth":3},"tools":{"type":"header","text":"Tools","value":"tools","line":190,"column":0,"depth":1}},"children":["ds088khexmfzxp8i9kkuwlb"],"parent":"olZIVfSs2uLLr3BppFh4K","data":{}},"body":"<h1 id=\"elastic-search\">Elastic Search<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#elastic-search\"></a></h1>\n<h3 id=\"what-is-it\">What is it?<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#what-is-it\"></a></h3>\n<p>ElasticSearch is an open-source, RESTful, distributed search and analytics engine built on Apache Lucene</p>\n<ul>\n<li>You can send data in the form of JSON documents to Elasticsearch using the API. \n<ul>\n<li>Elasticsearch automatically stores the original document and adds a searchable reference to the document in the cluster’s index. You can then search and retrieve the document using the Elasticsearch API</li>\n</ul>\n</li>\n<li>due to its distributed nature, documents are available on all nodes of the cluster.\n<ul>\n<li>Each document in an index belongs to one primary shard, but is replicated amongst the other shards.\n<ul>\n<li>ES selects the shards that the query should go to in a round-robin fashion</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>ES is NoSQL and is more powerful, flexible, and faster than SQL's LIKE</li>\n<li>ES Documents are heavily <a href=\"/notes/0o0K3Z7zerXCY3v3Hoz96\">denormalized</a>, resulting in documents that do not reference one another.</li>\n</ul>\n<h4 id=\"example-reddit-post-as-elasticsearch-document\">Example Reddit post as ElasticSearch document:<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#example-reddit-post-as-elasticsearch-document\"></a></h4>\n<pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"id\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"abcdefg\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"title\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Amazing subreddit for nature lovers!\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"content\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Hey everyone!\\n\\nI just stumbled upon this incredible subreddit called NatureIsBeautiful and I can't stop scrolling through the posts.\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"author\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"nature_enthusiast23\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"created_at\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"2023-06-05T14:30:00Z\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"subreddit\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"NatureIsBeautiful\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"upvotes\"</span><span class=\"token operator\">:</span> <span class=\"token number\">1500</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"comments\"</span><span class=\"token operator\">:</span> <span class=\"token number\">87</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"tags\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"nature\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"photography\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"community\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"url\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"https://www.reddit.com/r/NatureIsBeautiful/comments/abcdefg/amazing_subreddit_for_nature_lovers/\"</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h3 id=\"why-use-it\">Why use it?<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#why-use-it\"></a></h3>\n<p>ES is typically used when you have:</p>\n<ul>\n<li>high data volumes, and are likely to need multiple nodes to process the data</li>\n<li>unstructured or semi-structured data (log files, text, ...). You ingest the raw data in its original form.</li>\n<li>the data is treated as a blob, and thus never updated. It’s ingested once, queried, and then purged according to some bulk retention policy (e.g. older than 30 days)</li>\n<li>you need to access aggregate data more than individual records</li>\n<li>you need to index in real time, allowing you ingest high-throughput data streams and query that data quickly, making it well-suited for applications that require constant updates and querying of rapidly changing data</li>\n</ul>\n<p>When to use ElasticSearch?</p>\n<ul>\n<li>If your use case requires a full-text search, including features like fuzzy matching, stemming (e.g. having the word \"run\" also match \"runs\", \"running\" etc), and relevance scoring.</li>\n<li>If your use case involves chatbots where these bots resolve most of the queries, such as when a person types something there are high chances of spelling mistakes. You can make use of the in-built fuzzy matching practices of the ElasticSearch</li>\n<li>Also, ElasticSearch is useful in storing logs data and analyzing it</li>\n</ul>\n<p>Other use cases:</p>\n<ul>\n<li>Add a search box to an app or website</li>\n<li>Store and analyze logs, metrics, and security event data</li>\n<li>Use machine learning to automatically model the behavior of your data in real time</li>\n<li>Automate business workflows using Elasticsearch as a storage engine</li>\n<li>Manage, integrate, and analyze spatial information using Elasticsearch as a geographic information system (GIS)</li>\n<li>Store and process genetic data using Elasticsearch as a bioinformatics research tool</li>\n</ul>\n<p>Elastic search scales horizontally with your requirements.</p>\n<p>Forms part of the ELK stack (along with Logstash and Kibana), giving us log analysis, monitoring, and visualization in the context of application and server logs.</p>\n<h4 id=\"as-part-of-the-elasticstack-elk\">As part of the ElasticStack (ELK)<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#as-part-of-the-elasticstack-elk\"></a></h4>\n<p>ELK consists of ElasticSearch, Kibana, Beats and Logstash</p>\n<ul>\n<li><em>Logstash</em> and <em>Beats</em> facilitate collecting, aggregating, and enriching your data and storing it in Elasticsearch</li>\n<li><em>Kibana</em> enables you to interactively explore, visualize, and share insights into your data and manage and monitor the stack.</li>\n<li><em>Elasticsearch</em> is where the indexing, search, and analysis magic happens.</li>\n</ul>\n<h3 id=\"how-does-it-work\">How does it work?<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#how-does-it-work\"></a></h3>\n<p>When you're searching for text. ES ranks search results based on how close the phrase or words are. SQL doesn't do this nearly as well.</p>\n<ul>\n<li>ES starts to shine when you start to do a lot of filtering</li>\n</ul>\n<p>Elasticsearch chooses the best underlying data structure to use for a particular field type. </p>\n<ul>\n<li>Text is tokenized and stored in an inverted index, which supports very fast full-text searches.\n<ul>\n<li>an inverted index lists every unique word that appears in any document and identifies all of the documents each word occurs in.</li>\n<li>ex. if we search for the string <code>London</code>, it is the inverted index that allows us to quickly know that the string occurs in 6 different documents in the index.</li>\n</ul>\n</li>\n<li>Numeric and geolocational data is stored in BKD trees\n<ul>\n<li>this allows for fast-range searches and nearest-neighbor queries in large data sets</li>\n</ul>\n</li>\n</ul>\n<p>Secondary <a href=\"/notes/jiITIvU42MBAYcbXheWwI\">indexes</a> are the raison d’être of search servers such as Elasticsearch.</p>\n<p>Mapping is the process by which ES determines how a document is stored and indexed.</p>\n<h4 id=\"how-data-is-retrieved\">How data is retrieved<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#how-data-is-retrieved\"></a></h4>\n<p>Based on the query terms passed, each document retrieved will be assigned a score. The documents are then returned to the client sorted by that score.</p>\n<ul>\n<li>this is <a href=\"https://www.elastic.co/blog/practical-bm25-part-2-the-bm25-algorithm-and-its-variables\">the BM25 algorithm</a></li>\n<li>note: if I pass \"prescription refill\", then ES recognizes that there are 2 terms: <code>prescription</code> and <code>refill</code></li>\n</ul>\n<p>Some factors that determine the document's score:</p>\n<ul>\n<li><em>rarity</em> - queries that contain rarer terms (amongst <em>all</em> documents) have a higher multiplier, meaning they contribute more to the final score\n<ul>\n<li>ex. the word \"the\" is likely to be very common amongst all matching documents, while the word \"elephant\" likely to be rare. As a result, ES recognizes that the word \"elephant\" is more important, and makes its contribution to the final document's score higher.</li>\n<li>this is known as <em>Inverse Document Frequency (IDF)</em></li>\n</ul>\n</li>\n<li><em>density</em> - documents that are longer than average will have the score penalized. \n<ul>\n<li>That is, the more terms in the document (ones that don't match the query), the lower the score for the document.</li>\n<li>expl: this makes intuitive sense: if a document is 300 pages long and mentions the word elephant once, the document is more likely to have said something like \"elephant in the room\", rather than it actually being a document about elephants. On the other hand, if the document is a tweet of 140 characters, then the word Elephant is much more likely to have actually been about Elephants.</li>\n<li>this is known as <em>Term Frequency (TF)</em></li>\n</ul>\n</li>\n</ul>\n<p>In the absense of replicas, a given query and set of documents will result in a more-or-less deterministic result</p>\n<ul>\n<li>this non-determinism resulting from replicas happens because ES determines which shard the query should go to in a round-robin fashion, so the same query run twice in a row will likely go to different copies of the same shard.</li>\n</ul>\n<h3 id=\"how-to-use-it\">How to use it?<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#how-to-use-it\"></a></h3>\n<h4 id=\"searching-data\">Searching data<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#searching-data\"></a></h4>\n<p>The Elasticsearch REST APIs support structured queries, full text queries, and complex queries that combine the two.</p>\n<ul>\n<li><em>Structured queries</em> are similar to the types of queries you can construct in SQL. \n<ul>\n<li>ex. you could search the gender and age fields in your employee index and sort the matches by the hire_date field. </li>\n<li><a href=\"https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl.html\">Query SDL</a>, <a href=\"https://www.elastic.co/guide/en/elasticsearch/reference/current/sql-overview.html\">ElasticSearch SQL</a></li>\n</ul>\n</li>\n<li><em>Full-text queries</em> find all documents that match the query string and return them sorted by relevance—how good a match they are for your search terms.</li>\n</ul>\n<h4 id=\"performing-aggregations\">Performing aggregations<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#performing-aggregations\"></a></h4>\n<p>Aggregations enable you to build complex summaries of your data and gain insight into key metrics, patterns, and trends.</p>\n<p>Instead of just finding the proverbial “needle in a haystack”, aggregations enable you to answer questions like:</p>\n<ul>\n<li>How many needles are in the haystack?</li>\n<li>What is the average length of the needles?</li>\n<li>What is the median length of the needles, broken down by manufacturer?</li>\n<li>How many needles were added to the haystack in each of the last six months?</li>\n<li>What are your most popular needle manufacturers?</li>\n<li>Are there any unusual or anomalous clumps of needles?</li>\n</ul>\n<p>Because aggregations leverage the same data-structures used for search, they are also very fast.</p>\n<hr>\n<h2 id=\"elasticsearch-primitives\">ElasticSearch Primitives<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#elasticsearch-primitives\"></a></h2>\n<p>Comparison to RDBMS</p>\n<ul>\n<li>RDBMS => Databases => Tables => Columns/Rows</li>\n<li>Elasticsearch => Clusters => Indices => Shards => Documents</li>\n</ul>\n<h3 id=\"index\">Index<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#index\"></a></h3>\n<p>An Elasticsearch index is a logical namespace that holds a collection of documents</p>\n<ul>\n<li>That is, an ES Index has nothing to do with <a href=\"/notes/jiITIvU42MBAYcbXheWwI\">database indexes</a>, and are more comparable to tables in SQL</li>\n<li>\"indexing a document\" means \"inserting a document into the index\"</li>\n</ul>\n<h3 id=\"index-mapping\">Index Mapping<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#index-mapping\"></a></h3>\n<p>essentially a schema for how data will be structured in the index</p>\n<p>Each field in a mapping has an analyzer associated with it</p>\n<h3 id=\"analyzer\">Analyzer<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#analyzer\"></a></h3>\n<p>Each analyzer contains:</p>\n<ul>\n<li>a tokenizer</li>\n<li>a normalizer</li>\n<li>filters</li>\n</ul>\n<p>ES has built-in analyzers, but we can define custom ones, where we define our own tokenizer</p>\n<h3 id=\"tokenizer\">Tokenizer<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#tokenizer\"></a></h3>\n<ul>\n<li>converts text into tokens\n<ul>\n<li>ex. converts \"a quick brown fox jumps over the lazy dog\" into terms <code>[\"a\", \"quick\", \"brown\"]</code> etc.</li>\n</ul>\n</li>\n</ul>\n<p>Tokenizer types:</p>\n<ul>\n<li>word-oriented</li>\n<li>partial-word</li>\n<li>structured text</li>\n</ul>\n<h4 id=\"n-gram-tokenizer\">N-gram tokenizer<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#n-gram-tokenizer\"></a></h4>\n<p>can break a word up into a sliding window of continuous letters</p>\n<ul>\n<li>ex. \"quick\" -> [\"qu\", \"ui\", \"ic\", \"ck\"]</li>\n</ul>\n<h4 id=\"edge-n-gram-tokenizer\">Edge N-gram tokenizer<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#edge-n-gram-tokenizer\"></a></h4>\n<ul>\n<li>ex. \"quick\" -> [\"q\", \"qu\", \"qui\", \"quic\", \"quick\"]</li>\n</ul>\n<h3 id=\"filter\">Filter<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#filter\"></a></h3>\n<p>might do things like removing articles from the terms (e.g. <code>a</code>, <code>the</code>), or do things like include derivate words in the search (e.g. cleaner -> <code>[\"cleaning\", \"cleaned\", \"cleans\"]</code>), or a synonym filter, which adds matches for synonyms that may appear.</p>\n<h3 id=\"normalizer\">Normalizer<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#normalizer\"></a></h3>\n<p>A special type of analyzer</p>\n<ul>\n<li>emits a single token for a given input, instead of an array of tokens</li>\n</ul>\n<hr>\n<h2 id=\"queries\">Queries<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#queries\"></a></h2>\n<p>Compound vs Leaf queries</p>\n<ul>\n<li>leaf query matches against a specific field</li>\n<li>compound query combine leaf queries in various ways </li>\n</ul>\n<p>Type of compound queries</p>\n<ul>\n<li>bool (ex. <code>should</code>, <code>must_and</code> etc.)</li>\n<li>boosting</li>\n<li>constant_score</li>\n<li>dis_max - only the highest score of any leaf query within a compound query will be considered</li>\n<li>Function_score - allow us to use more complex functions to determine the score</li>\n</ul>\n<p>Leaf queries can have their scores boosted with multipliers</p>\n<h3 id=\"full-text-query\">Full-text Query<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#full-text-query\"></a></h3>\n<p>A type of leaf query</p>\n<p>Matches against text in a specific field</p>\n<p><code>match</code> is the most common type of full-text query</p>\n<h1 id=\"tools\">Tools<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#tools\"></a></h1>\n<ul>\n<li><a href=\"https://www.elastic.co/kibana\">Kibana: a data visualization platform for Elasticsearch</a></li>\n</ul>\n<hr>\n<strong>Children</strong>\n<ol>\n<li><a href=\"/notes/ds088khexmfzxp8i9kkuwlb\">Cook</a></li>\n</ol>\n<hr>\n<strong>Backlinks</strong>\n<ul>\n<li><a href=\"/notes/ulicRRwo3lSFzh3tMfWH9\">Apache Flink</a></li>\n<li><a href=\"/notes/ZF8xj8wwDUqKlrwTrCFZ1\">Nosql</a></li>\n<li><a href=\"/notes/FuHcb7zDdczt8IDTtOH0b\">Partitioning</a></li>\n</ul>","noteIndex":{"id":"olZIVfSs2uLLr3BppFh4K","title":"Digital Garden","desc":"","updated":1674517603573,"created":1615482407722,"custom":{"nav_order":0,"permalink":"/"},"fname":"root","type":"note","vault":{"fsPath":"../main/tech","name":"tech"},"contentHash":"effb007003ca6a91d7fd0c293e1d2436","links":[{"type":"wiki","from":{"fname":"root","id":"olZIVfSs2uLLr3BppFh4K","vaultName":"tech"},"value":"testing.method.unit","alias":"unit testing","position":{"start":{"line":18,"column":121,"offset":1146},"end":{"line":18,"column":157,"offset":1182},"indent":[]},"xvault":false,"sameFile":false,"to":{"fname":"testing.method.unit"}},{"type":"wiki","from":{"fname":"root","id":"olZIVfSs2uLLr3BppFh4K","vaultName":"tech"},"value":"general.arch.microservice","alias":"microservices","position":{"start":{"line":18,"column":188,"offset":1213},"end":{"line":18,"column":231,"offset":1256},"indent":[]},"xvault":false,"sameFile":false,"to":{"fname":"general.arch.microservice"}},{"type":"wiki","from":{"fname":"root","id":"olZIVfSs2uLLr3BppFh4K","vaultName":"tech"},"value":"paradigm.oop","alias":"OOP","position":{"start":{"line":36,"column":227,"offset":2718},"end":{"line":36,"column":247,"offset":2738},"indent":[]},"xvault":false,"sameFile":false,"to":{"fname":"paradigm.oop"}}],"anchors":{"tags":{"type":"header","text":"Tags","value":"tags","line":46,"column":0,"depth":3},"resources":{"type":"header","text":"Resources","value":"resources","line":55,"column":0,"depth":2},"ue-unexamined-resources":{"type":"header","text":"UE (Unexamined) Resources","value":"ue-unexamined-resources","line":56,"column":0,"depth":3},"e-examined-resources":{"type":"header","text":"E (Examined) Resources","value":"e-examined-resources","line":59,"column":0,"depth":3},"resources-1":{"type":"header","text":"Resources","value":"resources-1","line":62,"column":0,"depth":3}},"children":["40ubf88tephzbdjte8cdsa0","zFMjbn3xihVNHjUIdZCD1","IK6NOKemuDjhfstJBovKL","ZaTr28eWk1DrXOEsc1YVb","Vi0WYVLZunVM9iR8XZJn3","ngAbg7gluvbt1bY1UIRsi","RCPPXSakm5TvKka8kOmVp","LIcuGYV0DDt1VWbvH6Sed","MPx8ykTP57I40WTZvTP7f","ZU5WmdTG1bHoE8RcmZXZG","jqWiyYJff92RjXuUQt9PQ","KihijM8OQvZ4pASkkhqzL","F9vyqvls3OBCujtukqKhy","k6jxm2b3edgkhbordpuz6v1","facc2b01-755a-409f-99f6-57bef2d1501f","bZumdyapJ2H0wWWOmJ45i","elqpgoe2r951si4xrhujppj","m5ov42Vm6mR7RQWTvl1NW","cw8cerc0cos8lh871oz8rtf","PZxxZ4iESzSlbbHJKxuAZ","UDu62Pa6BaRqlG8uGoMhy","u3zcndycwqessho5h6x0nz9","ZgCUp366YrF2Tyky2NT73","DVpVUmavSoVDA7UIlPzLX","nMCtMXVvjBsJk3iw1zoIO","ANfx9Z4a6ZA0uJuSHtbIJ","BkG557LKUYbH1DnxprEVT","1TaH8zDTM98FZ9SYaeXLM","02v7ymc144e5c4pv3edkud7","dc79799f-a55d-48ab-a8be-c48adb1b19c0","f6feef57-b8f5-451f-a09a-7b63f6a07183","4sz47Y0LKs1Si73rWtyyh","g7ulqi8no93ezeocbesc3ll","5a9fb1df-478e-4687-9be0-5cb97e61ec57","1374e9e9-1cbc-4e1f-b1ca-66b8569533dd","D8Z3rjXkSj2EOymXQXF4Z","np3c1ykvnjqv5xoombpfwqz","f529cc34-aba0-45ca-ad7e-02ddda318941","0zcauha3il2NqtxZazIo7","9bbd6f68-03b2-41f4-92e4-2ca313e8b450","5a2ab598-fa7e-4471-8bda-9f5831b679ae","uV6w4mZPoohWyZV4Xaad0","QHXEIyeZGIGMVi5Q52UWI","RgE0mZLaUjPftFPZsiAoe","mytCOts26Pidush65tdRW","fwUzxfLSPMH1eL8oBoLWx","wazdsda6h25x66edvfmeuiv","TbW7PM9bg1y5TGkiWwQ8b","xiSIDeEtIc8X0lpUQlppI","0jxgntiLNHWFuCbzqtFGF","GkdMprLUe4QQULBxmGN6V","4SYc6v5hxY5g6Ip6kjpwO","czi7ilt2i1uoqm1f2otbntj","fqVQpS9FBiXgKsZX3R3sJ","L5JUZlGAGvTxrsEBB7DY8","ttyri4pwfyn5lcx0vp9804o","TeTedoeS2LdHPR632eCpM","ulicRRwo3lSFzh3tMfWH9","p7d24vyb8m00ombzn34t50c","e65188a1-177e-4ab2-99f9-75f85d537621","fajYnbVhCRDi74xn0H30R","bArGdGwqo3iFkyKMyE7qR","4Dcp7gbEVoLLgfu7bXFai","5d700782-fb81-416e-83f9-5dd88260e350","zubgzhNFE6KlTgXcjTz6O","8lpdfWa0cbSq1XJQbcYcY","2psluywdc416t7vrql0m058","17I8ZksXvqCH1mRtZDjHp","kF916Ow84qpJJeMRkWMIo","tMLkLcrIHHBz56xVmBLkP","CSePBQ6q7qhowKESqVwt7","laZ4OfLhZNK1Kuy6GaWUr","z5IJblOknQhMzZ5QZh4ye","N36FHxfxzwJfxDY3miWyX","3bb25f58-2b50-4fa3-af55-48ea9f88a081","7x07qjgbitozdfszqzuy7ix","u93Rz4fEWGu6VBR30Zraf","9hjMHnKvYT4jLKvuDSXaV","qC5GxCZBmNb4Ip6c0kU8x","LgW7mTIALODoXc54B3p6S","UYPxfHBFWX7fb6hHU5bB6","74lYtC8NKpCzcyFOZTfR1","sEoBNAEuaTxwSmTXDonZt","dj0jr9mpvs62e2pkg3zc3yy","z8ie0xjogb6ht7gzowav5xr","qxSOd6SPN8qf9ZUojVFDX","WQoMTf6VXBaxCgksXAVsj","2Mw4XgfyCHXHNOX5yoCIY","qcdt2f7jo51muquo5r95dpo","0XJqmcdtcMZu66glBI5O8","lK8r8BXS4ThiUTe4xKIZe","93de42ca-53ea-460a-baa7-b9ec5c47cb1e","Rxs2jaGpdFzqYtP7lAJFJ","aO8W81Z0PyIb6Hs7nOHPW","lhzisalkebu4w5n01np07i0","7b5l4b6fi65n7sv9org5q1l","I01hENHnh8Tqu3Ok8sLzG","03o3n0hz9v9jtb7j889zpd4","evqsPNutOaZ8hcBCqxFQu","zhhxcjZUHdU8uRLwGb9Zh","G1aFACZB2ooWGMGwyd3ZW","YWy1C4tgoaCcw1m8JJsr7","Szj3o5iaNxPpesiCqwrbu","613syb18hb3v0u1ydvor7ru","XhvCDW3fIw6h6MhY5ticq","Q70g7SusFZBQXzkuQifv4","AzfWDH3wp7jFpL2EYxBcW","y0fwpZ9qMqirsLiFyOciU","ZF8xj8wwDUqKlrwTrCFZ1","tAJvhqhdfyZZa87QHq1TU","4hRmipi8lxpBLyzWu5JVB","iTg0C7QjvnmqBZeEigJNs","3babc3d2-79ae-470a-9c06-ab8bba2e684e","bF3UsMFya3fMeXWDspVov","ULkfbL9WpktbVYnzhl6Jw","PpNOO8JYWe6dM8wruSa7x","di40pCxDn7IiqE8lFdD46","rmW0mkerqV35I8QPji6lM","3IFIK1ByzeIxZCByryGLN","iImkYAKfkw3beAl6pLbDn","ecDe8DNWrkeQTwpTEvHje","i2it5id8qwtg27n4usg8bo1","Yqhdd9mSJGN7OJOeyoSD2","Ws5tah8tpeyn9tK8VBTg8","gWAg15uBJgkS2B0wcpMAa","l7V3v2ep1YdDCt7DOr7Ci","yM2PJBdqJnHpD63cPA6sW","qn0bre7eLbi3QMbCfWkUi","fSu0KxFL41IRouotqmbHs","0gtg24Mj1a1bQFPRGQNlO","7iQPBMltLPLbFEz2qbjPu","yoh4pwoXcfELInGKRdYf6","dCGCWXgAmiOZXbdULT1m6","jMavlje07sNa6hSEIE8WA","Xxm0JE4dKHxrQAaZfzvxD","nRb6Im4Kcmc2ZWE7K1jZ1","PAEBZCyFBZJyR7OoMZ41E","PQ6km8RgRCuyICBPOYz8f","x5tm1nfjzyawwzedy3yitgd","2bhftt8rGuxYu4pFgNqru","hjYIZpHQWuXfeEoGeJEKW","K2M9bQqVq2eQfm29eslKL","X8obW1iKwYsvNgKWGyCzy","yJwSC7hqYIezTFHf5i0Ev","c4Z7ETcOHUILRMH32Sfjw","qiR6dIu857b9M9kTqjOyK","fc2coz74cnfy5czzofx4h5x","Ku1OgHMhELajzo61Gx7ye","LUrfhDWo8wuwZu7CN9TV8","osu6JGOnvXJ5gt3tpqWZY","1a6173cd-cf13-4b34-a522-8350bf9a364f","S2sBltrPfd8a7ICuD7CuH","GLQ2pmkJUNUa93THBDVsD","md6xitz4exia2joa06i490b","oWCuBXOg6JWfZzjmKxmNl","jOmhZ8ovLYTPbpM1vqSDx","p9bov84s0isgkl1ysaw93kk","FraC6xzLy1ei91l1ICyc9","6ceBas2RE9Q4787GDngH7","734cd78d-0bc9-426b-803d-1efc84dfffe5","k4Bb09px6r0FxIRs49SXV","oaG3H1S9IUBO644nGZigu","Ka7agQJkUMRSWN0uFdkWK","si3z090WsiLasMhJBa1Az","hs6rwzt4mogiicoc4gcykbi","ljKAVERmdEiKLK9hXGKBm","zxt3lhonfdhglvijd17ua8c","dd7dopve1dudqkoibkqvti4","923tgifqf59ovv5yldtyi0a","vrjwp01goqw47fqctm4f4lo","c99gdmmppju3r1tth8cb2jx","z2pvn5qxdz84zgygqzxage8"],"parent":null,"data":{},"body":"This Dendron vault of tech knowledge is organized according to domains and their sub-domains, along with specific implementation of those domains.\n\nFor instance, Git itself is a domain. Sub-domains of Git would include things like `commit`,\n`tags`, `reflog` etc. implementations of each of those could be `cli`, `strat`\n(strategies), `inner`, and so on.\n\nThe goal of the wiki is to present data in a manner that is from the perspective\nof a querying user. Here, a user is a programmer wanting to get key information\nfrom a specific domain. For instance, if a user wants to use postgres functions\nand hasn't done them in a while, they should be able to query\n`postgres.functions` to see what information is available to them.\n\nThis wiki has been written with myself in mind. While learning each of these\ndomains, I have been sensitive to the \"aha\" moments and have noted down my\ninsights as they arose. I have refrained from capturing information that I\nconsidered obvious or otherwise non-beneficial to my own understanding.\n\nAs a result, I have allowed myself to use potentially arcane concepts to explain other ones. For example, in my note on [[unit testing|testing.method.unit]], I have made reference to the [[microservices|general.arch.microservice]] note. If these notes were made with the public in mind, this would be a very bad strategy, given that you'd have to understand microservices to be able to draw that same parallel that I've already drawn. Since these notes are written for myself, I have been fine with taking these liberties.\n\nWhat I hope to gain from this wiki is the ability to step away from any\ngiven domain for a long period of time, and be able to be passably useful for\nwhatever my goals are within a short period of time. Of course this is all\nvague sounding, and really depends on the domain along with the ends I am\ntrying to reach.\n\nTo achieve this, the system should be steadfast to:\n- be able to put information in relatively easily, without too much thought\n\trequired to its location. While location is important, Dendron makes it easy\n\tto relocate notes, if it becomes apparent that a different place makes more\n\tsense.\n- be able to extract the information that is needed, meaning there is a\n\thigh-degree in confidence in the location of the information. The idea is\n\tthat information loses a large amount of its value when it is unfindable.\n\tTherefore, a relatively strict ideology should be used when determining\n\twhere a piece of information belongs.\n\t- Some concepts might realistically belong to multiple domains. For instance, the concept of *access modifiers* can be found in both `C#` and `Typescript`. Therefore, this note should be abstracted to a common place, such as [[OOP|paradigm.oop]].\n\nThis Dendron vault is the sister component to the [General Second Brain](https://tech.kyletycholiz.com).\n\n### Tags\nThroughout the garden, I have made use of tags, which give semantic meaning to the pieces of information.\n\n- `ex.` - Denotes an *example* of the preceding piece of information\n- `spec:` - Specifies that the preceding information has some degree of *speculation* to it, and may not be 100% factual. Ideally this gets clarified over time as my understanding develops.\n- `anal:` - Denotes an *analogy* of the preceding information. Often I will attempt to link concepts to others that I have previously learned.\n- `mn:` - Denotes a *mnemonic*\n- `expl:` - Denotes an *explanation*\n\n## Resources\n### UE (Unexamined) Resources\nOften, I come across sources of information that I believe to be high-quality. They may be recommendations or found in some other way. No matter their origin, I may be in a position where I don't have the time to fully examine them (and properly extract notes), or I may not require the information at that moment in time. In cases like these, I will add reference to a section of the note called **UE Resources**. The idea is that in the future when I am ready to examine them, I have a list of resources that I can start with. This is an alternative strategy to compiling browser bookmarks, which I've found can quickly become untenable.\n\n### E (Examined) Resources\nOnce a resource has been thoroughly examined and has been mined for notes, it will be moved from *UE Resources* to *E Resources*. This is to indicate that (in my own estimation), there is nothing more to be gained from the resource that is not already in the note.\n\n### Resources\nThis heading is for inexhaustible resources. \n- A prime example would be a quality website that continually posts articles.  - Another example would be a tool, such as software that measures frequencies in a room to help acoustically treat it.\n"},"collectionChildren":null,"customHeadContent":null,"config":{"version":5,"dev":{"enablePreviewV2":true},"commands":{"lookup":{"note":{"selectionMode":"extract","confirmVaultOnCreate":false,"leaveTrace":false,"bubbleUpCreateNew":true,"fuzzThreshold":0.2,"vaultSelectionModeOnCreate":"smart"}},"insertNote":{"initialValue":"templates"},"insertNoteLink":{"aliasMode":"none","enableMultiSelect":false},"insertNoteIndex":{"enableMarker":false},"randomNote":{},"copyNoteLink":{"aliasMode":"title"},"templateHierarchy":"template"},"workspace":{"dendronVersion":"0.83.0","vaults":[{"fsPath":"../main/tech","name":"tech"}],"journal":{"dailyDomain":"daily","name":"journal","dateFormat":"y.MM.dd","addBehavior":"childOfDomain"},"scratch":{"name":"scratch","dateFormat":"y.MM.dd.HHmmss","addBehavior":"asOwnDomain"},"graph":{"zoomSpeed":1,"createStub":false},"enableAutoCreateOnDefinition":false,"enableXVaultWikiLink":false,"enableRemoteVaultInit":true,"workspaceVaultSyncMode":"noCommit","enableAutoFoldFrontmatter":true,"maxPreviewsCached":10,"maxNoteLength":204800,"task":{"name":"","dateFormat":"","addBehavior":"childOfCurrent","statusSymbols":{"":" ","wip":"w","done":"x","assigned":"a","moved":"m","blocked":"b","delegated":"l","dropped":"d","pending":"y"},"prioritySymbols":{"H":"high","M":"medium","L":"low"},"todoIntegration":false,"createTaskSelectionType":"selection2link","taskCompleteStatus":["done","x"]},"enableUserTags":true,"enableHashTags":true,"enableEditorDecorations":true,"enableFullHierarchyNoteTitle":false},"preview":{"enableFMTitle":true,"enableNoteTitleForLink":true,"enableMermaid":true,"enablePrettyRefs":true,"enableKatex":true,"automaticallyShowPreview":false,"enableFrontmatterTags":true,"enableHashesForFMTags":false},"publishing":{"enableFMTitle":true,"enableNoteTitleForLink":true,"enablePrettyRefs":true,"enableKatex":true,"copyAssets":true,"siteHierarchies":["root"],"writeStubs":false,"siteRootDir":"docs","seo":{"title":"Dendron","description":"The Tech Digital Garden of Kyle Tycholiz"},"github":{"cname":"tech.kyletycholiz.com","enableEditLink":true,"editLinkText":"Edit this page on GitHub","editBranch":"master","editViewMode":"tree"},"enableSiteLastModified":true,"enableFrontmatterTags":true,"enableHashesForFMTags":false,"enableRandomlyColoredTags":true,"enableTaskNotes":true,"enablePrettyLinks":true,"searchMode":"lookup","enableMermaid":true,"siteUrl":"https://tech.kyletycholiz.com","duplicateNoteBehavior":{"action":"useVault","payload":["tech"]},"siteFaviconPath":"favicon.ico","siteIndex":"root"}}},"__N_SSG":true}