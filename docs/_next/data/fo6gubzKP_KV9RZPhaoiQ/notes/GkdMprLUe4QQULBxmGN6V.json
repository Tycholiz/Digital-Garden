{"pageProps":{"note":{"id":"GkdMprLUe4QQULBxmGN6V","title":"Ember","desc":"","updated":1615444727056,"created":1615444727056,"custom":{},"fname":"ember","type":"note","vault":{"fsPath":"../main/tech","name":"tech"},"contentHash":"0139b8fd529cb2400c46d06069511289","links":[{"type":"wiki","from":{"fname":"ember","id":"GkdMprLUe4QQULBxmGN6V","vaultName":"tech"},"value":"user.tracked","alias":"@tracked","position":{"start":{"line":74,"column":79,"offset":3862},"end":{"line":74,"column":87,"offset":3870},"indent":[]},"xvault":false,"to":{"fname":"user.tracked"}}],"anchors":{"overview":{"type":"header","text":"Overview","value":"overview","line":8,"column":0,"depth":1},"decorators":{"type":"header","text":"Decorators","value":"decorators","line":16,"column":0,"depth":1},"types":{"type":"header","text":"Types","value":"types","line":21,"column":0,"depth":2},"anatomy-of-ember-app":{"type":"header","text":"Anatomy of Ember app","value":"anatomy-of-ember-app","line":32,"column":0,"depth":1},"models":{"type":"header","text":"Models","value":"models","line":40,"column":0,"depth":2},"templates":{"type":"header","text":"Templates","value":"templates","line":46,"column":0,"depth":2},"applicationhbs":{"type":"header","text":"application.hbs","value":"applicationhbs","line":50,"column":0,"depth":3},"components":{"type":"header","text":"Components","value":"components","line":54,"column":0,"depth":2},"namespaced-components":{"type":"header","text":"Namespaced components","value":"namespaced-components","line":61,"column":0,"depth":3},"class-components":{"type":"header","text":"Class components","value":"class-components","line":72,"column":0,"depth":3},"block-parameters":{"type":"header","text":"Block parameters","value":"block-parameters","line":82,"column":0,"depth":4},"provider-component":{"type":"header","text":"Provider component","value":"provider-component","line":100,"column":0,"depth":4},"routes":{"type":"header","text":"Routes","value":"routes","line":106,"column":0,"depth":2},"model-hook":{"type":"header","text":"Model hook","value":"model-hook","line":107,"column":0,"depth":3},"services":{"type":"header","text":"Services","value":"services","line":111,"column":0,"depth":2},"store-service":{"type":"header","text":"Store service","value":"store-service","line":117,"column":0,"depth":3},"controller":{"type":"header","text":"Controller","value":"controller","line":131,"column":0,"depth":2},"libraries":{"type":"header","text":"Libraries","value":"libraries","line":148,"column":0,"depth":1},"ember-data":{"type":"header","text":"Ember Data","value":"ember-data","line":149,"column":0,"depth":2},"structure":{"type":"header","text":"Structure","value":"structure","line":187,"column":0,"depth":1},"tests":{"type":"header","text":"Tests","value":"tests","line":190,"column":0,"depth":1},"mirage":{"type":"header","text":"Mirage","value":"mirage","line":194,"column":0,"depth":1},"factories":{"type":"header","text":"Factories","value":"factories","line":195,"column":0,"depth":2}},"children":[],"parent":"olZIVfSs2uLLr3BppFh4K","data":{}},"body":"<h1 id=\"ember\">Ember<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#ember\"></a></h1>\n<h1 id=\"overview\">Overview<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#overview\"></a></h1>\n<ul>\n<li>provides MVC in the client-side</li>\n<li>opinionatedâ€” follows convention over configuration</li>\n<li>modules import other modules implicitly because they know exactly where to look. Therefore, following the conventional structure is paramount (like Ruby on Rails) \n<ul>\n<li>ex. data that's fetched in the <code>/routes/index.js</code> will be available in <code>/templates/index.hbs</code> as <code>@model</code></li>\n</ul>\n</li>\n</ul>\n<p><img src=\"/assets/images/2021-03-10-22-39-10.png\"></p>\n<h1 id=\"decorators\">Decorators<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#decorators\"></a></h1>\n<ul>\n<li>they are special functions that make modifications to the following line</li>\n<li>they can be thought of as wrapper functions in a sense, if they are before a function.</li>\n<li>ex. this decorator will cause the following getter to cache the result on the first time.</li>\n</ul>\n<h2 id=\"types\">Types<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#types\"></a></h2>\n<ul>\n<li><code>@tracked</code> - in a class component, This annotation on a variable tells Ember to monitor this variable for updates. Whenever this variable's value changes, Ember will automatically re-render any templates that depend on its value.</li>\n<li><code>@action</code> - in a class component, define a function that is available to the component layout (handlebars html)</li>\n</ul>\n<pre class=\"language-js\"><code class=\"language-js\">@cache\n<span class=\"token keyword\">get</span> <span class=\"token function\">count</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword control-flow\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">_count</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<ul>\n<li>can receive arguments: <code>@alias('fullName') name</code></li>\n</ul>\n<h1 id=\"anatomy-of-ember-app\">Anatomy of Ember app<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#anatomy-of-ember-app\"></a></h1>\n<p><img src=\"/assets/images/2021-03-10-22-39-28.png\"></p>\n<ul>\n<li>url determines the current state of the app\n<ul>\n<li>ex. are they looking at a list? a post? are they editing the post?</li>\n</ul>\n</li>\n<li>When the url is entered in the address bar, it...\n<ul>\n<li>connects to a route handler which loads a particular model.</li>\n<li>It renders a template, which has access to the model.</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"models\">Models<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#models\"></a></h2>\n<ul>\n<li>Models represent persistent state. \n<ul>\n<li>ex. in an airbnb app, the details of a rental (price, description, photos etc) would be stored in the <code>rental</code> model. we'd also have a <code>user</code> model to store the state of the currently logged in user</li>\n</ul>\n</li>\n<li>models persist information, whether it's to a web server or as local state</li>\n<li>model layers can be swapped in, so we could use Redux or Apollo</li>\n</ul>\n<h2 id=\"templates\">Templates<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#templates\"></a></h2>\n<ul>\n<li>similar to <code>ejs</code></li>\n<li>the route handler makes the data of the model available to the template</li>\n</ul>\n<h3 id=\"applicationhbs\">application.hbs<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#applicationhbs\"></a></h3>\n<ul>\n<li>a wrapper around the whole application. This is where we can specify a footer and header, since they will appear on all pages.</li>\n<li>use <code>{{outlet}}</code> to specify the whole application (think of it as <code>children</code>, which contains the rest of the app)</li>\n</ul>\n<h2 id=\"components\">Components<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#components\"></a></h2>\n<ul>\n<li>essentially just a template that goes in another template</li>\n<li>they can take args (just like passing props in React)\n<img src=\"/assets/images/2021-03-10-22-39-41.png\"></li>\n<li>You can think of components as Ember's way for letting you create your own HTML tags.</li>\n<li>use the <code>{{yield}}</code> keyword to pass \"the rest of the data\" (similar to <code>children</code> in React)</li>\n</ul>\n<h3 id=\"namespaced-components\">Namespaced components<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#namespaced-components\"></a></h3>\n<ul>\n<li>you can have a component that exists within another component by:\na. creating a folder within <code>/components</code> with <code>ember generate component &#x3C;parentDir>/&#x3C;subComponent></code></li>\n<li>invoked in templates like this <code>&#x3C;Parent::Child></code></li>\n<li>We can pass down HTML attributes just like props in react:</li>\n</ul>\n<pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>image<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;</span>img</span> <span class=\"token attr-name\">...attributes</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;/</span>div</span><span class=\"token punctuation\">></span></span>\n</code></pre>\n<h3 id=\"class-components\">Class components<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#class-components\"></a></h3>\n<ul>\n<li>enable us to add behavior to components (by using states)</li>\n<li>run `ember generate component-class <nameofcomponent></nameofcomponent></li>\n<li>class components extend <code>Glimmer</code> components, giving it functionality similar to classes in React, such as state and lifecycle methods.</li>\n<li>whenever a component is invoked, an instance of its related class component will be instantiated, allowing us to store state in it and call any relevant lifecycle methods.</li>\n<li>initial state is stored in the constructor (in Ember, writing out constructor seems to be optional)</li>\n<li>in the template part of the component (ie. the html) we get access to the instance variables (the component state) defined in the class component</li>\n<li>Glimmer components have access to <code>this.args</code>, which is just like <code>this.props</code>\n<ul>\n<li>All arguments that can be accessed from this.args are implicitly marked as <a title=\"Private\" href=\"https://wiki.dendron.so/notes/hfyvYGJZQiUwQaaxQO27q.html\" target=\"_blank\" class=\"private\">@tracked (Private)</a></li>\n</ul>\n</li>\n</ul>\n<h4 id=\"block-parameters\">Block parameters<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#block-parameters\"></a></h4>\n<ul>\n<li>a block is any code that is between the opening and closing tags of a component (in react it would be called <code>children</code>)</li>\n<li>What if there is a variable that we want to pass to the block content?\n<ul>\n<li>In this case we can the <code>as |results|</code> syntax, which would make <code>results</code> available to everything inside the block</li>\n<li>this is similar to when we do a <code>items.map(item)</code>, and we have the current iteration available to us as <code>map</code></li>\n</ul>\n</li>\n</ul>\n<pre class=\"language-html\"><code class=\"language-html\">  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;</span>ul</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>results<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;</span><span class=\"token namespace\">Rentals:</span>:Filter</span> <span class=\"token attr-name\">@rentals</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span>{{@rentals}}</span> <span class=\"token attr-name\">@query</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span>{{this.query}}</span> <span class=\"token attr-name\">as</span> <span class=\"token attr-name\">|results|</span><span class=\"token punctuation\">></span></span>\n      {{#each @rentals as |rental|}}\n\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;</span>li</span><span class=\"token punctuation\">></span></span>\n\t\t  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;</span>Rental</span> <span class=\"token attr-name\">@rental</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span>{{rental}}</span> <span class=\"token punctuation\">/></span></span>\n\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;/</span>li</span><span class=\"token punctuation\">></span></span>\n      {{/each}}\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;/</span><span class=\"token namespace\">Rentals:</span>:Filter</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;/</span>ul</span><span class=\"token punctuation\">></span></span>\n</code></pre>\n<ul>\n<li>this also allows us to pass down the resultings data in the corresponding module that pertains to <code>rentals/filter.hbs</code> with <code>{{yield this.results}}</code> (see next section)</li>\n</ul>\n<h4 id=\"provider-component\">Provider component<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#provider-component\"></a></h4>\n<ul>\n<li>A pattern we use when we want to set up a piece of state for a component, but don't have any html to render for it. Instead, the html is just passed on down to the next level by using <code>{{yield this.results}}</code></li>\n<li>The child component then passes data up to it's parent\n<ul>\n<li>look at <code>rentals.hbs</code> and <code>rentals/filter.js</code>. \n<ul>\n<li><code>@query={{this.query}} as |results|</code> passes the <code>query</code> variable down to the child, giving it access to it. The child (a class component) uses that variable to make computations, then returns a result, which gets put in the variable <code>results</code> (due to the <code>|results|</code> line above)</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"routes\">Routes<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#routes\"></a></h2>\n<h3 id=\"model-hook\">Model hook<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#model-hook\"></a></h3>\n<ul>\n<li>The model hook is responsible for fetching and preparing any data that you need for your route. Ember will automatically call this hook when entering a route, so that you can have an opportunity to run your own code to get the data you need. The object returned from this hook is known as the model for the route.\n<ul>\n<li>Usually, this is where we'd fetch data from a server. Since fetching data is usually an asynchronous operation, the model hook is marked as async</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"services\">Services<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#services\"></a></h2>\n<ul>\n<li>Services are just singleton objects (ie. they get instantiated only once) to hold long-lived data such as user sessions.</li>\n<li>serve a similar role to global variables, in that they can be easily accessed by any part of your app</li>\n<li>For example, we can inject any available service into components, as opposed to having them passed in as an argument. This allows deeply nested components to \"skip through\" the layers and access things that are logically global to the entire app, such as routing, authentication, user sessions, user preferences, etc.</li>\n<li>A major difference between services and global variables is that services are scoped to your app, instead of all the JavaScript code that is running on the same page. This allows you to have multiple scripts running on the same page without interfering with each other.</li>\n</ul>\n<h3 id=\"store-service\">Store service<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#store-service\"></a></h3>\n<ul>\n<li>can be injected into a route with <code>@service store</code>, making the Ember Data store available to use as <code>this.store</code>, and giving us <code>find</code> and <code>findAll</code> methods.</li>\n</ul>\n<pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword module\">import</span> <span class=\"token imports\"><span class=\"token punctuation\">{</span> inject <span class=\"token keyword module\">as</span> service <span class=\"token punctuation\">}</span></span> <span class=\"token keyword module\">from</span> <span class=\"token string\">'@ember/service'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword module\">export</span> <span class=\"token keyword module\">default</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\"><span class=\"token maybe-class-name\">IndexRoute</span></span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\"><span class=\"token maybe-class-name\">Route</span></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">service</span></span> store<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">async</span> <span class=\"token function\">model</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword control-flow\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">store</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">findAll</span><span class=\"token punctuation\">(</span><span class=\"token string\">'rental'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<ul>\n<li>store service might be compared to Redux in its role to fetch from the database and cache it</li>\n</ul>\n<h2 id=\"controller\">Controller<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#controller\"></a></h2>\n<ul>\n<li>def - an object that receives the return value of the <code>model()</code> method (which is found in the associated route).</li>\n<li>def - an object that receives one property when its associated route is hit: <code>model</code> (the return value of the Route's model method)</li>\n<li>controller is only needed if we want to customize the properties or provide actions to the Route\n<ul>\n<li>in other words, they are an extension of the model loaded from the Route</li>\n</ul>\n</li>\n<li>if we don't make a <code>controller</code> file, one is generated for us by default (we just don't see it)</li>\n<li>the controller name must match the route that renders it</li>\n<li>controller is a singleton (ie. they get instantiated only once) \n<ul>\n<li>this means we shouldn't keep state in the controller \n<ul>\n<li>(unless it comes from either the Model or the Query params; since these would persist in between activations such as when a user leaves the Route and then re-enters it)</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>Controllers can also contain actions, Query Parameters, Tracked Properties, and more</li>\n<li>Basically, use controllers when: \n<ol>\n<li>we want to pass down actions or variables to the components found in a route. </li>\n<li>we want to support query params</li>\n<li>we want to compute a value (that we will ultimately pass down to the route's components) that depends on the model hook \n<ul>\n<li>in other words, the controller takes in the result of <code>model()</code> as its sole argument. What if we want to pass a variable down to the components that depend on the return value of <code>model()</code>?</li>\n</ul>\n</li>\n</ol>\n</li>\n</ul>\n<h1 id=\"libraries\">Libraries<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#libraries\"></a></h1>\n<h2 id=\"ember-data\">Ember Data<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#ember-data\"></a></h2>\n<ul>\n<li>a library that helps manage data and application state in Ember applications.</li>\n<li>built around the idea of organizing your app's data into model objects (in <code>/models</code> directory).\n<ul>\n<li>These objects represent units of information that our application presents to the user</li>\n</ul>\n</li>\n<li>The model represents the shape of the data</li>\n</ul>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword module\">import</span> <span class=\"token imports\"><span class=\"token maybe-class-name\">Model</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> attr <span class=\"token punctuation\">}</span></span> <span class=\"token keyword module\">from</span> <span class=\"token string\">'@ember-data/model'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token constant\">COMMUNITY_CATEGORIES</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n  <span class=\"token string\">'Condo'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">'Townhouse'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">'Apartment'</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword module\">export</span> <span class=\"token keyword module\">default</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">RentalModel</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Model</span> <span class=\"token punctuation\">{</span>\n  @attr title<span class=\"token punctuation\">;</span>\n  @attr owner<span class=\"token punctuation\">;</span>\n  @attr city<span class=\"token punctuation\">;</span>\n  @attr <span class=\"token dom variable\">location</span><span class=\"token punctuation\">;</span>\n  @attr category<span class=\"token punctuation\">;</span>\n  @attr image<span class=\"token punctuation\">;</span>\n  @attr bedrooms<span class=\"token punctuation\">;</span>\n  @attr description<span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">get</span> <span class=\"token function\">type</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span><span class=\"token constant\">COMMUNITY_CATEGORIES</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">includes</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">category</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword control-flow\">return</span> <span class=\"token string\">'Community'</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword control-flow\">else</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword control-flow\">return</span> <span class=\"token string\">'Standalone'</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<ul>\n<li>Ember Data uses Adapters and Serializers. The idea is that, provided that your backend exposes a consistent protocol and interchange format to access its data, we can write a single adapter-serializer pair to handle all data fetches for the entire application.\n<ul>\n<li>Adapters deal with how and where Ember Data should fetch data from your servers, such as whether to use HTTP, HTTPS, WebSockets or local storage, as well as the URLs, headers and parameters to use for these requests. </li>\n<li>Serializers are in charge of converting the data returned by the server into a format Ember Data can understand.</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"structure\">Structure<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#structure\"></a></h1>\n<ul>\n<li>the root of the ember application is <code>templates/application.hbs</code></li>\n</ul>\n<h1 id=\"tests\">Tests<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#tests\"></a></h1>\n<ul>\n<li>integration tests - components that exist in isolation. They don't have to interact with the context in which they are placed. They can exist as a unit. Essentualy these are our unit tests.</li>\n<li>acceptance tests - components that need to interact with other areas of the app (ex. navbar link functionality)</li>\n</ul>\n<h1 id=\"mirage\">Mirage<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#mirage\"></a></h1>\n<h2 id=\"factories\">Factories<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#factories\"></a></h2>\n<ul>\n<li>allow you to create blueprints for your data. In other words, seed your development database</li>\n</ul>","noteIndex":{"id":"olZIVfSs2uLLr3BppFh4K","title":"Digital Garden","desc":"","updated":1674517603573,"created":1615482407722,"custom":{"nav_order":0,"permalink":"/"},"fname":"root","type":"note","vault":{"fsPath":"../main/tech","name":"tech"},"contentHash":"effb007003ca6a91d7fd0c293e1d2436","links":[{"type":"wiki","from":{"fname":"root","id":"olZIVfSs2uLLr3BppFh4K","vaultName":"tech"},"value":"testing.method.unit","alias":"unit testing","position":{"start":{"line":18,"column":121,"offset":1146},"end":{"line":18,"column":157,"offset":1182},"indent":[]},"xvault":false,"sameFile":false,"to":{"fname":"testing.method.unit"}},{"type":"wiki","from":{"fname":"root","id":"olZIVfSs2uLLr3BppFh4K","vaultName":"tech"},"value":"general.arch.microservice","alias":"microservices","position":{"start":{"line":18,"column":188,"offset":1213},"end":{"line":18,"column":231,"offset":1256},"indent":[]},"xvault":false,"sameFile":false,"to":{"fname":"general.arch.microservice"}},{"type":"wiki","from":{"fname":"root","id":"olZIVfSs2uLLr3BppFh4K","vaultName":"tech"},"value":"paradigm.oop","alias":"OOP","position":{"start":{"line":36,"column":227,"offset":2718},"end":{"line":36,"column":247,"offset":2738},"indent":[]},"xvault":false,"sameFile":false,"to":{"fname":"paradigm.oop"}}],"anchors":{"tags":{"type":"header","text":"Tags","value":"tags","line":46,"column":0,"depth":3},"resources":{"type":"header","text":"Resources","value":"resources","line":55,"column":0,"depth":2},"ue-unexamined-resources":{"type":"header","text":"UE (Unexamined) Resources","value":"ue-unexamined-resources","line":56,"column":0,"depth":3},"e-examined-resources":{"type":"header","text":"E (Examined) Resources","value":"e-examined-resources","line":59,"column":0,"depth":3},"resources-1":{"type":"header","text":"Resources","value":"resources-1","line":62,"column":0,"depth":3}},"children":["40ubf88tephzbdjte8cdsa0","zFMjbn3xihVNHjUIdZCD1","IK6NOKemuDjhfstJBovKL","ZaTr28eWk1DrXOEsc1YVb","Vi0WYVLZunVM9iR8XZJn3","ngAbg7gluvbt1bY1UIRsi","RCPPXSakm5TvKka8kOmVp","LIcuGYV0DDt1VWbvH6Sed","MPx8ykTP57I40WTZvTP7f","ZU5WmdTG1bHoE8RcmZXZG","jqWiyYJff92RjXuUQt9PQ","KihijM8OQvZ4pASkkhqzL","F9vyqvls3OBCujtukqKhy","k6jxm2b3edgkhbordpuz6v1","facc2b01-755a-409f-99f6-57bef2d1501f","bZumdyapJ2H0wWWOmJ45i","elqpgoe2r951si4xrhujppj","m5ov42Vm6mR7RQWTvl1NW","cw8cerc0cos8lh871oz8rtf","PZxxZ4iESzSlbbHJKxuAZ","UDu62Pa6BaRqlG8uGoMhy","u3zcndycwqessho5h6x0nz9","ZgCUp366YrF2Tyky2NT73","DVpVUmavSoVDA7UIlPzLX","nMCtMXVvjBsJk3iw1zoIO","ANfx9Z4a6ZA0uJuSHtbIJ","BkG557LKUYbH1DnxprEVT","1TaH8zDTM98FZ9SYaeXLM","02v7ymc144e5c4pv3edkud7","dc79799f-a55d-48ab-a8be-c48adb1b19c0","f6feef57-b8f5-451f-a09a-7b63f6a07183","4sz47Y0LKs1Si73rWtyyh","g7ulqi8no93ezeocbesc3ll","5a9fb1df-478e-4687-9be0-5cb97e61ec57","1374e9e9-1cbc-4e1f-b1ca-66b8569533dd","D8Z3rjXkSj2EOymXQXF4Z","np3c1ykvnjqv5xoombpfwqz","f529cc34-aba0-45ca-ad7e-02ddda318941","0zcauha3il2NqtxZazIo7","9bbd6f68-03b2-41f4-92e4-2ca313e8b450","5a2ab598-fa7e-4471-8bda-9f5831b679ae","uV6w4mZPoohWyZV4Xaad0","QHXEIyeZGIGMVi5Q52UWI","RgE0mZLaUjPftFPZsiAoe","mytCOts26Pidush65tdRW","fwUzxfLSPMH1eL8oBoLWx","wazdsda6h25x66edvfmeuiv","TbW7PM9bg1y5TGkiWwQ8b","xiSIDeEtIc8X0lpUQlppI","0jxgntiLNHWFuCbzqtFGF","GkdMprLUe4QQULBxmGN6V","4SYc6v5hxY5g6Ip6kjpwO","czi7ilt2i1uoqm1f2otbntj","fqVQpS9FBiXgKsZX3R3sJ","L5JUZlGAGvTxrsEBB7DY8","ttyri4pwfyn5lcx0vp9804o","TeTedoeS2LdHPR632eCpM","ulicRRwo3lSFzh3tMfWH9","p7d24vyb8m00ombzn34t50c","e65188a1-177e-4ab2-99f9-75f85d537621","fajYnbVhCRDi74xn0H30R","bArGdGwqo3iFkyKMyE7qR","4Dcp7gbEVoLLgfu7bXFai","5d700782-fb81-416e-83f9-5dd88260e350","zubgzhNFE6KlTgXcjTz6O","8lpdfWa0cbSq1XJQbcYcY","2psluywdc416t7vrql0m058","17I8ZksXvqCH1mRtZDjHp","kF916Ow84qpJJeMRkWMIo","tMLkLcrIHHBz56xVmBLkP","CSePBQ6q7qhowKESqVwt7","laZ4OfLhZNK1Kuy6GaWUr","z5IJblOknQhMzZ5QZh4ye","N36FHxfxzwJfxDY3miWyX","3bb25f58-2b50-4fa3-af55-48ea9f88a081","7x07qjgbitozdfszqzuy7ix","u93Rz4fEWGu6VBR30Zraf","9hjMHnKvYT4jLKvuDSXaV","qC5GxCZBmNb4Ip6c0kU8x","LgW7mTIALODoXc54B3p6S","UYPxfHBFWX7fb6hHU5bB6","74lYtC8NKpCzcyFOZTfR1","sEoBNAEuaTxwSmTXDonZt","dj0jr9mpvs62e2pkg3zc3yy","z8ie0xjogb6ht7gzowav5xr","qxSOd6SPN8qf9ZUojVFDX","WQoMTf6VXBaxCgksXAVsj","2Mw4XgfyCHXHNOX5yoCIY","qcdt2f7jo51muquo5r95dpo","0XJqmcdtcMZu66glBI5O8","lK8r8BXS4ThiUTe4xKIZe","93de42ca-53ea-460a-baa7-b9ec5c47cb1e","Rxs2jaGpdFzqYtP7lAJFJ","aO8W81Z0PyIb6Hs7nOHPW","lhzisalkebu4w5n01np07i0","7b5l4b6fi65n7sv9org5q1l","I01hENHnh8Tqu3Ok8sLzG","03o3n0hz9v9jtb7j889zpd4","evqsPNutOaZ8hcBCqxFQu","zhhxcjZUHdU8uRLwGb9Zh","G1aFACZB2ooWGMGwyd3ZW","YWy1C4tgoaCcw1m8JJsr7","Szj3o5iaNxPpesiCqwrbu","613syb18hb3v0u1ydvor7ru","XhvCDW3fIw6h6MhY5ticq","Q70g7SusFZBQXzkuQifv4","AzfWDH3wp7jFpL2EYxBcW","y0fwpZ9qMqirsLiFyOciU","ZF8xj8wwDUqKlrwTrCFZ1","tAJvhqhdfyZZa87QHq1TU","4hRmipi8lxpBLyzWu5JVB","iTg0C7QjvnmqBZeEigJNs","3babc3d2-79ae-470a-9c06-ab8bba2e684e","bF3UsMFya3fMeXWDspVov","ULkfbL9WpktbVYnzhl6Jw","PpNOO8JYWe6dM8wruSa7x","di40pCxDn7IiqE8lFdD46","rmW0mkerqV35I8QPji6lM","3IFIK1ByzeIxZCByryGLN","iImkYAKfkw3beAl6pLbDn","ecDe8DNWrkeQTwpTEvHje","i2it5id8qwtg27n4usg8bo1","Yqhdd9mSJGN7OJOeyoSD2","Ws5tah8tpeyn9tK8VBTg8","gWAg15uBJgkS2B0wcpMAa","l7V3v2ep1YdDCt7DOr7Ci","yM2PJBdqJnHpD63cPA6sW","qn0bre7eLbi3QMbCfWkUi","fSu0KxFL41IRouotqmbHs","0gtg24Mj1a1bQFPRGQNlO","7iQPBMltLPLbFEz2qbjPu","yoh4pwoXcfELInGKRdYf6","dCGCWXgAmiOZXbdULT1m6","jMavlje07sNa6hSEIE8WA","Xxm0JE4dKHxrQAaZfzvxD","nRb6Im4Kcmc2ZWE7K1jZ1","PAEBZCyFBZJyR7OoMZ41E","PQ6km8RgRCuyICBPOYz8f","x5tm1nfjzyawwzedy3yitgd","2bhftt8rGuxYu4pFgNqru","hjYIZpHQWuXfeEoGeJEKW","K2M9bQqVq2eQfm29eslKL","X8obW1iKwYsvNgKWGyCzy","yJwSC7hqYIezTFHf5i0Ev","c4Z7ETcOHUILRMH32Sfjw","qiR6dIu857b9M9kTqjOyK","fc2coz74cnfy5czzofx4h5x","Ku1OgHMhELajzo61Gx7ye","LUrfhDWo8wuwZu7CN9TV8","osu6JGOnvXJ5gt3tpqWZY","1a6173cd-cf13-4b34-a522-8350bf9a364f","S2sBltrPfd8a7ICuD7CuH","GLQ2pmkJUNUa93THBDVsD","md6xitz4exia2joa06i490b","oWCuBXOg6JWfZzjmKxmNl","jOmhZ8ovLYTPbpM1vqSDx","p9bov84s0isgkl1ysaw93kk","FraC6xzLy1ei91l1ICyc9","6ceBas2RE9Q4787GDngH7","734cd78d-0bc9-426b-803d-1efc84dfffe5","k4Bb09px6r0FxIRs49SXV","oaG3H1S9IUBO644nGZigu","Ka7agQJkUMRSWN0uFdkWK","si3z090WsiLasMhJBa1Az","hs6rwzt4mogiicoc4gcykbi","ljKAVERmdEiKLK9hXGKBm","zxt3lhonfdhglvijd17ua8c","dd7dopve1dudqkoibkqvti4","923tgifqf59ovv5yldtyi0a","vrjwp01goqw47fqctm4f4lo","c99gdmmppju3r1tth8cb2jx","z2pvn5qxdz84zgygqzxage8"],"parent":null,"data":{},"body":"This Dendron vault of tech knowledge is organized according to domains and their sub-domains, along with specific implementation of those domains.\n\nFor instance, Git itself is a domain. Sub-domains of Git would include things like `commit`,\n`tags`, `reflog` etc. implementations of each of those could be `cli`, `strat`\n(strategies), `inner`, and so on.\n\nThe goal of the wiki is to present data in a manner that is from the perspective\nof a querying user. Here, a user is a programmer wanting to get key information\nfrom a specific domain. For instance, if a user wants to use postgres functions\nand hasn't done them in a while, they should be able to query\n`postgres.functions` to see what information is available to them.\n\nThis wiki has been written with myself in mind. While learning each of these\ndomains, I have been sensitive to the \"aha\" moments and have noted down my\ninsights as they arose. I have refrained from capturing information that I\nconsidered obvious or otherwise non-beneficial to my own understanding.\n\nAs a result, I have allowed myself to use potentially arcane concepts to explain other ones. For example, in my note on [[unit testing|testing.method.unit]], I have made reference to the [[microservices|general.arch.microservice]] note. If these notes were made with the public in mind, this would be a very bad strategy, given that you'd have to understand microservices to be able to draw that same parallel that I've already drawn. Since these notes are written for myself, I have been fine with taking these liberties.\n\nWhat I hope to gain from this wiki is the ability to step away from any\ngiven domain for a long period of time, and be able to be passably useful for\nwhatever my goals are within a short period of time. Of course this is all\nvague sounding, and really depends on the domain along with the ends I am\ntrying to reach.\n\nTo achieve this, the system should be steadfast to:\n- be able to put information in relatively easily, without too much thought\n\trequired to its location. While location is important, Dendron makes it easy\n\tto relocate notes, if it becomes apparent that a different place makes more\n\tsense.\n- be able to extract the information that is needed, meaning there is a\n\thigh-degree in confidence in the location of the information. The idea is\n\tthat information loses a large amount of its value when it is unfindable.\n\tTherefore, a relatively strict ideology should be used when determining\n\twhere a piece of information belongs.\n\t- Some concepts might realistically belong to multiple domains. For instance, the concept of *access modifiers* can be found in both `C#` and `Typescript`. Therefore, this note should be abstracted to a common place, such as [[OOP|paradigm.oop]].\n\nThis Dendron vault is the sister component to the [General Second Brain](https://tech.kyletycholiz.com).\n\n### Tags\nThroughout the garden, I have made use of tags, which give semantic meaning to the pieces of information.\n\n- `ex.` - Denotes an *example* of the preceding piece of information\n- `spec:` - Specifies that the preceding information has some degree of *speculation* to it, and may not be 100% factual. Ideally this gets clarified over time as my understanding develops.\n- `anal:` - Denotes an *analogy* of the preceding information. Often I will attempt to link concepts to others that I have previously learned.\n- `mn:` - Denotes a *mnemonic*\n- `expl:` - Denotes an *explanation*\n\n## Resources\n### UE (Unexamined) Resources\nOften, I come across sources of information that I believe to be high-quality. They may be recommendations or found in some other way. No matter their origin, I may be in a position where I don't have the time to fully examine them (and properly extract notes), or I may not require the information at that moment in time. In cases like these, I will add reference to a section of the note called **UE Resources**. The idea is that in the future when I am ready to examine them, I have a list of resources that I can start with. This is an alternative strategy to compiling browser bookmarks, which I've found can quickly become untenable.\n\n### E (Examined) Resources\nOnce a resource has been thoroughly examined and has been mined for notes, it will be moved from *UE Resources* to *E Resources*. This is to indicate that (in my own estimation), there is nothing more to be gained from the resource that is not already in the note.\n\n### Resources\nThis heading is for inexhaustible resources. \n- A prime example would be a quality website that continually posts articles.  - Another example would be a tool, such as software that measures frequencies in a room to help acoustically treat it.\n"},"collectionChildren":null,"customHeadContent":null,"config":{"version":5,"dev":{"enablePreviewV2":true},"commands":{"lookup":{"note":{"selectionMode":"extract","confirmVaultOnCreate":false,"leaveTrace":false,"bubbleUpCreateNew":true,"fuzzThreshold":0.2,"vaultSelectionModeOnCreate":"smart"}},"insertNote":{"initialValue":"templates"},"insertNoteLink":{"aliasMode":"none","enableMultiSelect":false},"insertNoteIndex":{"enableMarker":false},"randomNote":{},"copyNoteLink":{"aliasMode":"title"},"templateHierarchy":"template"},"workspace":{"dendronVersion":"0.83.0","vaults":[{"fsPath":"../main/tech","name":"tech"}],"journal":{"dailyDomain":"daily","name":"journal","dateFormat":"y.MM.dd","addBehavior":"childOfDomain"},"scratch":{"name":"scratch","dateFormat":"y.MM.dd.HHmmss","addBehavior":"asOwnDomain"},"graph":{"zoomSpeed":1,"createStub":false},"enableAutoCreateOnDefinition":false,"enableXVaultWikiLink":false,"enableRemoteVaultInit":true,"workspaceVaultSyncMode":"noCommit","enableAutoFoldFrontmatter":true,"maxPreviewsCached":10,"maxNoteLength":204800,"task":{"name":"","dateFormat":"","addBehavior":"childOfCurrent","statusSymbols":{"":" ","wip":"w","done":"x","assigned":"a","moved":"m","blocked":"b","delegated":"l","dropped":"d","pending":"y"},"prioritySymbols":{"H":"high","M":"medium","L":"low"},"todoIntegration":false,"createTaskSelectionType":"selection2link","taskCompleteStatus":["done","x"]},"enableUserTags":true,"enableHashTags":true,"enableEditorDecorations":true,"enableFullHierarchyNoteTitle":false},"preview":{"enableFMTitle":true,"enableNoteTitleForLink":true,"enableMermaid":true,"enablePrettyRefs":true,"enableKatex":true,"automaticallyShowPreview":false,"enableFrontmatterTags":true,"enableHashesForFMTags":false},"publishing":{"enableFMTitle":true,"enableNoteTitleForLink":true,"enablePrettyRefs":true,"enableKatex":true,"copyAssets":true,"siteHierarchies":["root"],"writeStubs":false,"siteRootDir":"docs","seo":{"title":"Dendron","description":"The Tech Digital Garden of Kyle Tycholiz"},"github":{"cname":"tech.kyletycholiz.com","enableEditLink":true,"editLinkText":"Edit this page on GitHub","editBranch":"master","editViewMode":"tree"},"enableSiteLastModified":true,"enableFrontmatterTags":true,"enableHashesForFMTags":false,"enableRandomlyColoredTags":true,"enableTaskNotes":true,"enablePrettyLinks":true,"searchMode":"lookup","enableMermaid":true,"siteUrl":"https://tech.kyletycholiz.com","duplicateNoteBehavior":{"action":"useVault","payload":["tech"]},"siteFaviconPath":"favicon.ico","siteIndex":"root"}}},"__N_SSG":true}