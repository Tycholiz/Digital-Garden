{"pageProps":{"note":{"id":"ilOPfgNyiPSHOb9tNB6yL","title":"CAP Theorem","desc":"","updated":1690403533181,"created":1634060006478,"custom":{},"fname":"deploy.distributed.CAP-theorem","type":"note","vault":{"fsPath":"../main/tech","name":"tech"},"contentHash":"9b3af065b2dd2be2fe3d6fa7ae1d007f","links":[{"type":"wiki","from":{"fname":"deploy.distributed.CAP-theorem","id":"ilOPfgNyiPSHOb9tNB6yL","vaultName":"tech"},"value":"db.acid.consistency.strong","alias":"linearizability","position":{"start":{"line":3,"column":92,"offset":107},"end":{"line":3,"column":154,"offset":169},"indent":[]},"xvault":false,"sameFile":false,"to":{"fname":"db.acid.consistency.strong","anchorHeader":"linearizability"}},{"type":"wiki","from":{"fname":"deploy.distributed.CAP-theorem","id":"ilOPfgNyiPSHOb9tNB6yL","vaultName":"tech"},"value":"db.distributed.replication","alias":"replication","position":{"start":{"line":71,"column":161,"offset":7059},"end":{"line":71,"column":203,"offset":7101},"indent":[]},"xvault":false,"sameFile":false,"to":{"fname":"db.distributed.replication"}},{"type":"wiki","from":{"fname":"deploy.distributed.CAP-theorem","id":"ilOPfgNyiPSHOb9tNB6yL","vaultName":"tech"},"value":"couchdb","position":{"start":{"line":75,"column":3,"offset":7307},"end":{"line":75,"column":14,"offset":7318},"indent":[]},"xvault":false,"sameFile":false,"to":{"fname":"couchdb"}},{"type":"wiki","from":{"fname":"deploy.distributed.CAP-theorem","id":"ilOPfgNyiPSHOb9tNB6yL","vaultName":"tech"},"value":"aws.svc.dynamo","position":{"start":{"line":77,"column":3,"offset":7439},"end":{"line":77,"column":21,"offset":7457},"indent":[]},"xvault":false,"sameFile":false,"to":{"fname":"aws.svc.dynamo"}},{"from":{"fname":"nosql","id":"ZF8xj8wwDUqKlrwTrCFZ1","vaultName":"tech"},"type":"backlink","position":{"start":{"line":71,"column":53,"offset":5055},"end":{"line":71,"column":99,"offset":5101},"indent":[]},"value":"deploy.distributed.CAP-theorem"},{"from":{"fname":"deploy.distributed","id":"vutujFFWxQu6TshWVuMpI","vaultName":"tech"},"type":"backlink","position":{"start":{"line":67,"column":14,"offset":5862},"end":{"line":67,"column":60,"offset":5908},"indent":[]},"value":"deploy.distributed.CAP-theorem"},{"from":{"fname":"general.concurrency","id":"W5etsXYnFDHBWHEHSZKjp","vaultName":"tech"},"type":"backlink","position":{"start":{"line":72,"column":22,"offset":5729},"end":{"line":72,"column":56,"offset":5763},"indent":[]},"value":"deploy.distributed.CAP-theorem"}],"anchors":{"what-is-it":{"type":"header","text":"What is it?","value":"what-is-it","line":8,"column":0,"depth":2},"why-must-it-choose-between-availability-and-consistency":{"type":"header","text":"Why must it choose between availability and consistency?","value":"why-must-it-choose-between-availability-and-consistency","line":17,"column":0,"depth":3},"consistency-c":{"type":"header","text":"Consistency (C)","value":"consistency-c","line":22,"column":0,"depth":3},"availability-a":{"type":"header","text":"Availability (A)","value":"availability-a","line":39,"column":0,"depth":3},"partition-tolerance-p":{"type":"header","text":"Partition tolerance (P)","value":"partition-tolerance-p","line":45,"column":0,"depth":3},"when-to-prioritize-availability-or-consistency":{"type":"header","text":"When to prioritize Availability or Consistency?","value":"when-to-prioritize-availability-or-consistency","line":56,"column":0,"depth":2},"availability":{"type":"header","text":"Availability","value":"availability","line":59,"column":0,"depth":3},"consistency":{"type":"header","text":"Consistency","value":"consistency","line":64,"column":0,"depth":3},"pacelc-theorem":{"type":"header","text":"PACELC Theorem","value":"pacelc-theorem","line":69,"column":0,"depth":2},"examples":{"type":"header","text":"Examples","value":"examples","line":79,"column":0,"depth":3}},"children":[],"parent":"vutujFFWxQu6TshWVuMpI","data":{}},"body":"<h1 id=\"cap-theorem\">CAP Theorem<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#cap-theorem\"></a></h1>\n<h2 id=\"what-is-it\">What is it?<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#what-is-it\"></a></h2>\n<p>At times when the network is working correctly, a system can provide both consistency (ie. <a href=\"/notes/h7suvvfknwvc8hxandtdusy#linearizability\">linearizability</a>) and total availability. When a network fault occurs, you have to choose between either linearizability or total availability. </p>\n<ul>\n<li>Thus, a better way of phrasing CAP would be \"when a network partition occurs, a distributed system must choose between either consistency or availability\".</li>\n<li>A more reliable network needs to make this choice less often, but at some point the choice is inevitable.</li>\n<li>note: this seems to be at least somewhat of a controversial tone, given that SQL databases occupy CA. This view above would state that CA systems are incoherent, though this opinion might not appear to be reputable, given the prevalence of relational databases.</li>\n<li>regarding CA systems then, what CAP theorem would argue is that these systems have an inherent weakness, which is that in the case of a network partition, they will be forced to give up either consistency or availability.</li>\n</ul>\n<p>CAP is sometimes presented as Consistency, Availability, Partition tolerance: pick 2 out of 3. Unfortunately, putting it this way is misleading because network partitions are a kind of fault (due to the failure of network devices), so they aren’t something about which you have a choice: they will happen whether you like it or not.</p>\n<h3 id=\"why-must-it-choose-between-availability-and-consistency\">Why must it choose between availability and consistency?<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#why-must-it-choose-between-availability-and-consistency\"></a></h3>\n<p>The reason the system must choose is because if there is a network partition, different parts of the system may result in having different views of the data.</p>\n<ul>\n<li>If the system chooses to prioritize consistency, it will ensure that all nodes have the same view of the data, but it may sacrifice availability to all clients, since some nodes may be unavailable due to the partition.</li>\n<li>If the system chooses to prioritize availability, it will continue to provide service to all clients, but it may not be able to ensure that all nodes have the same view of the data, which can lead to inconsistencies.</li>\n</ul>\n<h3 id=\"consistency-c\">Consistency (C)<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#consistency-c\"></a></h3>\n<p>All nodes see the same data at the same time. This means users can read or write from/to any node in the system and will receive the same data. It is equivalent to having a single up-to-date copy of the data.</p>\n<p>Depending on the business needs of the application, we may wish to make the trade-off of sacrificing consistency for availability. Say we are implementing a facebook newsfeed. It is acceptable for the application to miss some data points here and there. For instance, if a friend of yours uploads a new post, it's not of critical importance that you get that data right away. That is, if one client is getting its data from a data store that is not up-to-date, then it's not the end of the world (assuming everything can be made up-to-date in a timely manner).</p>\n<p>The \"C\" refers to only one type of consistency: <em>linearizability</em></p>\n<p>The basic idea behind linearizability is simple: to make a system appear as if there is only a single copy of the data.</p>\n<p>linearizability is a recency guarantee on reads and writes of a single item in a database.</p>\n<ul>\n<li>In a linearizable system, as soon as one client successfully completes a write, all clients reading from the database must be able to see the value just written. Maintaining the illusion of a single copy of the data means guaranteeing that the value read is the most recent, up-to-date value, and doesn’t come from a stale cache or replica.</li>\n</ul>\n<p>Consider that a unique constraint in a relational database requires linearizability</p>\n<p>Depending on our use-case, we must decide if our system requires linearizability. </p>\n<ul>\n<li>ex. we may determine that for our flight booking application, the likelihood of two users trying to book the same seat on a flight to be remote, and thus something that we don't feel compelled to account for. In the event of this situation, we might just consider it a business expense to compensate the affected party in another way.</li>\n</ul>\n<h3 id=\"availability-a\">Availability (A)<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#availability-a\"></a></h3>\n<p>Availability means every request received by a non-failing node in the system must result in a response. Even when severe network failures occur, every request must terminate. In simple terms, availability refers to a system’s ability to remain accessible even if one or more nodes in the system go down.</p>\n<ul>\n<li>in other words, high availability results from running in a redundant configuration on multiple machines</li>\n</ul>\n<p>In an AP (Availability/Partition-tolerant) system, the system is essentially saying “I will get you to a node, but I do not know how good the data you find there will be”; or “I can be available and the data I show will be good, but not complete.”</p>\n<h3 id=\"partition-tolerance-p\">Partition tolerance (P)<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#partition-tolerance-p\"></a></h3>\n<p>a.k.a robustness</p>\n<p>Partition tolerance is the ability of a data processing system to continue processing data even if a network partition causes communication errors between subsystems</p>\n<ul>\n<li>A single node failure should not cause the entire system to collapse.</li>\n<li>A partition is a communication break (or a network failure) between any two nodes in the system, i.e., both nodes are up but cannot communicate with each other. </li>\n</ul>\n<p>A partition-tolerant system continues to operate even if there are partitions (ie. communication breakdowns) in the system. Such a system can sustain any network failure that does not result in the failure of the entire network. Data is sufficiently replicated across combinations of nodes and networks to keep the system up through intermittent outages.</p>\n<p><img src=\"/assets/images/2021-10-12-10-38-14.png\"></p>\n<h2 id=\"when-to-prioritize-availability-or-consistency\">When to prioritize Availability or Consistency?<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#when-to-prioritize-availability-or-consistency\"></a></h2>\n<p>Go with eventual consistency if favouring availability, and strong consistency if favouring consistency</p>\n<h3 id=\"availability\">Availability<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#availability\"></a></h3>\n<ul>\n<li>When eventual consistency can be tolerated.</li>\n<li>When the system needs to remain operational and responsive even in the presence of network partitions or node failures. </li>\n<li>ex. real-time messaging, online gaming, social networks, CDNs, IoT systems</li>\n</ul>\n<h3 id=\"consistency\">Consistency<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#consistency\"></a></h3>\n<ul>\n<li>When the application demands strict data consistency and requires all nodes to have a consistent view of the data at all times.</li>\n<li>When data conflicts and inconsistencies can lead to significant negative consequences.</li>\n<li>ex. financial transactions (e.g. banking app), healthcare systems, inventory management, critical infrastructure (e.g. power grids, transportation systems), blockchain</li>\n</ul>\n<h2 id=\"pacelc-theorem\">PACELC Theorem<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#pacelc-theorem\"></a></h2>\n<p>One place where the CAP theorem is silent is what happens when there is no network partition? What choices does a distributed system have when there is no partition?</p>\n<p>The PACELC theorem states that in a system that replicates data:</p>\n<ul>\n<li>if there is a partition (‘P’), a distributed system can tradeoff between availability and consistency (i.e., ‘A’ and ‘C’);</li>\n<li>else (‘E’), when the system is running normally in the absence of partitions, the system can tradeoff between latency (‘L’) and consistency (‘C’).\n<img src=\"/assets/images/2021-10-12-10-43-34.png\"></li>\n</ul>\n<p>The first part of the theorem (PAC) is the same as the CAP theorem, and the ELC is the extension. The whole thesis is assuming we maintain high availability by <a href=\"/notes/gKVIPNGV7duiD0yRnld8J\">replication</a>. So, when there is a failure, CAP theorem prevails. But if not, we still have to consider the tradeoff between consistency and latency of a replicated system.</p>\n<h3 id=\"examples\">Examples<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#examples\"></a></h3>\n<ul>\n<li>Relational databases are CP</li>\n<li><a href=\"/notes/g7ulqi8no93ezeocbesc3ll\">CouchDB</a> is AP\n<ul>\n<li>it's <em>Partition-Tolerant</em>, every node is <em>Available</em> at all times, but it's only <em>eventually Consistent</em>.</li>\n</ul>\n</li>\n<li><a href=\"/notes/gEztUcJYazBs8J8k0gi7o\">DynamoDB</a> and Cassandra are PA/EL systems: They choose availability over consistency when a partition occurs; otherwise, they choose lower latency.</li>\n<li>BigTable and HBase are PC/EC systems: They will always choose consistency, giving up availability and lower latency.</li>\n<li>MongoDB can be considered PA/EC (default configuration): MongoDB works in a primary/secondaries configuration. In the default configuration, all writes and reads are performed on the primary. As all replication is done asynchronously (from primary to secondaries), when there is a network partition in which primary is lost or becomes isolated on the minority side, there is a chance of losing data that is unreplicated to secondaries, hence there is a loss of consistency during partitions. Therefore it can be concluded that in the case of a network partition, MongoDB chooses availability, but otherwise guarantees consistency. Alternately, when MongoDB is configured to write on majority replicas and read from the primary, it could be categorized as PC/EC.</li>\n</ul>\n<hr>\n<strong>Backlinks</strong>\n<ul>\n<li><a href=\"/notes/ZF8xj8wwDUqKlrwTrCFZ1\">Nosql</a></li>\n<li><a href=\"/notes/vutujFFWxQu6TshWVuMpI\">Distributed Computing</a></li>\n<li><a href=\"/notes/W5etsXYnFDHBWHEHSZKjp\">Concurrency</a></li>\n</ul>","noteIndex":{"id":"olZIVfSs2uLLr3BppFh4K","title":"Digital Garden","desc":"","updated":1674517603573,"created":1615482407722,"custom":{"nav_order":0,"permalink":"/"},"fname":"root","type":"note","vault":{"fsPath":"../main/tech","name":"tech"},"contentHash":"effb007003ca6a91d7fd0c293e1d2436","links":[{"type":"wiki","from":{"fname":"root","id":"olZIVfSs2uLLr3BppFh4K","vaultName":"tech"},"value":"testing.method.unit","alias":"unit testing","position":{"start":{"line":18,"column":121,"offset":1146},"end":{"line":18,"column":157,"offset":1182},"indent":[]},"xvault":false,"sameFile":false,"to":{"fname":"testing.method.unit"}},{"type":"wiki","from":{"fname":"root","id":"olZIVfSs2uLLr3BppFh4K","vaultName":"tech"},"value":"general.arch.microservice","alias":"microservices","position":{"start":{"line":18,"column":188,"offset":1213},"end":{"line":18,"column":231,"offset":1256},"indent":[]},"xvault":false,"sameFile":false,"to":{"fname":"general.arch.microservice"}},{"type":"wiki","from":{"fname":"root","id":"olZIVfSs2uLLr3BppFh4K","vaultName":"tech"},"value":"paradigm.oop","alias":"OOP","position":{"start":{"line":36,"column":227,"offset":2718},"end":{"line":36,"column":247,"offset":2738},"indent":[]},"xvault":false,"sameFile":false,"to":{"fname":"paradigm.oop"}}],"anchors":{"tags":{"type":"header","text":"Tags","value":"tags","line":46,"column":0,"depth":3},"resources":{"type":"header","text":"Resources","value":"resources","line":55,"column":0,"depth":2},"ue-unexamined-resources":{"type":"header","text":"UE (Unexamined) Resources","value":"ue-unexamined-resources","line":56,"column":0,"depth":3},"e-examined-resources":{"type":"header","text":"E (Examined) Resources","value":"e-examined-resources","line":59,"column":0,"depth":3},"resources-1":{"type":"header","text":"Resources","value":"resources-1","line":62,"column":0,"depth":3}},"children":["40ubf88tephzbdjte8cdsa0","zFMjbn3xihVNHjUIdZCD1","IK6NOKemuDjhfstJBovKL","ZaTr28eWk1DrXOEsc1YVb","Vi0WYVLZunVM9iR8XZJn3","ngAbg7gluvbt1bY1UIRsi","RCPPXSakm5TvKka8kOmVp","LIcuGYV0DDt1VWbvH6Sed","MPx8ykTP57I40WTZvTP7f","ZU5WmdTG1bHoE8RcmZXZG","jqWiyYJff92RjXuUQt9PQ","KihijM8OQvZ4pASkkhqzL","F9vyqvls3OBCujtukqKhy","k6jxm2b3edgkhbordpuz6v1","facc2b01-755a-409f-99f6-57bef2d1501f","bZumdyapJ2H0wWWOmJ45i","elqpgoe2r951si4xrhujppj","m5ov42Vm6mR7RQWTvl1NW","cw8cerc0cos8lh871oz8rtf","PZxxZ4iESzSlbbHJKxuAZ","UDu62Pa6BaRqlG8uGoMhy","u3zcndycwqessho5h6x0nz9","ZgCUp366YrF2Tyky2NT73","DVpVUmavSoVDA7UIlPzLX","nMCtMXVvjBsJk3iw1zoIO","ANfx9Z4a6ZA0uJuSHtbIJ","BkG557LKUYbH1DnxprEVT","1TaH8zDTM98FZ9SYaeXLM","02v7ymc144e5c4pv3edkud7","dc79799f-a55d-48ab-a8be-c48adb1b19c0","f6feef57-b8f5-451f-a09a-7b63f6a07183","4sz47Y0LKs1Si73rWtyyh","g7ulqi8no93ezeocbesc3ll","5a9fb1df-478e-4687-9be0-5cb97e61ec57","1374e9e9-1cbc-4e1f-b1ca-66b8569533dd","D8Z3rjXkSj2EOymXQXF4Z","np3c1ykvnjqv5xoombpfwqz","f529cc34-aba0-45ca-ad7e-02ddda318941","0zcauha3il2NqtxZazIo7","9bbd6f68-03b2-41f4-92e4-2ca313e8b450","5a2ab598-fa7e-4471-8bda-9f5831b679ae","uV6w4mZPoohWyZV4Xaad0","QHXEIyeZGIGMVi5Q52UWI","RgE0mZLaUjPftFPZsiAoe","mytCOts26Pidush65tdRW","fwUzxfLSPMH1eL8oBoLWx","wazdsda6h25x66edvfmeuiv","TbW7PM9bg1y5TGkiWwQ8b","xiSIDeEtIc8X0lpUQlppI","0jxgntiLNHWFuCbzqtFGF","GkdMprLUe4QQULBxmGN6V","4SYc6v5hxY5g6Ip6kjpwO","czi7ilt2i1uoqm1f2otbntj","fqVQpS9FBiXgKsZX3R3sJ","L5JUZlGAGvTxrsEBB7DY8","ttyri4pwfyn5lcx0vp9804o","TeTedoeS2LdHPR632eCpM","ulicRRwo3lSFzh3tMfWH9","p7d24vyb8m00ombzn34t50c","e65188a1-177e-4ab2-99f9-75f85d537621","fajYnbVhCRDi74xn0H30R","bArGdGwqo3iFkyKMyE7qR","4Dcp7gbEVoLLgfu7bXFai","5d700782-fb81-416e-83f9-5dd88260e350","zubgzhNFE6KlTgXcjTz6O","8lpdfWa0cbSq1XJQbcYcY","2psluywdc416t7vrql0m058","17I8ZksXvqCH1mRtZDjHp","kF916Ow84qpJJeMRkWMIo","tMLkLcrIHHBz56xVmBLkP","CSePBQ6q7qhowKESqVwt7","laZ4OfLhZNK1Kuy6GaWUr","z5IJblOknQhMzZ5QZh4ye","N36FHxfxzwJfxDY3miWyX","3bb25f58-2b50-4fa3-af55-48ea9f88a081","7x07qjgbitozdfszqzuy7ix","u93Rz4fEWGu6VBR30Zraf","9hjMHnKvYT4jLKvuDSXaV","qC5GxCZBmNb4Ip6c0kU8x","LgW7mTIALODoXc54B3p6S","UYPxfHBFWX7fb6hHU5bB6","74lYtC8NKpCzcyFOZTfR1","sEoBNAEuaTxwSmTXDonZt","dj0jr9mpvs62e2pkg3zc3yy","z8ie0xjogb6ht7gzowav5xr","qxSOd6SPN8qf9ZUojVFDX","WQoMTf6VXBaxCgksXAVsj","2Mw4XgfyCHXHNOX5yoCIY","qcdt2f7jo51muquo5r95dpo","0XJqmcdtcMZu66glBI5O8","lK8r8BXS4ThiUTe4xKIZe","93de42ca-53ea-460a-baa7-b9ec5c47cb1e","Rxs2jaGpdFzqYtP7lAJFJ","aO8W81Z0PyIb6Hs7nOHPW","lhzisalkebu4w5n01np07i0","7b5l4b6fi65n7sv9org5q1l","I01hENHnh8Tqu3Ok8sLzG","03o3n0hz9v9jtb7j889zpd4","evqsPNutOaZ8hcBCqxFQu","zhhxcjZUHdU8uRLwGb9Zh","G1aFACZB2ooWGMGwyd3ZW","YWy1C4tgoaCcw1m8JJsr7","Szj3o5iaNxPpesiCqwrbu","613syb18hb3v0u1ydvor7ru","XhvCDW3fIw6h6MhY5ticq","Q70g7SusFZBQXzkuQifv4","AzfWDH3wp7jFpL2EYxBcW","y0fwpZ9qMqirsLiFyOciU","ZF8xj8wwDUqKlrwTrCFZ1","tAJvhqhdfyZZa87QHq1TU","4hRmipi8lxpBLyzWu5JVB","iTg0C7QjvnmqBZeEigJNs","3babc3d2-79ae-470a-9c06-ab8bba2e684e","bF3UsMFya3fMeXWDspVov","ULkfbL9WpktbVYnzhl6Jw","PpNOO8JYWe6dM8wruSa7x","di40pCxDn7IiqE8lFdD46","rmW0mkerqV35I8QPji6lM","3IFIK1ByzeIxZCByryGLN","iImkYAKfkw3beAl6pLbDn","ecDe8DNWrkeQTwpTEvHje","i2it5id8qwtg27n4usg8bo1","Yqhdd9mSJGN7OJOeyoSD2","Ws5tah8tpeyn9tK8VBTg8","gWAg15uBJgkS2B0wcpMAa","l7V3v2ep1YdDCt7DOr7Ci","yM2PJBdqJnHpD63cPA6sW","qn0bre7eLbi3QMbCfWkUi","fSu0KxFL41IRouotqmbHs","0gtg24Mj1a1bQFPRGQNlO","7iQPBMltLPLbFEz2qbjPu","yoh4pwoXcfELInGKRdYf6","dCGCWXgAmiOZXbdULT1m6","jMavlje07sNa6hSEIE8WA","Xxm0JE4dKHxrQAaZfzvxD","nRb6Im4Kcmc2ZWE7K1jZ1","PAEBZCyFBZJyR7OoMZ41E","PQ6km8RgRCuyICBPOYz8f","x5tm1nfjzyawwzedy3yitgd","2bhftt8rGuxYu4pFgNqru","hjYIZpHQWuXfeEoGeJEKW","K2M9bQqVq2eQfm29eslKL","X8obW1iKwYsvNgKWGyCzy","yJwSC7hqYIezTFHf5i0Ev","c4Z7ETcOHUILRMH32Sfjw","qiR6dIu857b9M9kTqjOyK","fc2coz74cnfy5czzofx4h5x","Ku1OgHMhELajzo61Gx7ye","LUrfhDWo8wuwZu7CN9TV8","osu6JGOnvXJ5gt3tpqWZY","1a6173cd-cf13-4b34-a522-8350bf9a364f","S2sBltrPfd8a7ICuD7CuH","GLQ2pmkJUNUa93THBDVsD","md6xitz4exia2joa06i490b","oWCuBXOg6JWfZzjmKxmNl","jOmhZ8ovLYTPbpM1vqSDx","p9bov84s0isgkl1ysaw93kk","FraC6xzLy1ei91l1ICyc9","6ceBas2RE9Q4787GDngH7","734cd78d-0bc9-426b-803d-1efc84dfffe5","k4Bb09px6r0FxIRs49SXV","oaG3H1S9IUBO644nGZigu","Ka7agQJkUMRSWN0uFdkWK","si3z090WsiLasMhJBa1Az","hs6rwzt4mogiicoc4gcykbi","ljKAVERmdEiKLK9hXGKBm","zxt3lhonfdhglvijd17ua8c","dd7dopve1dudqkoibkqvti4","923tgifqf59ovv5yldtyi0a","vrjwp01goqw47fqctm4f4lo","c99gdmmppju3r1tth8cb2jx","z2pvn5qxdz84zgygqzxage8"],"parent":null,"data":{},"body":"This Dendron vault of tech knowledge is organized according to domains and their sub-domains, along with specific implementation of those domains.\n\nFor instance, Git itself is a domain. Sub-domains of Git would include things like `commit`,\n`tags`, `reflog` etc. implementations of each of those could be `cli`, `strat`\n(strategies), `inner`, and so on.\n\nThe goal of the wiki is to present data in a manner that is from the perspective\nof a querying user. Here, a user is a programmer wanting to get key information\nfrom a specific domain. For instance, if a user wants to use postgres functions\nand hasn't done them in a while, they should be able to query\n`postgres.functions` to see what information is available to them.\n\nThis wiki has been written with myself in mind. While learning each of these\ndomains, I have been sensitive to the \"aha\" moments and have noted down my\ninsights as they arose. I have refrained from capturing information that I\nconsidered obvious or otherwise non-beneficial to my own understanding.\n\nAs a result, I have allowed myself to use potentially arcane concepts to explain other ones. For example, in my note on [[unit testing|testing.method.unit]], I have made reference to the [[microservices|general.arch.microservice]] note. If these notes were made with the public in mind, this would be a very bad strategy, given that you'd have to understand microservices to be able to draw that same parallel that I've already drawn. Since these notes are written for myself, I have been fine with taking these liberties.\n\nWhat I hope to gain from this wiki is the ability to step away from any\ngiven domain for a long period of time, and be able to be passably useful for\nwhatever my goals are within a short period of time. Of course this is all\nvague sounding, and really depends on the domain along with the ends I am\ntrying to reach.\n\nTo achieve this, the system should be steadfast to:\n- be able to put information in relatively easily, without too much thought\n\trequired to its location. While location is important, Dendron makes it easy\n\tto relocate notes, if it becomes apparent that a different place makes more\n\tsense.\n- be able to extract the information that is needed, meaning there is a\n\thigh-degree in confidence in the location of the information. The idea is\n\tthat information loses a large amount of its value when it is unfindable.\n\tTherefore, a relatively strict ideology should be used when determining\n\twhere a piece of information belongs.\n\t- Some concepts might realistically belong to multiple domains. For instance, the concept of *access modifiers* can be found in both `C#` and `Typescript`. Therefore, this note should be abstracted to a common place, such as [[OOP|paradigm.oop]].\n\nThis Dendron vault is the sister component to the [General Second Brain](https://tech.kyletycholiz.com).\n\n### Tags\nThroughout the garden, I have made use of tags, which give semantic meaning to the pieces of information.\n\n- `ex.` - Denotes an *example* of the preceding piece of information\n- `spec:` - Specifies that the preceding information has some degree of *speculation* to it, and may not be 100% factual. Ideally this gets clarified over time as my understanding develops.\n- `anal:` - Denotes an *analogy* of the preceding information. Often I will attempt to link concepts to others that I have previously learned.\n- `mn:` - Denotes a *mnemonic*\n- `expl:` - Denotes an *explanation*\n\n## Resources\n### UE (Unexamined) Resources\nOften, I come across sources of information that I believe to be high-quality. They may be recommendations or found in some other way. No matter their origin, I may be in a position where I don't have the time to fully examine them (and properly extract notes), or I may not require the information at that moment in time. In cases like these, I will add reference to a section of the note called **UE Resources**. The idea is that in the future when I am ready to examine them, I have a list of resources that I can start with. This is an alternative strategy to compiling browser bookmarks, which I've found can quickly become untenable.\n\n### E (Examined) Resources\nOnce a resource has been thoroughly examined and has been mined for notes, it will be moved from *UE Resources* to *E Resources*. This is to indicate that (in my own estimation), there is nothing more to be gained from the resource that is not already in the note.\n\n### Resources\nThis heading is for inexhaustible resources. \n- A prime example would be a quality website that continually posts articles.  - Another example would be a tool, such as software that measures frequencies in a room to help acoustically treat it.\n"},"collectionChildren":null,"customHeadContent":null,"config":{"version":5,"dev":{"enablePreviewV2":true},"commands":{"lookup":{"note":{"selectionMode":"extract","confirmVaultOnCreate":false,"leaveTrace":false,"bubbleUpCreateNew":true,"fuzzThreshold":0.2,"vaultSelectionModeOnCreate":"smart"}},"insertNote":{"initialValue":"templates"},"insertNoteLink":{"aliasMode":"none","enableMultiSelect":false},"insertNoteIndex":{"enableMarker":false},"randomNote":{},"copyNoteLink":{"aliasMode":"title"},"templateHierarchy":"template"},"workspace":{"dendronVersion":"0.83.0","vaults":[{"fsPath":"../main/tech","name":"tech"}],"journal":{"dailyDomain":"daily","name":"journal","dateFormat":"y.MM.dd","addBehavior":"childOfDomain"},"scratch":{"name":"scratch","dateFormat":"y.MM.dd.HHmmss","addBehavior":"asOwnDomain"},"graph":{"zoomSpeed":1,"createStub":false},"enableAutoCreateOnDefinition":false,"enableXVaultWikiLink":false,"enableRemoteVaultInit":true,"workspaceVaultSyncMode":"noCommit","enableAutoFoldFrontmatter":true,"maxPreviewsCached":10,"maxNoteLength":204800,"task":{"name":"","dateFormat":"","addBehavior":"childOfCurrent","statusSymbols":{"":" ","wip":"w","done":"x","assigned":"a","moved":"m","blocked":"b","delegated":"l","dropped":"d","pending":"y"},"prioritySymbols":{"H":"high","M":"medium","L":"low"},"todoIntegration":false,"createTaskSelectionType":"selection2link","taskCompleteStatus":["done","x"]},"enableUserTags":true,"enableHashTags":true,"enableEditorDecorations":true,"enableFullHierarchyNoteTitle":false},"preview":{"enableFMTitle":true,"enableNoteTitleForLink":true,"enableMermaid":true,"enablePrettyRefs":true,"enableKatex":true,"automaticallyShowPreview":false,"enableFrontmatterTags":true,"enableHashesForFMTags":false},"publishing":{"enableFMTitle":true,"enableNoteTitleForLink":true,"enablePrettyRefs":true,"enableKatex":true,"copyAssets":true,"siteHierarchies":["root"],"writeStubs":false,"siteRootDir":"docs","seo":{"title":"Dendron","description":"The Tech Digital Garden of Kyle Tycholiz"},"github":{"cname":"tech.kyletycholiz.com","enableEditLink":true,"editLinkText":"Edit this page on GitHub","editBranch":"master","editViewMode":"tree"},"enableSiteLastModified":true,"enableFrontmatterTags":true,"enableHashesForFMTags":false,"enableRandomlyColoredTags":true,"enableTaskNotes":true,"enablePrettyLinks":true,"searchMode":"lookup","enableMermaid":true,"siteUrl":"https://tech.kyletycholiz.com","duplicateNoteBehavior":{"action":"useVault","payload":["tech"]},"siteFaviconPath":"favicon.ico","siteIndex":"root"}}},"__N_SSG":true}