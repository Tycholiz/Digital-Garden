{"pageProps":{"note":{"id":"a9WtJDyCZ4NvEaAZ4p3bd","title":"Kubernetes Pod","desc":"","updated":1656604766778,"created":1622064644283,"custom":{},"fname":"k8s.objects.pod","type":"note","vault":{"fsPath":"../main/tech","name":"tech"},"contentHash":"bc7800195f2281d0d08e3cf5e5ac98ed","links":[{"type":"wiki","from":{"fname":"k8s.objects.pod","id":"a9WtJDyCZ4NvEaAZ4p3bd","vaultName":"tech"},"value":"k8s.node.worker","alias":"worker nodes","position":{"start":{"line":4,"column":18,"offset":121},"end":{"line":4,"column":50,"offset":153},"indent":[]},"xvault":false,"sameFile":false,"to":{"fname":"k8s.node.worker"}},{"type":"wiki","from":{"fname":"k8s.objects.pod","id":"a9WtJDyCZ4NvEaAZ4p3bd","vaultName":"tech"},"value":"nginx","position":{"start":{"line":13,"column":35,"offset":817},"end":{"line":13,"column":44,"offset":826},"indent":[]},"xvault":false,"sameFile":false,"to":{"fname":"nginx"}},{"type":"wiki","from":{"fname":"k8s.objects.pod","id":"a9WtJDyCZ4NvEaAZ4p3bd","vaultName":"tech"},"value":"k8s.node.worker.components.kubelet","alias":"reference","position":{"start":{"line":112,"column":1,"offset":5286},"end":{"line":112,"column":49,"offset":5334},"indent":[]},"xvault":false,"sameFile":false,"to":{"fname":"k8s.node.worker.components.kubelet"}},{"from":{"fname":"k8s","id":"qxSOd6SPN8qf9ZUojVFDX","vaultName":"tech"},"type":"backlink","position":{"start":{"line":48,"column":59,"offset":4516},"end":{"line":48,"column":90,"offset":4547},"indent":[]},"value":"k8s.objects.pod"},{"from":{"fname":"k8s.controllers.node","id":"r3tsEEYDIeLs1mWyVL6Kz","vaultName":"tech"},"type":"backlink","position":{"start":{"line":2,"column":49,"offset":49},"end":{"line":2,"column":73,"offset":73},"indent":[]},"value":"k8s.objects.pod"},{"from":{"fname":"k8s.node.worker","id":"iuja3tlxkdniv862fq9h1v4","vaultName":"tech"},"type":"backlink","position":{"start":{"line":5,"column":25,"offset":196},"end":{"line":5,"column":49,"offset":220},"indent":[]},"value":"k8s.objects.pod"},{"from":{"fname":"k8s.objects.deployment","id":"ZK0P0va9kOJGsM9X7X2Td","vaultName":"tech"},"type":"backlink","position":{"start":{"line":6,"column":15,"offset":159},"end":{"line":6,"column":34,"offset":178},"indent":[]},"value":"k8s.objects.pod"},{"from":{"fname":"k8s.objects.deployment","id":"ZK0P0va9kOJGsM9X7X2Td","vaultName":"tech"},"type":"backlink","position":{"start":{"line":20,"column":11,"offset":1695},"end":{"line":20,"column":35,"offset":1719},"indent":[]},"value":"k8s.objects.pod"},{"from":{"fname":"k8s.objects.service","id":"ryBzcGWSKyybRXnyKxteV","vaultName":"tech"},"type":"backlink","position":{"start":{"line":3,"column":60,"offset":75},"end":{"line":3,"column":84,"offset":99},"indent":[]},"value":"k8s.objects.pod"},{"from":{"fname":"k8s.objects.service","id":"ryBzcGWSKyybRXnyKxteV","vaultName":"tech"},"type":"backlink","position":{"start":{"line":13,"column":7,"offset":978},"end":{"line":13,"column":31,"offset":1002},"indent":[]},"value":"k8s.objects.pod"},{"from":{"fname":"k8s.objects.service","id":"ryBzcGWSKyybRXnyKxteV","vaultName":"tech"},"type":"backlink","position":{"start":{"line":25,"column":32,"offset":1935},"end":{"line":25,"column":56,"offset":1959},"indent":[]},"value":"k8s.objects.pod"}],"anchors":{"how-many-containers-in-a-pod":{"type":"header","text":"How many containers in a pod?","value":"how-many-containers-in-a-pod","line":73,"column":0,"depth":3},"podtemplate":{"type":"header","text":"PodTemplate","value":"podtemplate","line":87,"column":0,"depth":3},"pod-scheduling":{"type":"header","text":"Pod Scheduling","value":"pod-scheduling","line":95,"column":0,"depth":2},"major-components":{"type":"header","text":"Major components","value":"major-components","line":97,"column":0,"depth":3},"api-server":{"type":"header","text":"API Server","value":"api-server","line":101,"column":0,"depth":4},"scheduler":{"type":"header","text":"Scheduler","value":"scheduler","line":110,"column":0,"depth":4},"kubelet":{"type":"header","text":"Kubelet","value":"kubelet","line":116,"column":0,"depth":4},"process-of-creating-a-pod":{"type":"header","text":"Process of creating a pod","value":"process-of-creating-a-pod","line":120,"column":0,"depth":3},"pod-cpu-resources":{"type":"header","text":"Pod CPU resources","value":"pod-cpu-resources","line":133,"column":0,"depth":3},"pod-definition-file":{"type":"header","text":"Pod Definition File","value":"pod-definition-file","line":147,"column":0,"depth":2}},"children":["bpkHS7t7KGHv2Ty9BfWtp"],"parent":"697fe32a-7fd3-40cb-aa25-9914c7dde11f","data":{}},"body":"<h1 id=\"kubernetes-pod\">Kubernetes Pod<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#kubernetes-pod\"></a></h1>\n<p>A Pod is a way to represent a running process in a cluster.</p>\n<ul>\n<li>Pod refers to a pod of whales or pea pod</li>\n</ul>\n<p>Pods live within <a href=\"/notes/iuja3tlxkdniv862fq9h1v4\">worker nodes</a></p>\n<p>Pods are the smallest and simplest unit of replication in K8s </p>\n<ul>\n<li>Pods are the building blocks of Kubernetes, just as containers are the building block of Docker.\n<ul>\n<li>In Docker, we think in terms of processes. In Kubernetes, we think in terms of multiple processes (co-existing to perform one task)</li>\n</ul>\n</li>\n</ul>\n<p>A pod is a collection of containers that share resources</p>\n<ul>\n<li>Though realistically, we tend to only have a single container in a Pod. We might see more than 1, but it normally isn't more than 2 or 3.</li>\n<li>In cases where we have more than one container in a pod, it's probably because the containers all support the primary application\n<ul>\n<li>ex. Imagine we have a primary <a href=\"/notes/AzfWDH3wp7jFpL2EYxBcW\">Nginx</a> container, and alongside we have a container whose job is to regularly pull a github repo and update the website that the nginx container is serving. These 2 containers working together can be thought of a single atomic unit.\n<img src=\"/assets/images/2022-02-25-16-34-02.png\"></li>\n</ul>\n</li>\n</ul>\n<p>A pod is designed to run multiple cooperative processes that could be seen as a single cohesive piece of work. This is the level of abstraction that we live at in Kubernetes.</p>\n<p>All the containers in a pod run on the same machine.</p>\n<ul>\n<li>That is, a pod cannot be split across multiple nodes</li>\n</ul>\n<p>A pod provides a way to set <code>.env</code> variables, mount storage, and feed other information into a container</p>\n<p>A pod encapsulates one or more containers deployed together on one host, thereby sharing the same resources (of the host)</p>\n<ul>\n<li>ex. if we have 5 containers of a mongodb service deployed, and 3 of them were on the same host (ex. same machine), those 3 together would be called a Pod</li>\n</ul>\n<p>Pods are not long-lived services. Even though Kubernetes is doing its best to ensure that the containers in a Pod are (almost) always up-and-running, the same cannot be said for Pods. In Kubernetes, containers are fault-tolerant, but pods are not.</p>\n<ul>\n<li>If a Pod fails, gets destroyed, or gets evicted from a Node, it will not be rescheduled.</li>\n<li>Similarly, if a whole node is destroyed, all the Pods on it will cease to exist.</li>\n</ul>\n<p>Each pod gets its own IP address, though it is unreliable, since pods are designed to be short-lived; so the creation of a new pod would result in a new IP</p>\n<p>When the container inside a pod exits, the pod dies too.</p>\n<p>When a container inside a pod fails, Kubernetes will create a new container based off the same image:</p>\n<pre class=\"language-sh\"><code class=\"language-sh\">$ kubectl exec -it db pkill mongod\n$ kubectl get pods\n</code></pre>\n<p>produces (note how RESTARTS is 1):</p>\n<pre><code>NAME READY STATUS  RESTARTS AGE\ndb   1/1   Running 1        13m\n</code></pre>\n<p>Everything in a pod is tightly coupled.</p>\n<p>The containers in a pod are not necessarily Docker containers, though it is the most common implementation.</p>\n<p>Normally pods are not created by hand. Instead, we depend on higher level constructs like Controllers to do that for us.</p>\n<p>Pods...</p>\n<ul>\n<li>are mortal. They are born and cannot be resurrected once they die.</li>\n<li>are not intended to run multiple instances of the same application,</li>\n</ul>\n<p>Containers within a pod...</p>\n<ul>\n<li>share an IP address and port space, and can find each other via localhost.</li>\n<li>share storage space</li>\n</ul>\n<p>In a pre-container world, being executed on the same physical or virtual machine would mean being executed on the same logical host.</p>\n<ul>\n<li>logical host would contain relatively tightly coupled code</li>\n</ul>\n<h3 id=\"how-many-containers-in-a-pod\">How many containers in a pod?<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#how-many-containers-in-a-pod\"></a></h3>\n<p>Even though a Pod can contain any number of containers, the most common use case is to use the <strong>single-container-in-a-Pod</strong> model</p>\n<ul>\n<li>Imagine we had your express api server image and a postgres image. If we put both of these in a single pod, we would no longer be able to have different numbers of containers. For instance, we could not have 2 api containers and 1 postgres container.</li>\n</ul>\n<p>There are scenarios when having multiple containers in a Pod is a good idea. However, they are very specific and, in most cases, are based on one container that acts as the main service and the rest serving as side-cars.</p>\n<p>A frequent use case is multi-container Pods used for:</p>\n<ul>\n<li>Continuous integration (CI)</li>\n<li>Continious Delivery (CD)</li>\n<li>Continuous Deployment processes (CDP)</li>\n</ul>\n<h3 id=\"podtemplate\">PodTemplate<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#podtemplate\"></a></h3>\n<p>When we create a pod, a hash of the PodTemplate is taken and it appended to the Pod name. This means that 2 pods created from identical PodTemplates on different machines will produce the same hash.</p>\n<ul>\n<li>This is also how Git SHAs work.</li>\n</ul>\n<p>spec: PodTemplate is in the ReplicaSet</p>\n<h2 id=\"pod-scheduling\">Pod Scheduling<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#pod-scheduling\"></a></h2>\n<h3 id=\"major-components\">Major components<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#major-components\"></a></h3>\n<p>There are 3 major components: API Server, Scheduler, Kubelet</p>\n<h4 id=\"api-server\">API Server<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#api-server\"></a></h4>\n<p>Central component of the K8s cluster</p>\n<ul>\n<li>runs on the master node\n<ul>\n<li>with Minikube, both master and worker nodes are baked into the same VM. Realistically, the K8s cluster should have the two separated on different hosts.</li>\n</ul>\n</li>\n</ul>\n<p>Most of the coordination in Kubernetes consists of a component writing to the API Server resource that another component is watching. The second component will then react to changes almost immediately.</p>\n<h4 id=\"scheduler\">Scheduler<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#scheduler\"></a></h4>\n<p>The scheduler is also running on the master node.</p>\n<ul>\n<li>Its job is to watch for unassigned pods and assign them to a node which has available resources (CPU and memory) matching Pod requirements.</li>\n</ul>\n<h4 id=\"kubelet\">Kubelet<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#kubelet\"></a></h4>\n<p><a href=\"/notes/bRPGb7XOb1TDfZqpnf201\">reference</a></p>\n<h3 id=\"process-of-creating-a-pod\">Process of creating a pod<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#process-of-creating-a-pod\"></a></h3>\n<p>ie. when running <code>kubectl create -f pod/db.yml</code></p>\n<ol>\n<li>kubectl (the K8s client) sends a request to the API Server, requesting the creation of a pod</li>\n<li>Since the scheduler is watching the API server for new events, it detected that there is an unassigned Pod.</li>\n<li>The scheduler decided which node to assign the Pod to and sent that information to the API server.</li>\n<li>Kubelet is also watching the API server. It detected that the Pod was assigned to the node it is running on.</li>\n<li>Kubelet sent a request to Docker requesting the creation of the containers that form the Pod. In our case, the Pod defines a single container based on the mongo image.</li>\n<li>Finally, Kubelet sent a request to the API server notifying it that the Pod was created successfully.</li>\n</ol>\n<p><img src=\"/assets/images/2021-05-28-11-22-21.png\" alt=\"Pod Scheduling Sequence\"></p>\n<h3 id=\"pod-cpu-resources\">Pod CPU resources<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#pod-cpu-resources\"></a></h3>\n<p>Pods have two resource types for CPU in K8S: requests and limits. </p>\n<ul>\n<li>The request is a guaranteed allocation that we expect the pod to utilize. </li>\n<li>The limit is the cap that we don't want our pod to EVER exceed, as your thread will receive WAIT responses and can skew time sensitive apps. \n<ul>\n<li>Therefore, hitting your limit should be considered a bug in right sizing calculations.</li>\n</ul>\n</li>\n</ul>\n<p>CPU in k8s are measured in millicores (1000m = 1 [core, or AWS EC2 vCPU])</p>\n<ul>\n<li><a href=\"https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/#meaning-of-cpu\">https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/#meaning-of-cpu</a></li>\n</ul>\n<p>Sidebar: Memory is also included in requests, except when you hit the limit, the pod is terminated. This is easly identified because the exist signal will exceed 128. </p>\n<ul>\n<li>You can find the original signal code simply by subtracting 128. Example: Exit Code 137: Indicates failure as container received SIGKILL. 137-128=9, ie <code>kill -9 &#x3C;PID></code></li>\n</ul>\n<hr>\n<h2 id=\"pod-definition-file\">Pod Definition File<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#pod-definition-file\"></a></h2>\n<pre class=\"language-yml\"><code class=\"language-yml\"><span class=\"token comment\"># using v1 of the K8s Pods API</span>\n<span class=\"token key atrule\">apiVersion</span><span class=\"token punctuation\">:</span> v1\n<span class=\"token key atrule\">kind</span><span class=\"token punctuation\">:</span> Pod\n<span class=\"token key atrule\">metadata</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> db\n  <span class=\"token key atrule\">labels</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">type</span><span class=\"token punctuation\">:</span> db\n    <span class=\"token key atrule\">vendor</span><span class=\"token punctuation\">:</span> MongoLabs\n<span class=\"token key atrule\">spec</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">containers</span><span class=\"token punctuation\">:</span>\n  <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> db\n    <span class=\"token key atrule\">image</span><span class=\"token punctuation\">:</span> mongo<span class=\"token punctuation\">:</span><span class=\"token number\">3.3</span>\n    <span class=\"token key atrule\">command</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"mongod\"</span><span class=\"token punctuation\">]</span> <span class=\"token comment\"># the command that should be executed when the container starts</span>\n    <span class=\"token key atrule\">args</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"--rest\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"--httpinterface\"</span><span class=\"token punctuation\">]</span>\n\n</code></pre>\n<hr>\n<strong>Children</strong>\n<ol>\n<li><a href=\"/notes/bpkHS7t7KGHv2Ty9BfWtp\">Pod CLI</a></li>\n</ol>\n<hr>\n<strong>Backlinks</strong>\n<ul>\n<li><a href=\"/notes/qxSOd6SPN8qf9ZUojVFDX\">K8s</a></li>\n<li><a href=\"/notes/r3tsEEYDIeLs1mWyVL6Kz\">Node controller</a></li>\n<li><a href=\"/notes/iuja3tlxkdniv862fq9h1v4\">Worker Node</a></li>\n<li><a href=\"/notes/ZK0P0va9kOJGsM9X7X2Td\">Deployment</a></li>\n<li><a href=\"/notes/ryBzcGWSKyybRXnyKxteV\">Kubernetes Service</a></li>\n</ul>","noteIndex":{"id":"olZIVfSs2uLLr3BppFh4K","title":"Digital Garden","desc":"","updated":1674517603573,"created":1615482407722,"custom":{"nav_order":0,"permalink":"/"},"fname":"root","type":"note","vault":{"fsPath":"../main/tech","name":"tech"},"contentHash":"effb007003ca6a91d7fd0c293e1d2436","links":[{"type":"wiki","from":{"fname":"root","id":"olZIVfSs2uLLr3BppFh4K","vaultName":"tech"},"value":"testing.method.unit","alias":"unit testing","position":{"start":{"line":18,"column":121,"offset":1146},"end":{"line":18,"column":157,"offset":1182},"indent":[]},"xvault":false,"sameFile":false,"to":{"fname":"testing.method.unit"}},{"type":"wiki","from":{"fname":"root","id":"olZIVfSs2uLLr3BppFh4K","vaultName":"tech"},"value":"general.arch.microservice","alias":"microservices","position":{"start":{"line":18,"column":188,"offset":1213},"end":{"line":18,"column":231,"offset":1256},"indent":[]},"xvault":false,"sameFile":false,"to":{"fname":"general.arch.microservice"}},{"type":"wiki","from":{"fname":"root","id":"olZIVfSs2uLLr3BppFh4K","vaultName":"tech"},"value":"paradigm.oop","alias":"OOP","position":{"start":{"line":36,"column":227,"offset":2718},"end":{"line":36,"column":247,"offset":2738},"indent":[]},"xvault":false,"sameFile":false,"to":{"fname":"paradigm.oop"}}],"anchors":{"tags":{"type":"header","text":"Tags","value":"tags","line":46,"column":0,"depth":3},"resources":{"type":"header","text":"Resources","value":"resources","line":55,"column":0,"depth":2},"ue-unexamined-resources":{"type":"header","text":"UE (Unexamined) Resources","value":"ue-unexamined-resources","line":56,"column":0,"depth":3},"e-examined-resources":{"type":"header","text":"E (Examined) Resources","value":"e-examined-resources","line":59,"column":0,"depth":3},"resources-1":{"type":"header","text":"Resources","value":"resources-1","line":62,"column":0,"depth":3}},"children":["40ubf88tephzbdjte8cdsa0","zFMjbn3xihVNHjUIdZCD1","IK6NOKemuDjhfstJBovKL","ZaTr28eWk1DrXOEsc1YVb","Vi0WYVLZunVM9iR8XZJn3","ngAbg7gluvbt1bY1UIRsi","RCPPXSakm5TvKka8kOmVp","LIcuGYV0DDt1VWbvH6Sed","MPx8ykTP57I40WTZvTP7f","ZU5WmdTG1bHoE8RcmZXZG","jqWiyYJff92RjXuUQt9PQ","KihijM8OQvZ4pASkkhqzL","F9vyqvls3OBCujtukqKhy","k6jxm2b3edgkhbordpuz6v1","facc2b01-755a-409f-99f6-57bef2d1501f","bZumdyapJ2H0wWWOmJ45i","elqpgoe2r951si4xrhujppj","m5ov42Vm6mR7RQWTvl1NW","cw8cerc0cos8lh871oz8rtf","PZxxZ4iESzSlbbHJKxuAZ","UDu62Pa6BaRqlG8uGoMhy","u3zcndycwqessho5h6x0nz9","ZgCUp366YrF2Tyky2NT73","DVpVUmavSoVDA7UIlPzLX","nMCtMXVvjBsJk3iw1zoIO","ANfx9Z4a6ZA0uJuSHtbIJ","BkG557LKUYbH1DnxprEVT","1TaH8zDTM98FZ9SYaeXLM","02v7ymc144e5c4pv3edkud7","dc79799f-a55d-48ab-a8be-c48adb1b19c0","f6feef57-b8f5-451f-a09a-7b63f6a07183","4sz47Y0LKs1Si73rWtyyh","g7ulqi8no93ezeocbesc3ll","5a9fb1df-478e-4687-9be0-5cb97e61ec57","1374e9e9-1cbc-4e1f-b1ca-66b8569533dd","D8Z3rjXkSj2EOymXQXF4Z","np3c1ykvnjqv5xoombpfwqz","f529cc34-aba0-45ca-ad7e-02ddda318941","0zcauha3il2NqtxZazIo7","9bbd6f68-03b2-41f4-92e4-2ca313e8b450","5a2ab598-fa7e-4471-8bda-9f5831b679ae","uV6w4mZPoohWyZV4Xaad0","QHXEIyeZGIGMVi5Q52UWI","RgE0mZLaUjPftFPZsiAoe","mytCOts26Pidush65tdRW","fwUzxfLSPMH1eL8oBoLWx","wazdsda6h25x66edvfmeuiv","TbW7PM9bg1y5TGkiWwQ8b","xiSIDeEtIc8X0lpUQlppI","0jxgntiLNHWFuCbzqtFGF","GkdMprLUe4QQULBxmGN6V","4SYc6v5hxY5g6Ip6kjpwO","czi7ilt2i1uoqm1f2otbntj","fqVQpS9FBiXgKsZX3R3sJ","L5JUZlGAGvTxrsEBB7DY8","ttyri4pwfyn5lcx0vp9804o","TeTedoeS2LdHPR632eCpM","ulicRRwo3lSFzh3tMfWH9","p7d24vyb8m00ombzn34t50c","e65188a1-177e-4ab2-99f9-75f85d537621","fajYnbVhCRDi74xn0H30R","bArGdGwqo3iFkyKMyE7qR","4Dcp7gbEVoLLgfu7bXFai","5d700782-fb81-416e-83f9-5dd88260e350","zubgzhNFE6KlTgXcjTz6O","8lpdfWa0cbSq1XJQbcYcY","2psluywdc416t7vrql0m058","17I8ZksXvqCH1mRtZDjHp","kF916Ow84qpJJeMRkWMIo","tMLkLcrIHHBz56xVmBLkP","CSePBQ6q7qhowKESqVwt7","laZ4OfLhZNK1Kuy6GaWUr","z5IJblOknQhMzZ5QZh4ye","N36FHxfxzwJfxDY3miWyX","3bb25f58-2b50-4fa3-af55-48ea9f88a081","7x07qjgbitozdfszqzuy7ix","u93Rz4fEWGu6VBR30Zraf","9hjMHnKvYT4jLKvuDSXaV","qC5GxCZBmNb4Ip6c0kU8x","LgW7mTIALODoXc54B3p6S","UYPxfHBFWX7fb6hHU5bB6","74lYtC8NKpCzcyFOZTfR1","sEoBNAEuaTxwSmTXDonZt","dj0jr9mpvs62e2pkg3zc3yy","z8ie0xjogb6ht7gzowav5xr","qxSOd6SPN8qf9ZUojVFDX","WQoMTf6VXBaxCgksXAVsj","2Mw4XgfyCHXHNOX5yoCIY","qcdt2f7jo51muquo5r95dpo","0XJqmcdtcMZu66glBI5O8","lK8r8BXS4ThiUTe4xKIZe","93de42ca-53ea-460a-baa7-b9ec5c47cb1e","Rxs2jaGpdFzqYtP7lAJFJ","aO8W81Z0PyIb6Hs7nOHPW","lhzisalkebu4w5n01np07i0","7b5l4b6fi65n7sv9org5q1l","I01hENHnh8Tqu3Ok8sLzG","03o3n0hz9v9jtb7j889zpd4","evqsPNutOaZ8hcBCqxFQu","zhhxcjZUHdU8uRLwGb9Zh","G1aFACZB2ooWGMGwyd3ZW","YWy1C4tgoaCcw1m8JJsr7","Szj3o5iaNxPpesiCqwrbu","613syb18hb3v0u1ydvor7ru","XhvCDW3fIw6h6MhY5ticq","Q70g7SusFZBQXzkuQifv4","AzfWDH3wp7jFpL2EYxBcW","y0fwpZ9qMqirsLiFyOciU","ZF8xj8wwDUqKlrwTrCFZ1","tAJvhqhdfyZZa87QHq1TU","4hRmipi8lxpBLyzWu5JVB","iTg0C7QjvnmqBZeEigJNs","3babc3d2-79ae-470a-9c06-ab8bba2e684e","bF3UsMFya3fMeXWDspVov","ULkfbL9WpktbVYnzhl6Jw","PpNOO8JYWe6dM8wruSa7x","di40pCxDn7IiqE8lFdD46","rmW0mkerqV35I8QPji6lM","3IFIK1ByzeIxZCByryGLN","iImkYAKfkw3beAl6pLbDn","ecDe8DNWrkeQTwpTEvHje","i2it5id8qwtg27n4usg8bo1","Yqhdd9mSJGN7OJOeyoSD2","Ws5tah8tpeyn9tK8VBTg8","gWAg15uBJgkS2B0wcpMAa","l7V3v2ep1YdDCt7DOr7Ci","yM2PJBdqJnHpD63cPA6sW","qn0bre7eLbi3QMbCfWkUi","fSu0KxFL41IRouotqmbHs","0gtg24Mj1a1bQFPRGQNlO","7iQPBMltLPLbFEz2qbjPu","yoh4pwoXcfELInGKRdYf6","dCGCWXgAmiOZXbdULT1m6","jMavlje07sNa6hSEIE8WA","Xxm0JE4dKHxrQAaZfzvxD","nRb6Im4Kcmc2ZWE7K1jZ1","PAEBZCyFBZJyR7OoMZ41E","PQ6km8RgRCuyICBPOYz8f","x5tm1nfjzyawwzedy3yitgd","2bhftt8rGuxYu4pFgNqru","hjYIZpHQWuXfeEoGeJEKW","K2M9bQqVq2eQfm29eslKL","X8obW1iKwYsvNgKWGyCzy","yJwSC7hqYIezTFHf5i0Ev","c4Z7ETcOHUILRMH32Sfjw","qiR6dIu857b9M9kTqjOyK","fc2coz74cnfy5czzofx4h5x","Ku1OgHMhELajzo61Gx7ye","LUrfhDWo8wuwZu7CN9TV8","osu6JGOnvXJ5gt3tpqWZY","1a6173cd-cf13-4b34-a522-8350bf9a364f","S2sBltrPfd8a7ICuD7CuH","GLQ2pmkJUNUa93THBDVsD","md6xitz4exia2joa06i490b","oWCuBXOg6JWfZzjmKxmNl","jOmhZ8ovLYTPbpM1vqSDx","p9bov84s0isgkl1ysaw93kk","FraC6xzLy1ei91l1ICyc9","6ceBas2RE9Q4787GDngH7","734cd78d-0bc9-426b-803d-1efc84dfffe5","k4Bb09px6r0FxIRs49SXV","oaG3H1S9IUBO644nGZigu","Ka7agQJkUMRSWN0uFdkWK","si3z090WsiLasMhJBa1Az","hs6rwzt4mogiicoc4gcykbi","ljKAVERmdEiKLK9hXGKBm","zxt3lhonfdhglvijd17ua8c","dd7dopve1dudqkoibkqvti4","923tgifqf59ovv5yldtyi0a","vrjwp01goqw47fqctm4f4lo","c99gdmmppju3r1tth8cb2jx","z2pvn5qxdz84zgygqzxage8"],"parent":null,"data":{},"body":"This Dendron vault of tech knowledge is organized according to domains and their sub-domains, along with specific implementation of those domains.\n\nFor instance, Git itself is a domain. Sub-domains of Git would include things like `commit`,\n`tags`, `reflog` etc. implementations of each of those could be `cli`, `strat`\n(strategies), `inner`, and so on.\n\nThe goal of the wiki is to present data in a manner that is from the perspective\nof a querying user. Here, a user is a programmer wanting to get key information\nfrom a specific domain. For instance, if a user wants to use postgres functions\nand hasn't done them in a while, they should be able to query\n`postgres.functions` to see what information is available to them.\n\nThis wiki has been written with myself in mind. While learning each of these\ndomains, I have been sensitive to the \"aha\" moments and have noted down my\ninsights as they arose. I have refrained from capturing information that I\nconsidered obvious or otherwise non-beneficial to my own understanding.\n\nAs a result, I have allowed myself to use potentially arcane concepts to explain other ones. For example, in my note on [[unit testing|testing.method.unit]], I have made reference to the [[microservices|general.arch.microservice]] note. If these notes were made with the public in mind, this would be a very bad strategy, given that you'd have to understand microservices to be able to draw that same parallel that I've already drawn. Since these notes are written for myself, I have been fine with taking these liberties.\n\nWhat I hope to gain from this wiki is the ability to step away from any\ngiven domain for a long period of time, and be able to be passably useful for\nwhatever my goals are within a short period of time. Of course this is all\nvague sounding, and really depends on the domain along with the ends I am\ntrying to reach.\n\nTo achieve this, the system should be steadfast to:\n- be able to put information in relatively easily, without too much thought\n\trequired to its location. While location is important, Dendron makes it easy\n\tto relocate notes, if it becomes apparent that a different place makes more\n\tsense.\n- be able to extract the information that is needed, meaning there is a\n\thigh-degree in confidence in the location of the information. The idea is\n\tthat information loses a large amount of its value when it is unfindable.\n\tTherefore, a relatively strict ideology should be used when determining\n\twhere a piece of information belongs.\n\t- Some concepts might realistically belong to multiple domains. For instance, the concept of *access modifiers* can be found in both `C#` and `Typescript`. Therefore, this note should be abstracted to a common place, such as [[OOP|paradigm.oop]].\n\nThis Dendron vault is the sister component to the [General Second Brain](https://tech.kyletycholiz.com).\n\n### Tags\nThroughout the garden, I have made use of tags, which give semantic meaning to the pieces of information.\n\n- `ex.` - Denotes an *example* of the preceding piece of information\n- `spec:` - Specifies that the preceding information has some degree of *speculation* to it, and may not be 100% factual. Ideally this gets clarified over time as my understanding develops.\n- `anal:` - Denotes an *analogy* of the preceding information. Often I will attempt to link concepts to others that I have previously learned.\n- `mn:` - Denotes a *mnemonic*\n- `expl:` - Denotes an *explanation*\n\n## Resources\n### UE (Unexamined) Resources\nOften, I come across sources of information that I believe to be high-quality. They may be recommendations or found in some other way. No matter their origin, I may be in a position where I don't have the time to fully examine them (and properly extract notes), or I may not require the information at that moment in time. In cases like these, I will add reference to a section of the note called **UE Resources**. The idea is that in the future when I am ready to examine them, I have a list of resources that I can start with. This is an alternative strategy to compiling browser bookmarks, which I've found can quickly become untenable.\n\n### E (Examined) Resources\nOnce a resource has been thoroughly examined and has been mined for notes, it will be moved from *UE Resources* to *E Resources*. This is to indicate that (in my own estimation), there is nothing more to be gained from the resource that is not already in the note.\n\n### Resources\nThis heading is for inexhaustible resources. \n- A prime example would be a quality website that continually posts articles.  - Another example would be a tool, such as software that measures frequencies in a room to help acoustically treat it.\n"},"collectionChildren":null,"customHeadContent":null,"config":{"version":5,"dev":{"enablePreviewV2":true},"commands":{"lookup":{"note":{"selectionMode":"extract","confirmVaultOnCreate":false,"leaveTrace":false,"bubbleUpCreateNew":true,"fuzzThreshold":0.2,"vaultSelectionModeOnCreate":"smart"}},"insertNote":{"initialValue":"templates"},"insertNoteLink":{"aliasMode":"none","enableMultiSelect":false},"insertNoteIndex":{"enableMarker":false},"randomNote":{},"copyNoteLink":{"aliasMode":"title"},"templateHierarchy":"template"},"workspace":{"dendronVersion":"0.83.0","vaults":[{"fsPath":"../main/tech","name":"tech"}],"journal":{"dailyDomain":"daily","name":"journal","dateFormat":"y.MM.dd","addBehavior":"childOfDomain"},"scratch":{"name":"scratch","dateFormat":"y.MM.dd.HHmmss","addBehavior":"asOwnDomain"},"graph":{"zoomSpeed":1,"createStub":false},"enableAutoCreateOnDefinition":false,"enableXVaultWikiLink":false,"enableRemoteVaultInit":true,"workspaceVaultSyncMode":"noCommit","enableAutoFoldFrontmatter":true,"maxPreviewsCached":10,"maxNoteLength":204800,"task":{"name":"","dateFormat":"","addBehavior":"childOfCurrent","statusSymbols":{"":" ","wip":"w","done":"x","assigned":"a","moved":"m","blocked":"b","delegated":"l","dropped":"d","pending":"y"},"prioritySymbols":{"H":"high","M":"medium","L":"low"},"todoIntegration":false,"createTaskSelectionType":"selection2link","taskCompleteStatus":["done","x"]},"enableUserTags":true,"enableHashTags":true,"enableEditorDecorations":true,"enableFullHierarchyNoteTitle":false},"preview":{"enableFMTitle":true,"enableNoteTitleForLink":true,"enableMermaid":true,"enablePrettyRefs":true,"enableKatex":true,"automaticallyShowPreview":false,"enableFrontmatterTags":true,"enableHashesForFMTags":false},"publishing":{"enableFMTitle":true,"enableNoteTitleForLink":true,"enablePrettyRefs":true,"enableKatex":true,"copyAssets":true,"siteHierarchies":["root"],"writeStubs":false,"siteRootDir":"docs","seo":{"title":"Dendron","description":"The Tech Digital Garden of Kyle Tycholiz"},"github":{"cname":"tech.kyletycholiz.com","enableEditLink":true,"editLinkText":"Edit this page on GitHub","editBranch":"master","editViewMode":"tree"},"enableSiteLastModified":true,"enableFrontmatterTags":true,"enableHashesForFMTags":false,"enableRandomlyColoredTags":true,"enableTaskNotes":true,"enablePrettyLinks":true,"searchMode":"lookup","enableMermaid":true,"siteUrl":"https://tech.kyletycholiz.com","duplicateNoteBehavior":{"action":"useVault","payload":["tech"]},"siteFaviconPath":"favicon.ico","siteIndex":"root"}}},"__N_SSG":true}