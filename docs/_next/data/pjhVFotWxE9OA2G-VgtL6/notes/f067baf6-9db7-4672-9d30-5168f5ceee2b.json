{"pageProps":{"note":{"id":"f067baf6-9db7-4672-9d30-5168f5ceee2b","title":"Row Level Security (RLS)","vault":{"fsPath":"../main/tech","name":"tech"},"type":"note","desc":"","links":[],"anchors":{"row-level-security-rls":{"type":"header","text":"Row Level Security (RLS)","value":"row-level-security-rls","line":14,"column":0},"rls-policy-using-external-tables":{"type":"header","text":"RLS Policy using external tables","value":"rls-policy-using-external-tables","line":48,"column":0},"per-command-policies":{"type":"header","text":"Per-command Policies","value":"per-command-policies","line":68,"column":0},"update":{"type":"header","text":"UPDATE","value":"update","line":69,"column":0},"anatomy":{"type":"header","text":"Anatomy","value":"anatomy","line":80,"column":0},"with-check-vs-using":{"type":"header","text":"WITH CHECK vs USING","value":"with-check-vs-using","line":81,"column":0},"permissive-or-restrictive":{"type":"header","text":"Permissive or Restrictive","value":"permissive-or-restrictive","line":90,"column":0},"infinite-recursion":{"type":"header","text":"Infinite Recursion","value":"infinite-recursion","line":100,"column":0},"check-if-rls-enabled":{"type":"header","text":"Check if RLS enabled","value":"check-if-rls-enabled","line":105,"column":0},"ue-resources":{"type":"header","text":"UE Resources","value":"ue-resources","line":116,"column":0}},"fname":"pg.lang.RLS","updated":1623972763189,"created":1614904093207,"parent":"d274a1e8-98a8-40f9-8667-be48d7c071a4","children":[],"data":{},"contentHash":"753dc9b39651fd134dbc985536d1d276","custom":{}},"body":"<h1 id=\"row-level-security-rls\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#row-level-security-rls\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>Row Level Security (RLS)</h1>\n<p>The main hypothesis is that we should be able to prevent access to specific rows of data based on a policy. That means our application logic only has to worry about <code>SELECT * FROM my_table</code> and RLS will handle the <code>WHERE user_id = my_user_id</code> part automagically.</p>\n<ul>\n<li>To put it another way: our queries should only contain the clauses requested by our interfaces and not the filters and conditions demanded by access control in a multi-tenant data store.</li>\n<li>The current PG role that is accessing the table must have been <code>grant</code>ed permission to use it. Otherwise, RLS errors will arise when we try to alter something in the table as that role, because we won't be able to access the table from the outset.</li>\n</ul>\n<p>a function marked as <code>SECURITY DEFINER</code> will bypass RLS</p>\n<h1 id=\"row-level-security-rls-1\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#row-level-security-rls-1\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>Row Level Security (RLS)</h1>\n<ul>\n<li>While GRANT is the privilege system of Postgres, Tables can also have Row Security policies that restrict (on a per-user basis) which rows can be interacted with (INSERT, UPDATE, DELETE, SELECT)\n<ul>\n<li>Policies are created using the CREATE POLICY command</li>\n<li>spec: <code>grant</code> means \"I am giving <em>this</em> user the privilege to use <em>this</em> table\". <code>create policy</code> means \"I am specifying the requirements of any particular row that must be satisfied before it is accessed by user\"</li>\n</ul>\n</li>\n<li>The basis of row level security is to create policies that define how a user interacts with rows within a given table.</li>\n<li>By default, tables do not have any policies, and RLS must be opted-in for each table.\n<ul>\n<li>When RLS is enabled, all rows are by default not visible to any roles (superusers still have access)</li>\n</ul>\n</li>\n<li>If the value in parentheses after USING evaluates to true, then the user gets permission</li>\n<li>ex. imagine we have a chat app, and we want to ensure a user can only see messages sent by him, and messages intended for him. Also, we want to ensure that users cannot modify the <code>message_from</code> column to make it seem that the message is coming from someone else:</li>\n</ul>\n<pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">TABLE</span> chat <span class=\"token punctuation\">(</span>\n  message_uuid    UUID <span class=\"token keyword\">PRIMARY</span> <span class=\"token keyword\">KEY</span> <span class=\"token keyword\">DEFAULT</span> uuid_generate_v4<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  message_time    <span class=\"token keyword\">TIMESTAMP</span> <span class=\"token operator\">NOT</span> <span class=\"token boolean\">NULL</span> <span class=\"token keyword\">DEFAULT</span> <span class=\"token function\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  message_from    NAME      <span class=\"token operator\">NOT</span> <span class=\"token boolean\">NULL</span> <span class=\"token keyword\">DEFAULT</span> <span class=\"token keyword\">current_user</span><span class=\"token punctuation\">,</span>\n  message_to      NAME      <span class=\"token operator\">NOT</span> <span class=\"token boolean\">NULL</span><span class=\"token punctuation\">,</span>\n  message_subject <span class=\"token keyword\">VARCHAR</span><span class=\"token punctuation\">(</span><span class=\"token number\">64</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">NOT</span> <span class=\"token boolean\">NULL</span><span class=\"token punctuation\">,</span>\n  message_body    <span class=\"token keyword\">TEXT</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">CREATE</span> POLICY chat_policy <span class=\"token keyword\">ON</span> chat\n  <span class=\"token keyword\">USING</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>message_to <span class=\"token operator\">=</span> <span class=\"token keyword\">current_user</span><span class=\"token punctuation\">)</span>\n  <span class=\"token operator\">OR</span> <span class=\"token punctuation\">(</span>message_from <span class=\"token operator\">=</span> <span class=\"token keyword\">current_user</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">WITH</span> <span class=\"token keyword\">CHECK</span> <span class=\"token punctuation\">(</span>message_from <span class=\"token operator\">=</span> <span class=\"token keyword\">current_user</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<ul>\n<li>RLS can be implemented using jwt claims to verify that the user is who they say they are, if we do not want to use <code>current_user</code>:\n<ul>\n<li>the second arg true means \"return null if the setting is missing\"</li>\n</ul>\n</li>\n</ul>\n<pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token keyword\">CREATE</span> POLICY chat_policy <span class=\"token keyword\">ON</span> chat\n  <span class=\"token keyword\">USING</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>message_to <span class=\"token operator\">=</span> current_setting<span class=\"token punctuation\">(</span><span class=\"token string\">'request.jwt.claim.email'</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token operator\">OR</span> <span class=\"token punctuation\">(</span>message_from <span class=\"token operator\">=</span> current_setting<span class=\"token punctuation\">(</span><span class=\"token string\">'request.jwt.claim.email'</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">WITH</span> <span class=\"token keyword\">CHECK</span> <span class=\"token punctuation\">(</span>message_from <span class=\"token operator\">=</span> current_setting<span class=\"token punctuation\">(</span><span class=\"token string\">'request.jwt.claim.email'</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<ul>\n<li>When request contains a valid JWT with a role claim (<code>jwt.claims.role</code>), we should switch to the role with that name for the duration of the HTTP request</li>\n</ul>\n<h3 id=\"rls-policy-using-external-tables\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#rls-policy-using-external-tables\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>RLS Policy using external tables</h3>\n<ul>\n<li>What if we want to enable RLS where <code>user_id = current_user_id()</code>, but the current table does not keep a <code>user_id</code> column?</li>\n<li>If we are adding an RLS policy to T1, but the policy depends on a <code>JOIN</code>able table T2, then T2 must have <code>grant</code>ed privileges to the PG role accessing the table.</li>\n</ul>\n<pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token keyword\">create</span> policy t2_policy_update <span class=\"token keyword\">on</span> t2 <span class=\"token keyword\">for</span> <span class=\"token keyword\">update</span> <span class=\"token keyword\">using</span> <span class=\"token punctuation\">(</span>\n  <span class=\"token keyword\">exists</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token keyword\">select</span> <span class=\"token number\">1</span>\n      <span class=\"token keyword\">from</span> t1\n      <span class=\"token keyword\">inner</span> <span class=\"token keyword\">join</span> t0\n        <span class=\"token keyword\">on</span> t1<span class=\"token punctuation\">.</span>t0id <span class=\"token operator\">=</span> t0<span class=\"token punctuation\">.</span>id\n      <span class=\"token keyword\">where</span> t0<span class=\"token punctuation\">.</span>u <span class=\"token operator\">=</span> <span class=\"token keyword\">session_user</span>\n        <span class=\"token operator\">and</span> t1id <span class=\"token operator\">=</span> t1<span class=\"token punctuation\">.</span>id\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span>\n</code></pre>\n<p>Subqueries in RLS policies respect the RLS policies of the tables they reference</p>\n<p><a href=\"https://stackoverflow.com/questions/41354818/postgresql-row-level-security-involving-a-view-or-a-select-with-join\">source</a></p>\n<h2 id=\"per-command-policies\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#per-command-policies\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>Per-command Policies</h2>\n<h3 id=\"update\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#update\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>UPDATE</h3>\n<ul>\n<li>Since <code>UPDATE</code> involves pulling an existing record and replacing it with a new modified record, <code>UPDATE</code> policies accept both a <code>USING</code> expression and a <code>WITH CHECK</code> expression\n<ul>\n<li><code>USING</code> determines which records the <code>UPDATE</code> command will see to operate against</li>\n<li><code>WITH CHECK</code> defines which modified rows are allowed to be stored back into the table.\n<ul>\n<li>If the updated value fails the <code>WITH CHECK</code> expression, there will be an error.</li>\n<li>If only a <code>USING</code> clause is specified, then it will be used for both <code>USING</code> and <code>WITH CHECK</code> cases (ie. <code>WITH CHECK</code> is implemented for us implicitly)</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>Typically an <code>UPDATE</code> command needs to read data from columns in the relation being updated (e.g. in a <code>WHERE</code> clause, or <code>RETURNING</code> clause, or right side of a <code>SET</code> clause).\n<ul>\n<li>In cases such as these, <code>SELECT</code> rights are required on the relation being updated, in addition to the <code>UPDATE</code> right.</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h2 id=\"anatomy\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#anatomy\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>Anatomy</h2>\n<h3 id=\"with-check-vs-using\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#with-check-vs-using\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>WITH CHECK vs USING</h3>\n<ul>\n<li>USING is applied before any operation occurs to the table’s rows\n<ul>\n<li>ex. in the case of updating a nugget, one could not update a row that does not have the appropriate user_id in the first place</li>\n<li>must use USING with DELETE commands because a delete changes no rows, and only removes current ones.</li>\n<li>USING implicitly runs a WITH CHECK with the same clause that USING received, meaning that the verification operation runs both before and after the data is inserted.</li>\n</ul>\n</li>\n<li>WITH CHECK is run after an operation is applied, so if it fails, the operation will be rejected\n<ul>\n<li>ex. in the case of an insert, Postgres sets all of the columns as specified and then compares against WITH CHECK on the new row</li>\n<li>must use WITH CHECK with INSERT commands because there are no rows to compare against before insertion</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"permissive-or-restrictive\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#permissive-or-restrictive\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>Permissive or Restrictive</h3>\n<p>RLS policies can be either permissive or restrictive</p>\n<ul>\n<li>permissive (default) - in consideration of all RLS policies, only 1 must pass</li>\n<li>restrictive - in consideration of all RLS policies, all must</li>\n</ul>\n<pre><code>create policy select_all on table_name as permissive using (true)\n</code></pre>\n<hr>\n<h3 id=\"infinite-recursion\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#infinite-recursion\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>Infinite Recursion</h3>\n<p>Imagine we are making a RLS policy for <code>select</code> on a given table. If we then try and <code>select</code> that same table within the <code>using()</code> function, we will get an infinite recursion as a result.</p>\n<hr>\n<h3 id=\"check-if-rls-enabled\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#check-if-rls-enabled\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>Check if RLS enabled</h3>\n<pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token keyword\">select</span> relname<span class=\"token punctuation\">,</span> relrowsecurity<span class=\"token punctuation\">,</span> relforcerowsecurity\n<span class=\"token keyword\">from</span> pg_class\n<span class=\"token keyword\">where</span> oid <span class=\"token operator\">=</span> <span class=\"token string\">'your_table_name_with_schema'</span>::regclass<span class=\"token punctuation\">;</span>\n</code></pre>\n<p>or</p>\n<pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token keyword\">select</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">from</span> pg_tables <span class=\"token keyword\">where</span> tablename <span class=\"token operator\">=</span> <span class=\"token string\">'your_table_name_without_schema'</span>\n</code></pre>\n<h1 id=\"ue-resources\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#ue-resources\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>UE Resources</h1>\n<p><a href=\"https://info.crunchydata.com/blog/a-postgresql-row-level-security-primer-creating-large-policies\">Good information about RLS</a>\n<a href=\"https://medium.com/@ethanresnick/there-are-a-few-faster-ways-that-i-know-of-to-handle-the-third-case-with-rls-9d22eaa890e5\">RLS using columns from other tables</a>\n<a href=\"https://blog.crunchydata.com/blog/a-postgresql-row-level-security-primer-creating-large-policies\"></a></p>","noteIndex":{"id":"0e1ca097-be9f-4e4c-a7ed-d6dfb05cd4e8","title":"Root","vault":{"fsPath":"../main/tech","name":"tech"},"type":"note","desc":"","links":[],"anchors":{"digital-garden":{"type":"header","text":"Digital Garden","value":"digital-garden","line":8,"column":0}},"fname":"root","updated":1618676699718,"created":1615482407722,"parent":null,"children":["723b0cf7-a5f3-4c71-a811-2c782faa4cc4","mcq7ZV8MBAMVYrXg","dMS8QtNyJCwovtfh6ERrp","ZaTr28eWk1DrXOEsc1YVb","WH8jEz5lviqlnG5f","a19c5ab0-fd8c-4bd0-9aed-da5abefabc45","4586ac41-3af7-4176-aaf0-440ad1773bc9","610b951b-7363-471f-acd5-210710b9d104","f29f31f3-7235-41ad-83a1-b64f3f466916","3445f14b-9f67-412d-9762-dc14ee7c90e4","c3304982-eb1c-45ec-8556-4599d2286b5c","facc2b01-755a-409f-99f6-57bef2d1501f","b965d9fa-c200-4a8d-9323-73b9c2565812","4d5aab64-f4a4-40a0-9155-f28aaf49d38a","a95e8592-84c0-4698-a0d9-07e8e130b322","234faa4d-432f-43f4-99fb-08ac4c01bf9b","105fd41a-910d-4b94-8686-98c3933931f2","f3bcc3d9-7232-41f4-aaaf-86a99b56dc65","ANfx9Z4a6ZA0uJuSHtbIJ","4668ac41-f2d5-40c0-9144-efb456d8663b","j8xePJ5wfKsznvM5DP5q6","dc79799f-a55d-48ab-a8be-c48adb1b19c0","f6feef57-b8f5-451f-a09a-7b63f6a07183","12797f4e-92d0-447e-adc7-e5cb4ff4c883","5a9fb1df-478e-4687-9be0-5cb97e61ec57","1374e9e9-1cbc-4e1f-b1ca-66b8569533dd","f529cc34-aba0-45ca-ad7e-02ddda318941","0zcauha3il2NqtxZazIo7","9bbd6f68-03b2-41f4-92e4-2ca313e8b450","5a2ab598-fa7e-4471-8bda-9f5831b679ae","3b7ffbbf-762e-411f-8fad-5e2b1b95e384","81e5a201-c843-49d1-b291-f99d818cee0c","295ca45b-6851-4d38-9ecb-1d7e4a885849","vdjkh6890a6Ye6vvbN0CD","b3b7587a-fbd2-48a9-aef1-4efc90458e82","znCO2WghOAWC8nBGb4Ooa","7cc5d9c3-20d8-4fef-aca2-7d6dcdc7b3d7","f32fab12-3c92-4e91-8d61-01e17e734910","fqVQpS9FBiXgKsZX3R3sJ","53b47d5a-542b-4fab-8f6c-c70574ab7a48","963c4b54-02bd-4943-a15f-52cf59ffd0f4","739907b4-b36d-4ad1-866d-c9f8050de776","e65188a1-177e-4ab2-99f9-75f85d537621","fajYnbVhCRDi74xn0H30R","bArGdGwqo3iFkyKMyE7qR","ffYYlFAOinMkMeUg","5d700782-fb81-416e-83f9-5dd88260e350","w3MsVswhiuHRpAOQ","s2PhLzio3pcBg3bQ","d8118e61-b25f-4a6f-8f88-4e7ddd69827f","e1c5eaef-0205-4e6d-ab9f-5a207d58cc12","55a2161d-d415-4fbd-98cb-ff8aed19e6ee","67265fd9-7fbd-4bf7-b3c9-ced802b8a830","dvxpt2xKPsfCOTR4lY8Qp","a68b9a8c-a9c9-4133-8230-2671b2d8d86b","3bb25f58-2b50-4fa3-af55-48ea9f88a081","egctyVUjVesp2xA5t0ZYt","76420b75-f886-43ad-a876-c4fd4ad09ff2","1310c9cf-0160-4ad5-aad7-cf355c9313ac","6c54da8e-be6f-4ce3-b642-ef3108533df9","77ebb3d5-30b3-44e0-badc-02314bfd4f12","0e4f1336-2037-42e7-a854-054718e9359f","6412cc53-4648-46c1-8be6-c6d1c301baa1","c56bb2bc-4c2b-4bce-87e7-f1e655aa449a","UFrwsXzC1yr7Ge8FF8Vbo","a8edc4ac-028b-40ec-872a-e4a005b04b2a","38d933b3-770f-49df-b1ac-f2ae4f6061fd","vqPq_S-Il3EV72fUR41r6","93de42ca-53ea-460a-baa7-b9ec5c47cb1e","3bcd5b24-cdfa-45ad-b249-55ae92119ed3","aO8W81Z0PyIb6Hs7nOHPW","27f2c279-9420-4375-9487-5493c1dbbefc","Xt8o0SFdV1BIvmCKb1Ign","05537701-5721-425c-a0d5-8ec5da941220","1b6e8550-252e-4f9f-a586-05044cb97f0a","4866aa20-2068-47f0-afd1-c2b96a24f951","PXd6hUzi0wF7oPnT","f7c590dc-921d-4b6f-8f8e-e075b0c16035","f4355062-fdda-4c6f-a969-3f8a10c15475","c299d2dd-7cbd-4b81-976a-37b808ee41a8","9c56d34a-84ee-481e-ac5a-13fa56750a3c","60f0e948-b809-40de-aac1-180423cbebcd","dfab2e99-6155-482d-a598-8b8cc11f7ddc","e6ff7608-3de4-46e3-93a7-24ba07f70f42","bb4b4e79-9835-4284-bcac-d3de9b203e1a","3babc3d2-79ae-470a-9c06-ab8bba2e684e","4eeb4df6-2842-4db4-84ce-1992975f36a5","dff06309-f792-4ee2-a0ef-529972167027","d1aaf074-9c4c-4926-9106-44b71fd92529","20206ec8-0739-464e-b41d-65307a0c5aa6","3IFIK1ByzeIxZCByryGLN","0ba5c14a-800b-4614-ad5b-0ae7102e269e","db9cdb23-f02b-426c-b27e-baafb72916bd","7a81c659-7511-48c0-a78f-552d0e6cfff7","8e83deb1-8f7c-439e-b991-70e544645bfb","ubXzUle7zxv25VkjiLmpR","fb9dbfa7-978e-4f56-aeb7-3c97fb6c9e93","b6226bd4-551d-4670-a956-158bdce3f5a6","f691cb23-bc18-4b33-b454-155b1e785d62","a02e32ca-2839-46bc-a452-684f01a4e671","887233a2-8653-46ef-adce-2e482007942b","b6746509-f9f8-4823-b3b9-0d6d5f1fdb69","vlb4ItR9EQCCw9ACUA5h7","f39cc3a8-8357-49e5-8cdb-04450d05d913","1426c9b1-f3c1-4c01-8efd-a732c782c48c","dCGCWXgAmiOZXbdULT1m6","e02953c0-95d2-4101-a117-f8e0221800f0","GL8aMKtYOxcE560XF4HUK","9cc2f536-ad6d-49d2-bf6a-30284dfa1158","f9503aa6-bceb-4b11-89cd-d7e6f50d5cb0","e9bf14ec-5801-4be8-ba1e-3034dc742fa6","fee6c25b-8ea8-45bf-89d5-8c6d036b03b6","b28d278d-4fa0-4eac-9d26-dd6b10eb169d","yJwSC7hqYIezTFHf5i0Ev","5B2iI6ltu8TF5LJWAfXUE","4db45135-9630-4554-8ad4-6ca853621fca","MA3EsQQpV6iMx8j3hkJPK","84143a1b-aa79-40ff-bcae-6d9858fec127","osu6JGOnvXJ5gt3tpqWZY","1a6173cd-cf13-4b34-a522-8350bf9a364f","xRWsry32YkvSjs2Z","39SlH3nIiO6oQSwmZaMXT","TJrAQeEG6EjrEarYyIbYK","240d9848-b03d-445a-8787-090d79024b6a","5730411b-fefa-49e0-aced-451f5b148299","63a922b8-2d60-4ea7-9f47-bcfaa0caef7e","734cd78d-0bc9-426b-803d-1efc84dfffe5","3baf3651-9e5a-46bd-bba1-f0c0caf7385c","6733cf80-f2b1-41eb-8ddf-e2fa947f6b43","si3z090WsiLasMhJBa1Az","3577d6e8-1437-4f7b-9da2-c353ed232038"],"data":{},"contentHash":"7730693db0d19d3a73665766d9c0a1c5","custom":{"nav_order":0,"permalink":"/"},"body":"\n# Digital Garden\n\nThis Wiki of Personal Information is organized according to domains and their\nsub-domains, along with specific implementation of those domains.\n\nFor instance, Git itself is a domain. Sub-domains of Git, would be `commit`,\n`tags`, `reflog` etc. implementations of each of those could be `cli`, `strat`\n(strategies), `inner` etc.\n\nThe goal of the wiki is to present data in a manner that is from the perspective\nof a querying user. Here, a user is a programmer wanting to get key information\nfrom a specific domain. For instance, if a user wants to use postgres functions\nand hasn't done them in a while, they should be able to query\n`postgres.functions` to see what information is available to them.\n\nThis wiki has been written with myself in mind. While learning each of these\ndomains, I have been sensitive to the \"aha\" moments and have noted down my\ninsights as they arose. I have refrained from capturing information that I\nconsidered obvious or otherwise non-beneficial to my own understanding.\n\nThe ability I hope to gain from this wiki is the ability to step away from any\ngiven domain for a long period of time, and be able to be passably useful for\nwhatever my goals are within a short period of time. Of course, this is all\nvague sounding, and really depends on the domain, along with the ends I am\ntrying to reach.\n\nTo achieve this, the system should be steadfast to:\n- be able to put information in relatively easily, without too much thought\n\trequired to make that determination.\n- be able to extract the information that we need, meaning there is a\n\thigh-degree in confidence in the location of the information. The idea is\n\tthat information loses a large amount of its value when it is unfindable.\n\tTherefore, a relatively strict ideology should be used when determining\n\twhere a piece of information belongs.\n"},"collectionChildren":null,"customHeadContent":null,"config":{"version":3,"useFMTitle":true,"useNoteTitleForLink":true,"noLegacyNoteRef":true,"mermaid":true,"useKatex":true,"dev":{"enablePreviewV2":true},"site":{"assetsPrefix":"/Digital-Garden","siteUrl":"https://tycholiz.github.io","copyAssets":true,"siteHierarchies":["root"],"siteRootDir":"docs","usePrettyRefs":true,"title":"Dendron","description":"Publishable tech notes","duplicateNoteBehavior":{"action":"useVault","payload":["tech"]},"siteLastModified":true,"gh_edit_branch":"main","usePrettyLinks":true,"siteNotesDir":"notes","siteFaviconPath":"favicon.ico","gh_edit_link":true,"gh_edit_link_text":"Edit this page on GitHub","gh_root":"docs/","gh_edit_view_mode":"edit","writeStubs":true,"siteIndex":"root"},"commands":{"lookup":{"note":{"selectionMode":"extract","confirmVaultOnCreate":false,"leaveTrace":false}},"insertNote":{"initialValue":"templates"},"insertNoteLink":{"aliasMode":"none","enableMultiSelect":false},"insertNoteIndex":{"enableMarker":false},"randomNote":{}},"workspace":{"dendronVersion":"0.67.1","vaults":[{"fsPath":"../main/tech","name":"tech"}],"journal":{"dailyDomain":"daily","name":"journal","dateFormat":"y.MM.dd","addBehavior":"childOfDomain"},"scratch":{"name":"scratch","dateFormat":"y.MM.dd.HHmmss","addBehavior":"asOwnDomain"},"graph":{"zoomSpeed":1},"enableAutoCreateOnDefinition":false,"enableXVaultWikiLink":false,"enableRemoteVaultInit":true,"workspaceVaultSyncMode":"noCommit","enableAutoFoldFrontmatter":true,"maxPreviewsCached":10,"maxNoteLength":204800,"task":{"name":"","dateFormat":"","addBehavior":"childOfCurrent","statusSymbols":{"":" ","wip":"w","done":"x","assigned":"a","moved":"m","blocked":"b","delegated":"l","dropped":"d","pending":"y"},"prioritySymbols":{"H":"high","M":"medium","L":"low"},"todoIntegration":false,"createTaskSelectionType":"selection2link"},"enableUserTags":true,"enableHashTags":true},"usePrettyRefs":true}},"__N_SSG":true}