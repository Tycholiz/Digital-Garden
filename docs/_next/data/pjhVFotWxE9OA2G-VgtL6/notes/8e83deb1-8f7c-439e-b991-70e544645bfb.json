{"pageProps":{"note":{"id":"8e83deb1-8f7c-439e-b991-70e544645bfb","title":"Ramda","vault":{"fsPath":"../main/tech","name":"tech"},"type":"note","desc":"","links":[],"anchors":{"math-functions":{"type":"header","text":"Math functions","value":"math-functions","line":40,"column":0},"symbol-replacements":{"type":"header","text":"Symbol replacements","value":"symbol-replacements","line":43,"column":0},"function-methods":{"type":"header","text":"Function methods","value":"function-methods","line":44,"column":0},"value-methods":{"type":"header","text":"Value methods","value":"value-methods","line":54,"column":0},"inequality":{"type":"header","text":"Inequality","value":"inequality","line":63,"column":0},"debugging-ramda":{"type":"header","text":"Debugging Ramda","value":"debugging-ramda","line":71,"column":0},"data-flow":{"type":"header","text":"Data flow","value":"data-flow","line":86,"column":0},"arg-order-on--when-function-arg-passed-in-through-the-data-flow":{"type":"header","text":"Arg order on / when function arg passed in through the data flow","value":"arg-order-on--when-function-arg-passed-in-through-the-data-flow","line":93,"column":0},"":{"type":"header","text":"/","value":"","line":108,"column":0},"working-with-functions-that-you-didnt-write":{"type":"header","text":"Working with functions that you didn't write","value":"working-with-functions-that-you-didnt-write","line":116,"column":0},"-1":{"type":"header","text":"","value":"-1","line":117,"column":0},"-2":{"type":"header","text":"","value":"-2","line":133,"column":0},"-3":{"type":"header","text":"","value":"-3","line":136,"column":0},"-4":{"type":"header","text":"","value":"-4","line":143,"column":0},"-5":{"type":"header","text":"","value":"-5","line":146,"column":0},"object-manipulation":{"type":"header","text":"Object manipulation","value":"object-manipulation","line":152,"column":0},"-6":{"type":"header","text":"","value":"-6","line":153,"column":0},"-7":{"type":"header","text":"","value":"-7","line":166,"column":0},"-8":{"type":"header","text":"","value":"-8","line":169,"column":0},"-9":{"type":"header","text":"","value":"-9","line":173,"column":0},"-10":{"type":"header","text":"","value":"-10","line":176,"column":0},"-11":{"type":"header","text":"/","value":"-11","line":179,"column":0},"-12":{"type":"header","text":"","value":"-12","line":182,"column":0},"array-manipulation":{"type":"header","text":"Array manipulation","value":"array-manipulation","line":204,"column":0},"-13":{"type":"header","text":"","value":"-13","line":248,"column":0},"-14":{"type":"header","text":"","value":"-14","line":251,"column":0},"-15":{"type":"header","text":"","value":"-15","line":261,"column":0},"use-cases":{"type":"header","text":"use cases","value":"use-cases","line":262,"column":0},"aka-flatmap":{"type":"header","text":"(a.k.a. flatMap)","value":"aka-flatmap","line":286,"column":0},"-16":{"type":"header","text":"","value":"-16","line":302,"column":0},"aka":{"type":"header","text":"a.k.a.","value":"aka","line":311,"column":0},"number-manipulation":{"type":"header","text":"Number manipulation","value":"number-manipulation","line":313,"column":0},"-17":{"type":"header","text":"","value":"-17","line":322,"column":0},"fusion-with-":{"type":"header","text":"Fusion (with )","value":"fusion-with-","line":328,"column":0},"lenses":{"type":"header","text":"Lenses","value":"lenses","line":359,"column":0},"-18":{"type":"header","text":"","value":"-18","line":362,"column":0},"-19":{"type":"header","text":"","value":"-19","line":365,"column":0},"-20":{"type":"header","text":"","value":"-20","line":368,"column":0},"three-functions-for-working-with-lenses":{"type":"header","text":"Three functions for working with lenses","value":"three-functions-for-working-with-lenses","line":378,"column":0},"-21":{"type":"header","text":"","value":"-21","line":379,"column":0},"-22":{"type":"header","text":"","value":"-22","line":382,"column":0},"-23":{"type":"header","text":"","value":"-23","line":386,"column":0}},"fname":"ramda","updated":1615184414745,"created":1615184249013,"parent":"0e1ca097-be9f-4e4c-a7ed-d6dfb05cd4e8","children":["25e0eab0-64a4-48a1-ba21-f1c98fd45df9"],"data":{},"contentHash":"050b0a6170411cdba089b8f6dfe21f8c","custom":{}},"body":"<h1 id=\"ramda\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#ramda\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>Ramda</h1>\n<p>There are two main guiding principles of Ramda:</p>\n<ul>\n<li>Data comes last</li>\n<li>Everything gets curried</li>\n</ul>\n<p>These two principles lead to a style that functional programmers call <em>point-free</em> (a.k.a <em>tacit programming</em>)</p>\n<ul>\n<li>Think of point-free code as “Data? What data? There’s no data here.”</li>\n</ul>\n<p>We can make <em>point-free</em> transformations by converting functions that take in data to new functions that accept that data and after having already decided what to do with it:</p>\n<pre><code>const forever21 = age => ifElse(gte(__, 21), always(21), inc)(age)\n// becomes:\nconst forever21 = ifElse(gte(__, 21), always(21), inc)\n</code></pre>\n<p>now, the function <code>forever21</code> can be used without having to worry about data until the last minute.</p>\n<ul>\n<li>Note: there is no behavioral difference in these two versions. We’re still returning a function that takes an age, but now we’re not explicitly specifying the age parameter.</li>\n</ul>\n<p>Ramda <code>map</code> and <code>filter</code> (maybe more?) automatically convert different datatypes into functors</p>\n<ul>\n<li>This allows us to take a function that was made for an array, and apply it to an object, or even a string</li>\n</ul>\n<pre><code>// An array\ntransform(['Optimus Prime','Bumblebee','Ironhide','Sunstreaker','Ratchet'])\n//=> [ 'EMIRP SUMITPO', 'EDIHNORI', 'REKAERTSNUS', 'TEHCTAR' ]\n \n// A string\ntransform('Optimus Prime')\n// => [ 'R' ]\n \n// Even an object\ntransform({ leader: 'Optimus Prime', bodyguard: 'Ironhide', medic: 'Ratchet' })\n// => { leader: 'EMIRP SUMITPO', bodyguard: 'EDIHNORI', medic: 'TEHCTAR' \n</code></pre>\n<h2 id=\"math-functions\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#math-functions\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>Math functions</h2>\n<p>these functions take their arguments in what seems like normal order (is the first argument greater than the second?) That makes sense when used in isolation, but can be confusing when combining functions. These functions seem to violate Ramda’s “data-last” principle, so we’ll have to be careful when we use them in pipelines and similar situations. That’s when <code>R.flip</code> and the placeholder <code>R.__</code> will come in handy.</p>\n<h2 id=\"symbol-replacements\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#symbol-replacements\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>Symbol replacements</h2>\n<h3 id=\"function-methods\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#function-methods\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>Function methods</h3>\n<ul>\n<li>The following methods are best suited for functions\n<ul>\n<li>ex. <code>either(wasBornInCountry, wasNaturalized)</code></li>\n</ul>\n</li>\n</ul>\n<p><code>&#x26;&#x26;</code> -> <code>R.both</code></p>\n<p><code>||</code> -> <code>R.either</code></p>\n<p><code>!</code> -> <code>R.complement</code></p>\n<h3 id=\"value-methods\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#value-methods\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>Value methods</h3>\n<ul>\n<li>The following methods are best used with values</li>\n</ul>\n<p><code>&#x26;&#x26;</code> -> <code>R.and</code></p>\n<p><code>||</code> -> <code>R.or</code></p>\n<p><code>!</code> -> <code>R.not</code></p>\n<h3 id=\"inequality\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#inequality\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>Inequality</h3>\n<p><code>gt</code>, <code>lt</code>, <code>gte</code>, <code>lte</code>\nif we are passing data in, then we most likely want to provide a placeholder for the first arg\nex. using conditionals (<code>R.ifElse</code>), <code>R.pipe</code>/<code>R.compose</code></p>\n<pre><code>const forever21 = age => ifElse(gte(__, 21), always(21), inc)(age)\n</code></pre>\n<h2 id=\"debugging-ramda\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#debugging-ramda\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>Debugging Ramda</h2>\n<p><a href=\"https://blog.carbonfive.com/2017/12/20/easy-pipeline-debugging-with-curried-console-log/\">more info</a></p>\n<p>Ramda provides us with a function <code>R.tap</code> which we can use to create side effects without interrupting the flow of an existing composition</p>\n<ul>\n<li><code>tap</code> accepts a function, and returns a function (ex. <code>console.log</code>) that may take in the passed in arg</li>\n</ul>\n<pre><code>R.compose(\n    R.tap(x => console.log('REVERSE:',x)),\n    R.map(R.reverse),\n)\n</code></pre>\n<p>this allows us figure out what happened after <code>reverse</code> was called on the data</p>\n<p>Control flow (<code>if</code>/<code>else</code>) is less necessary in functional programming, but still occasionally useful.</p>\n<h3 id=\"data-flow\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#data-flow\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>Data flow</h3>\n<p>Remember that Ramda is flexible with how you combine functions, as long as the expected types are received</p>\n<pre><code>const alwaysDrivingAge = age => ifElse(lt(__, 16), always(16), a => a)(age)\n</code></pre>\n<p>Here, an age variable goes through the ifElse, and if fails the condition, will proceed to the third arg (else), where age is the first argument of the function</p>\n<h4 id=\"arg-order-on-pipecompose-when-function-arg-passed-in-through-the-data-flow\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#arg-order-on-pipecompose-when-function-arg-passed-in-through-the-data-flow\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>Arg order on <code>pipe</code>/<code>compose</code> when function arg passed in through the data flow</h4>\n<pre><code>const publishedInYear = year => \n    book => \n        book.year === year\nconst titlesForYear = year => \n\tR.pipe(\n\t\t//pIY returns a function that takes a book as its arg\n\t\tR.filter(publishedInYear(year)), \n\t\tR.map(book => book.title)\n\t)\n\nconsole.log(titlesForYear(1934)(books))\n</code></pre>\n<h4 id=\"rwhenrunless\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#rwhenrunless\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a><code>R.when</code>/<code>R.unless</code></h4>\n<p>similar to <code>ifElse</code>, but with only one conclusion. Implicitly, <code>R.identity</code> is the second conclusion (ie., it is <em>else</em>)</p>\n<pre><code>const alwaysDrivingAge = age => when(lt(__, 16), always(16))(age)\n</code></pre>\n<h2 id=\"working-with-functions-that-you-didnt-write\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#working-with-functions-that-you-didnt-write\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>Working with functions that you didn't write</h2>\n<h3 id=\"rapply\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#rapply\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a><code>R.apply</code></h3>\n<p>spread out a single array into individual arguments. Think of it as <code>spreadArgs()</code>\nThis is useful for creating a fixed-arity function from a variadic (variable arity) function</p>\n<pre><code>function spreadArgs(fn) {\n    return function spreadFn(argsArr){\n        return fn( ...argsArr );\n    };\n}\n</code></pre>\n<p>This is related to usingSpread syntax with functions</p>\n<pre><code>const arr = [1, 2, 3]\nconst fn = (a, b, c)\nfn(...arr) === fn(arr[0], arr[1], arr[2])\n</code></pre>\n<h3 id=\"runapply\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#runapply\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a><code>R.unapply</code></h3>\n<p>gather individual args into a single array</p>\n<h3 id=\"runary\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#runary\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a><code>R.unary</code></h3>\n<p>Can be used to cut off all arguments past the first. The benefit of this is that if we call a function and pass in too many arguments, the extra ones will just drop off.\nex. map takes a function, and the first argument of map (the iterated value) gets passed to parseInt. Then the second arg (index) gets passed to parseInt, which corresponds to its radix. Since we don't want index to be interpreted this way, we make it a unary function, and the index argument safely falls off</p>\n<pre><code>[\"1\", \"2\", \"3\"].map(R.unary(parseInt)\n</code></pre>\n<h3 id=\"rflip\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#rflip\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a><code>R.flip</code></h3>\n<p>swap the first and second argument of a function</p>\n<h3 id=\"r__\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#r__\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a><code>R.__</code></h3>\n<p>use a placeholder argument to go in place of a parameter\nWhen we pass data through some sort of chain (<code>pipe</code>, <code>compose</code>, <code>ifElse</code>), that data will be passed through the methods as the argument in the first available spot.</p>\n<ul>\n<li>ex. if a fn in <code>pipe</code> has no args provided, then the data will be the first arg. If it has one arg, then the data will be applied in the second place (and so on). If we use a placeholder <code>R.__</code> as the first arg, then the data will be applied to that space, since it is the first available argument.</li>\n<li><code>const forever21 = age => ifElse(gte(__, 21), always(21), inc)(age)</code></li>\n</ul>\n<h2 id=\"object-manipulation\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#object-manipulation\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>Object manipulation</h2>\n<h3 id=\"rassoc\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#rassoc\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a><code>R.assoc</code></h3>\n<p>update (or create) a property of an object</p>\n<pre><code>const myObj = {\n\tname: 'kyle'\n}\n\nconst newObj = R.assoc('number', '7788713377')\n\nconsole.log(newObj(myObj))\n// { name: 'kyle', number: '77887133' }\n</code></pre>\n<h3 id=\"rprop\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#rprop\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a><code>R.prop</code></h3>\n<p>read a single property from an object and return the value</p>\n<h3 id=\"rpick\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#rpick\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a><code>R.pick</code></h3>\n<p>pick multiple properties of an object and return a new object with just those properties</p>\n<ul>\n<li>complement of <code>R.omit</code></li>\n</ul>\n<h3 id=\"rhas\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#rhas\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a><code>R.has</code></h3>\n<p>return boolean indicating whether or not a property exists on the object</p>\n<h3 id=\"rpath\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#rpath\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a><code>R.path</code></h3>\n<p>dive into nested objects returning the value at the given path</p>\n<h3 id=\"rproporrpathor\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#rproporrpathor\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a><code>R.propOr</code>/<code>R.pathOr</code></h3>\n<p>search for the property on an object, allowing you to provide a default value in case the property/path cannot be found on the obj.</p>\n<h3 id=\"revolve\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#revolve\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a><code>R.evolve</code></h3>\n<p>declaratively provides transformations to happen on each property of an object:</p>\n<ul>\n<li>note: cannot add new properties with this</li>\n</ul>\n<pre><code>var tomato  = {firstName: '  Tomato ', data: {elapsed: 100, remaining: 1400}, id:123};\nvar transformations = {\n  firstName: R.trim,\n  lastName: R.trim, // Will not get invoked.\n  data: {elapsed: R.add(1), remaining: R.add(-1)}\n};\nR.evolve(transformations, tomato); //=> {firstName: 'Tomato', data: {elapsed: 101, remaining: 1399}, id:123}\n</code></pre>\n<p>also</p>\n<pre><code>//before\nconst nextAge = compose(inc, prop('age'))\nconst celebrateBirthday = person => assoc('age', nextAge(person), person)\n\n// after\nconst celebrateBirthday = evolve({ age: inc })\n</code></pre>\n<h2 id=\"array-manipulation\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#array-manipulation\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>Array manipulation</h2>\n<p><code>R.nth</code>\naccess an array at the given index\nequivalent of object's <code>R.prop</code></p>\n<p><code>R.slice</code>\nequivalent of object's <code>R.pick</code></p>\n<p><code>R.contains</code>\ncheck if array contains given value\nequivalent of object's <code>R.has</code></p>\n<p><code>R.head</code>\naccess first element of array</p>\n<p><code>R.last</code>\naccess last element of array</p>\n<p><code>R.append</code>/<code>R.prepend</code>\nFP versions of <code>.push</code> and <code>.unshift</code></p>\n<p><code>R.drop</code>/<code>R.dropLast</code>\nFP versions of <code>.shift</code> and <code>.pop</code></p>\n<p><code>R.insert</code>\ninsert an element at given index of an array</p>\n<p><code>R.update</code>\nreplace an element at the given index of an array</p>\n<p><code>R.adjust</code>\nequivalent of object's <code>R.evolve</code>, except only works for one element. We would use this function over <code>R.update</code> when using a function to update the array element</p>\n<pre><code>const numbers = [10, 20, 30, 40, 50, 60]\n \nadjust(multiply(10), 2, numbers) // [10, 20, 300, 40, 50, 60]\n</code></pre>\n<p><code>R.remove</code>\nremove element by index</p>\n<p><code>R.without</code>\nremove element by value</p>\n<h3 id=\"rreject\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#rreject\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a><code>R.reject()</code></h3>\n<p>complement of <code>R.filter()</code>. If <code>filter()</code> is <em>filter in</em>, then <code>reject()</code> is <em>filter out</em></p>\n<h3 id=\"reduce\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#reduce\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a><code>.reduce()</code></h3>\n<p>with <code>initialValue</code>\n<img src=\"/Digital-Garden/assets/images/2021-03-07-22-18-20.png\"></p>\n<p>without <code>initialValue</code>. The first value of the list will act in place of the initialValue and the combining will start with the second value in the list\n<img src=\"/Digital-Garden/assets/images/2021-03-07-22-18-41.png\"></p>\n<p>If the array passed to <code>.reduce()</code> is empty, then there must be an <code>initialValue</code> specified, otherwise there will be an error</p>\n<h3 id=\"map\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#map\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a><code>.map()</code></h3>\n<h4 id=\"use-cases\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#use-cases\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>use cases</h4>\n<ul>\n<li>transform a list of functions into their return values:</li>\n</ul>\n<pre><code>var one = () => 1;\nvar two = () => 2;\nvar three = () => 3;\n\n[one,two,three].map( fn => fn() );\n// [1,2,3]\n</code></pre>\n<ul>\n<li>transform a list of functions by composing each of them with another function, and then execute them:</li>\n</ul>\n<pre><code>var increment = v => ++v;\nvar decrement = v => --v;\nvar square = v => v * v;\n\nvar double = v => v * 2;\n\n[increment,decrement,square]\n.map( fn => compose( fn, double ) )\n.map( fn => fn( 3 ) );\n// [7,5,36]\n</code></pre>\n<h3 id=\"rchain-aka-flatmap\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#rchain-aka-flatmap\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a><code>R.chain</code> (a.k.a. flatMap)</h3>\n<p>iterate over values of a list, performing the provided function on each element, then concatenating all of the results together</p>\n<ul>\n<li>what results is if we were to perform a function of each element, then flatten that resulting array</li>\n</ul>\n<pre><code>var firstNames = [\n\t{ name: \"Jonathan\", variations: [\"John\", \"Jon\", \"Jonny\"] },\n\t{ name: \"Stephanie\", variations: [\"Steph\", \"Stephy\"] },\n\t{ name: \"Frederick\", variations: [\"Fred\", \"Freddy\"] }\n];\n\nR.chain(entry => [entry.name, ...entry.variations], firstNames)\n// [\"Jonathan\",\"John\",\"Jon\",\"Jonny\",\"Stephanie\",\"Steph\",\"Stephy\",\n//  \"Frederick\",\"Fred\",\"Freddy\"]\n</code></pre>\n<h3 id=\"rzip\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#rzip\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a><code>R.zip</code></h3>\n<p>Alternate through 2 arrays and take each value that appears at the same index and put them into their own array. The shorter of the 2 lists is considered the list length</p>\n<pre><code>const arr1 = [1, 2, 3]\nconst arr2 = ['a', 'b', 'c']\n\nR.zip(arr1, arr2)\n// [[1, a], [2, b], [3, c] ]\n</code></pre>\n<h3 id=\"rinvoker-aka-unboundmethod\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#rinvoker-aka-unboundmethod\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a><code>R.invoker()</code> a.k.a. <code>unboundMethod()</code></h3>\n<h2 id=\"number-manipulation\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#number-manipulation\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>Number manipulation</h2>\n<p><code>R.clamp</code>\nrestrict a number to be within a certain range</p>\n<pre><code>R.clamp(1, 10, -5) // => 1\nR.clamp(1, 10, 15) // => 10\nR.clamp(1, 10, 4)  // => 4\n</code></pre>\n<h3 id=\"rcomplement\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#rcomplement\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a><code>R.complement()</code></h3>\n<p> implements the same idea for functions as the ! (not) operator does for values.\nnothig good ever comes out of this\nmy daring susan\nwhy cant we jst love each other aagain???</p>\n<h2 id=\"fusion-with-map\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#fusion-with-map\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>Fusion (with <code>.map()</code>)</h2>\n<p>Imagine we have multiple functions that each take 1 argument, and each function's return can be passed directly into the next as input:</p>\n<pre><code>function truncate(word) {\n\tif (word.length > 10) {\n\t\treturn `${word.substring(0, 6)}...`\n\t}\n\treturn word\n}\n\nfunction upper(word) {\n\treturn word.toUpperCase()\n}\n\n\nfunction append1(word) {\n\treturn word + '1'\n}\n</code></pre>\n<p>Naively, we could do this:</p>\n<pre><code>const generateList = arr\n    .map(append1)\n    .map(upper)\n    .map(truncate)\n</code></pre>\n<p>when we pass a function to map, like <code>.map(fn)</code>, the element of the list gets passed as the first argument to that function. Here, when we pass <code>R.pipe</code>, the element gets passed as first argument to <code>pipe</code> (since pipe is ltr)</p>\n<pre><code>const generateList = arr.map(R.pipe(append1, upper, truncate))\n</code></pre>\n<h1 id=\"lenses\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#lenses\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>Lenses</h1>\n<p>With the following more specific ways of creating lenses, <code>R.lens()</code> is not often needed</p>\n<h4 id=\"rlensprop\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#rlensprop\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a><code>R.lensProp</code></h4>\n<p>lets us create a lens that focuses on a <em>non-nested</em> property of an object</p>\n<h4 id=\"rlenspath\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#rlenspath\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a><code>R.lensPath</code></h4>\n<p>lets us create a lens that focuses on a <em>nested</em> property of an object</p>\n<h4 id=\"rlensindex\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#rlensindex\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a><code>R.lensIndex</code></h4>\n<p>lets us create a lens that focuses on an element of an array</p>\n<ul>\n<li>these are for the times where we know in advance the index that we are interested in, but don't yet have the data (<em>ex. capitalize first letter</em>)</li>\n</ul>\n<pre><code>const toTitle = R.compose(\n\tR.join(''),\n\tR.over(R.lensIndex(0), R.toUpper)\n)\n</code></pre>\n<h3 id=\"three-functions-for-working-with-lenses\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#three-functions-for-working-with-lenses\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>Three functions for working with lenses</h3>\n<h4 id=\"rview\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#rview\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a><code>R.view()</code></h4>\n<p>read value of the lens</p>\n<h4 id=\"rset\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#rset\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a><code>R.set()</code></h4>\n<p>set the value of the lens</p>\n<ul>\n<li>note: this does not mutate the original object supplied. In other words, <code>R.view()</code> will give us the exact same result before and after #### <code>R.set()</code></li>\n</ul>\n<h4 id=\"rover\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#rover\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a><code>R.over()</code></h4>\n<p>apply a transformation function to the lens</p>\n<pre><code>over(nameLens, toUpper, person)\n// => {\n//   name: 'RANDY',\n//   socialMedia: {\n//     github: 'randycoulman',\n//     twitter: '@randycoulman'\n//   }\n// }\n</code></pre>\n<hr>\n<h2 id=\"children\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#children\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>Children</h2>\n<ol>\n<li><a href=\"/Digital-Garden/notes/25e0eab0-64a4-48a1-ba21-f1c98fd45df9\">CLI</a></li>\n</ol>","noteIndex":{"id":"0e1ca097-be9f-4e4c-a7ed-d6dfb05cd4e8","title":"Root","vault":{"fsPath":"../main/tech","name":"tech"},"type":"note","desc":"","links":[],"anchors":{"digital-garden":{"type":"header","text":"Digital Garden","value":"digital-garden","line":8,"column":0}},"fname":"root","updated":1618676699718,"created":1615482407722,"parent":null,"children":["723b0cf7-a5f3-4c71-a811-2c782faa4cc4","mcq7ZV8MBAMVYrXg","dMS8QtNyJCwovtfh6ERrp","ZaTr28eWk1DrXOEsc1YVb","WH8jEz5lviqlnG5f","a19c5ab0-fd8c-4bd0-9aed-da5abefabc45","4586ac41-3af7-4176-aaf0-440ad1773bc9","610b951b-7363-471f-acd5-210710b9d104","f29f31f3-7235-41ad-83a1-b64f3f466916","3445f14b-9f67-412d-9762-dc14ee7c90e4","c3304982-eb1c-45ec-8556-4599d2286b5c","facc2b01-755a-409f-99f6-57bef2d1501f","b965d9fa-c200-4a8d-9323-73b9c2565812","4d5aab64-f4a4-40a0-9155-f28aaf49d38a","a95e8592-84c0-4698-a0d9-07e8e130b322","234faa4d-432f-43f4-99fb-08ac4c01bf9b","105fd41a-910d-4b94-8686-98c3933931f2","f3bcc3d9-7232-41f4-aaaf-86a99b56dc65","ANfx9Z4a6ZA0uJuSHtbIJ","4668ac41-f2d5-40c0-9144-efb456d8663b","j8xePJ5wfKsznvM5DP5q6","dc79799f-a55d-48ab-a8be-c48adb1b19c0","f6feef57-b8f5-451f-a09a-7b63f6a07183","12797f4e-92d0-447e-adc7-e5cb4ff4c883","5a9fb1df-478e-4687-9be0-5cb97e61ec57","1374e9e9-1cbc-4e1f-b1ca-66b8569533dd","f529cc34-aba0-45ca-ad7e-02ddda318941","0zcauha3il2NqtxZazIo7","9bbd6f68-03b2-41f4-92e4-2ca313e8b450","5a2ab598-fa7e-4471-8bda-9f5831b679ae","3b7ffbbf-762e-411f-8fad-5e2b1b95e384","81e5a201-c843-49d1-b291-f99d818cee0c","295ca45b-6851-4d38-9ecb-1d7e4a885849","vdjkh6890a6Ye6vvbN0CD","b3b7587a-fbd2-48a9-aef1-4efc90458e82","znCO2WghOAWC8nBGb4Ooa","7cc5d9c3-20d8-4fef-aca2-7d6dcdc7b3d7","f32fab12-3c92-4e91-8d61-01e17e734910","fqVQpS9FBiXgKsZX3R3sJ","53b47d5a-542b-4fab-8f6c-c70574ab7a48","963c4b54-02bd-4943-a15f-52cf59ffd0f4","739907b4-b36d-4ad1-866d-c9f8050de776","e65188a1-177e-4ab2-99f9-75f85d537621","fajYnbVhCRDi74xn0H30R","bArGdGwqo3iFkyKMyE7qR","ffYYlFAOinMkMeUg","5d700782-fb81-416e-83f9-5dd88260e350","w3MsVswhiuHRpAOQ","s2PhLzio3pcBg3bQ","d8118e61-b25f-4a6f-8f88-4e7ddd69827f","e1c5eaef-0205-4e6d-ab9f-5a207d58cc12","55a2161d-d415-4fbd-98cb-ff8aed19e6ee","67265fd9-7fbd-4bf7-b3c9-ced802b8a830","dvxpt2xKPsfCOTR4lY8Qp","a68b9a8c-a9c9-4133-8230-2671b2d8d86b","3bb25f58-2b50-4fa3-af55-48ea9f88a081","egctyVUjVesp2xA5t0ZYt","76420b75-f886-43ad-a876-c4fd4ad09ff2","1310c9cf-0160-4ad5-aad7-cf355c9313ac","6c54da8e-be6f-4ce3-b642-ef3108533df9","77ebb3d5-30b3-44e0-badc-02314bfd4f12","0e4f1336-2037-42e7-a854-054718e9359f","6412cc53-4648-46c1-8be6-c6d1c301baa1","c56bb2bc-4c2b-4bce-87e7-f1e655aa449a","UFrwsXzC1yr7Ge8FF8Vbo","a8edc4ac-028b-40ec-872a-e4a005b04b2a","38d933b3-770f-49df-b1ac-f2ae4f6061fd","vqPq_S-Il3EV72fUR41r6","93de42ca-53ea-460a-baa7-b9ec5c47cb1e","3bcd5b24-cdfa-45ad-b249-55ae92119ed3","aO8W81Z0PyIb6Hs7nOHPW","27f2c279-9420-4375-9487-5493c1dbbefc","Xt8o0SFdV1BIvmCKb1Ign","05537701-5721-425c-a0d5-8ec5da941220","1b6e8550-252e-4f9f-a586-05044cb97f0a","4866aa20-2068-47f0-afd1-c2b96a24f951","PXd6hUzi0wF7oPnT","f7c590dc-921d-4b6f-8f8e-e075b0c16035","f4355062-fdda-4c6f-a969-3f8a10c15475","c299d2dd-7cbd-4b81-976a-37b808ee41a8","9c56d34a-84ee-481e-ac5a-13fa56750a3c","60f0e948-b809-40de-aac1-180423cbebcd","dfab2e99-6155-482d-a598-8b8cc11f7ddc","e6ff7608-3de4-46e3-93a7-24ba07f70f42","bb4b4e79-9835-4284-bcac-d3de9b203e1a","3babc3d2-79ae-470a-9c06-ab8bba2e684e","4eeb4df6-2842-4db4-84ce-1992975f36a5","dff06309-f792-4ee2-a0ef-529972167027","d1aaf074-9c4c-4926-9106-44b71fd92529","20206ec8-0739-464e-b41d-65307a0c5aa6","3IFIK1ByzeIxZCByryGLN","0ba5c14a-800b-4614-ad5b-0ae7102e269e","db9cdb23-f02b-426c-b27e-baafb72916bd","7a81c659-7511-48c0-a78f-552d0e6cfff7","8e83deb1-8f7c-439e-b991-70e544645bfb","ubXzUle7zxv25VkjiLmpR","fb9dbfa7-978e-4f56-aeb7-3c97fb6c9e93","b6226bd4-551d-4670-a956-158bdce3f5a6","f691cb23-bc18-4b33-b454-155b1e785d62","a02e32ca-2839-46bc-a452-684f01a4e671","887233a2-8653-46ef-adce-2e482007942b","b6746509-f9f8-4823-b3b9-0d6d5f1fdb69","vlb4ItR9EQCCw9ACUA5h7","f39cc3a8-8357-49e5-8cdb-04450d05d913","1426c9b1-f3c1-4c01-8efd-a732c782c48c","dCGCWXgAmiOZXbdULT1m6","e02953c0-95d2-4101-a117-f8e0221800f0","GL8aMKtYOxcE560XF4HUK","9cc2f536-ad6d-49d2-bf6a-30284dfa1158","f9503aa6-bceb-4b11-89cd-d7e6f50d5cb0","e9bf14ec-5801-4be8-ba1e-3034dc742fa6","fee6c25b-8ea8-45bf-89d5-8c6d036b03b6","b28d278d-4fa0-4eac-9d26-dd6b10eb169d","yJwSC7hqYIezTFHf5i0Ev","5B2iI6ltu8TF5LJWAfXUE","4db45135-9630-4554-8ad4-6ca853621fca","MA3EsQQpV6iMx8j3hkJPK","84143a1b-aa79-40ff-bcae-6d9858fec127","osu6JGOnvXJ5gt3tpqWZY","1a6173cd-cf13-4b34-a522-8350bf9a364f","xRWsry32YkvSjs2Z","39SlH3nIiO6oQSwmZaMXT","TJrAQeEG6EjrEarYyIbYK","240d9848-b03d-445a-8787-090d79024b6a","5730411b-fefa-49e0-aced-451f5b148299","63a922b8-2d60-4ea7-9f47-bcfaa0caef7e","734cd78d-0bc9-426b-803d-1efc84dfffe5","3baf3651-9e5a-46bd-bba1-f0c0caf7385c","6733cf80-f2b1-41eb-8ddf-e2fa947f6b43","si3z090WsiLasMhJBa1Az","3577d6e8-1437-4f7b-9da2-c353ed232038"],"data":{},"contentHash":"7730693db0d19d3a73665766d9c0a1c5","custom":{"nav_order":0,"permalink":"/"},"body":"\n# Digital Garden\n\nThis Wiki of Personal Information is organized according to domains and their\nsub-domains, along with specific implementation of those domains.\n\nFor instance, Git itself is a domain. Sub-domains of Git, would be `commit`,\n`tags`, `reflog` etc. implementations of each of those could be `cli`, `strat`\n(strategies), `inner` etc.\n\nThe goal of the wiki is to present data in a manner that is from the perspective\nof a querying user. Here, a user is a programmer wanting to get key information\nfrom a specific domain. For instance, if a user wants to use postgres functions\nand hasn't done them in a while, they should be able to query\n`postgres.functions` to see what information is available to them.\n\nThis wiki has been written with myself in mind. While learning each of these\ndomains, I have been sensitive to the \"aha\" moments and have noted down my\ninsights as they arose. I have refrained from capturing information that I\nconsidered obvious or otherwise non-beneficial to my own understanding.\n\nThe ability I hope to gain from this wiki is the ability to step away from any\ngiven domain for a long period of time, and be able to be passably useful for\nwhatever my goals are within a short period of time. Of course, this is all\nvague sounding, and really depends on the domain, along with the ends I am\ntrying to reach.\n\nTo achieve this, the system should be steadfast to:\n- be able to put information in relatively easily, without too much thought\n\trequired to make that determination.\n- be able to extract the information that we need, meaning there is a\n\thigh-degree in confidence in the location of the information. The idea is\n\tthat information loses a large amount of its value when it is unfindable.\n\tTherefore, a relatively strict ideology should be used when determining\n\twhere a piece of information belongs.\n"},"collectionChildren":null,"customHeadContent":null,"config":{"version":3,"useFMTitle":true,"useNoteTitleForLink":true,"noLegacyNoteRef":true,"mermaid":true,"useKatex":true,"dev":{"enablePreviewV2":true},"site":{"assetsPrefix":"/Digital-Garden","siteUrl":"https://tycholiz.github.io","copyAssets":true,"siteHierarchies":["root"],"siteRootDir":"docs","usePrettyRefs":true,"title":"Dendron","description":"Publishable tech notes","duplicateNoteBehavior":{"action":"useVault","payload":["tech"]},"siteLastModified":true,"gh_edit_branch":"main","usePrettyLinks":true,"siteNotesDir":"notes","siteFaviconPath":"favicon.ico","gh_edit_link":true,"gh_edit_link_text":"Edit this page on GitHub","gh_root":"docs/","gh_edit_view_mode":"edit","writeStubs":true,"siteIndex":"root"},"commands":{"lookup":{"note":{"selectionMode":"extract","confirmVaultOnCreate":false,"leaveTrace":false}},"insertNote":{"initialValue":"templates"},"insertNoteLink":{"aliasMode":"none","enableMultiSelect":false},"insertNoteIndex":{"enableMarker":false},"randomNote":{}},"workspace":{"dendronVersion":"0.67.1","vaults":[{"fsPath":"../main/tech","name":"tech"}],"journal":{"dailyDomain":"daily","name":"journal","dateFormat":"y.MM.dd","addBehavior":"childOfDomain"},"scratch":{"name":"scratch","dateFormat":"y.MM.dd.HHmmss","addBehavior":"asOwnDomain"},"graph":{"zoomSpeed":1},"enableAutoCreateOnDefinition":false,"enableXVaultWikiLink":false,"enableRemoteVaultInit":true,"workspaceVaultSyncMode":"noCommit","enableAutoFoldFrontmatter":true,"maxPreviewsCached":10,"maxNoteLength":204800,"task":{"name":"","dateFormat":"","addBehavior":"childOfCurrent","statusSymbols":{"":" ","wip":"w","done":"x","assigned":"a","moved":"m","blocked":"b","delegated":"l","dropped":"d","pending":"y"},"prioritySymbols":{"H":"high","M":"medium","L":"low"},"todoIntegration":false,"createTaskSelectionType":"selection2link"},"enableUserTags":true,"enableHashTags":true},"usePrettyRefs":true}},"__N_SSG":true}