{"pageProps":{"note":{"id":"b965d9fa-c200-4a8d-9323-73b9c2565812","title":"Aws","vault":{"fsPath":"../main/tech","name":"tech"},"type":"note","desc":"","links":[{"type":"wiki","from":{"fname":"aws","id":"b965d9fa-c200-4a8d-9323-73b9c2565812","vaultName":"tech"},"value":"deploy.distributed","alias":"distributed","position":{"start":{"line":131,"column":109,"offset":6561},"end":{"line":131,"column":143,"offset":6595},"indent":[]},"xvault":false,"sameFile":false,"to":{"fname":"deploy.distributed"}},{"from":{"fname":"nosql","vaultName":"tech"},"type":"backlink","position":{"start":{"line":54,"column":1,"offset":3795},"end":{"line":54,"column":20,"offset":3814},"indent":[]},"value":"aws"}],"anchors":{"lambda":{"type":"header","text":"Lambda","value":"lambda","line":8,"column":0},"when-to-use":{"type":"header","text":"When to use","value":"when-to-use","line":18,"column":0},"limitations":{"type":"header","text":"Limitations","value":"limitations","line":25,"column":0},"ec2-elastic-compute-cloud":{"type":"header","text":"EC2 (Elastic Compute Cloud)","value":"ec2-elastic-compute-cloud","line":29,"column":0},"security":{"type":"header","text":"Security","value":"security","line":49,"column":0},"scaling":{"type":"header","text":"Scaling","value":"scaling","line":56,"column":0},"how-many-ec2-instances-to-run":{"type":"header","text":"How many EC2 instances to run?","value":"how-many-ec2-instances-to-run","line":64,"column":0},"elb-elastic-load-balancing":{"type":"header","text":"ELB (Elastic Load Balancing)","value":"elb-elastic-load-balancing","line":70,"column":0},"s3-simple-storage-service":{"type":"header","text":"S3 (Simple Storage Service)","value":"s3-simple-storage-service","line":80,"column":0},"limitations-1":{"type":"header","text":"Limitations","value":"limitations-1","line":95,"column":0},"fargate":{"type":"header","text":"Fargate","value":"fargate","line":105,"column":0},"rds-relational-database-service":{"type":"header","text":"RDS (Relational Database Service)","value":"rds-relational-database-service","line":114,"column":0},"amplify":{"type":"header","text":"Amplify","value":"amplify","line":120,"column":0},"elastic-beanstalk":{"type":"header","text":"Elastic Beanstalk","value":"elastic-beanstalk","line":126,"column":0},"process":{"type":"header","text":"Process","value":"process","line":143,"column":0},"dynamodb":{"type":"header","text":"DynamoDB","value":"dynamodb","line":147,"column":0},"cloudformation":{"type":"header","text":"CloudFormation","value":"cloudformation","line":174,"column":0},"overview":{"type":"header","text":"Overview","value":"overview","line":181,"column":0},"sqs-simple-queue-service":{"type":"header","text":"SQS (Simple Queue Service)","value":"sqs-simple-queue-service","line":186,"column":0},"kinesis":{"type":"header","text":"Kinesis","value":"kinesis","line":199,"column":0},"cloudfront":{"type":"header","text":"CloudFront","value":"cloudfront","line":212,"column":0}},"fname":"aws","updated":1635313424891,"created":1615267490426,"parent":"0e1ca097-be9f-4e4c-a7ed-d6dfb05cd4e8","children":["9de1b0f8-ba4e-428c-8b35-f05c5788214b"],"data":{},"contentHash":"3437fcd544480f9521e4e7b3eac84f4b","custom":{}},"body":"<h1 id=\"aws\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#aws\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>Aws</h1>\n<h1 id=\"lambda\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#lambda\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>Lambda</h1>\n<p>like an anonymous function (or a callback) that runs code in response to events.</p>\n<ul>\n<li>Think of them like event handlers, but for web services, not components within a webpage</li>\n</ul>\n<p>Effectively, everything is abstracted away aside from a function interface.</p>\n<p>If EC2 is a complete computer in the cloud, Lambda is a code runner in the cloud.</p>\n<ul>\n<li>With EC2 you get an OS, a file system, access to the server’s hardware, etc. </li>\n<li>With Lambda, you just upload some code and Amazon runs it for you.</li>\n</ul>\n<h3 id=\"when-to-use\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#when-to-use\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>When to use</h3>\n<p>Lambda is most suitable for small snippets of code that rarely change.</p>\n<ul>\n<li>think of Lambda functions as part of the infrastructure rather than part of the application</li>\n</ul>\n<p>Lambda can be used as a plugin system for other AWS services, for example:</p>\n<ul>\n<li>S3 doesn’t come with an API to resize an image after uploading it to a bucket, but with Lambda, you can add that capability to S3.</li>\n</ul>\n<h3 id=\"limitations\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#limitations\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>Limitations</h3>\n<ul>\n<li>Your functions will suffer a cold start when a function is invoked after a period of inactivity</li>\n<li>limit of 250 MB for your code bundle, including all your dependencies</li>\n</ul>\n<h1 id=\"ec2-elastic-compute-cloud\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#ec2-elastic-compute-cloud\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>EC2 (Elastic Compute Cloud)</h1>\n<p>An instance of EC2 is a VM on an AWS server\nThe nice thing about EC2 is that the computer you get will be very similar to the computer you use to develop your software. If you can run your software on your computer, you can almost certainly run it on EC2 without any changes.</p>\n<ul>\n<li>This is one of EC2’s main advantages compared to other types of compute platforms (such as Lambda): you don’t have to adapt your application to your host.</li>\n</ul>\n<p>Elastic refers to the fact that it can scale up/down as needed automatically</p>\n<p>EC2 has dozens of options you will probably never need, and thus it comes with sensible defaults.</p>\n<ul>\n<li>This is the result of the highly varied workloads and use cases serviced by EC2</li>\n</ul>\n<p>Selecting an instance type will be the most consequential decision when provisioning an EC2 instance.</p>\n<ul>\n<li>There are 256+, and can be narrowed to a few categories, defined by what they're optimized for:\n<ul>\n<li>CPU</li>\n<li>Memory</li>\n<li>Network</li>\n<li>Storage</li>\n</ul>\n</li>\n</ul>\n<p>If you were building your own server, there would be an infinite number of ways to configure it, but with EC2 you get to pick an instance type from its catalog.</p>\n<ul>\n<li>This is the tradeoff you make as opposed to getting you build your own server, but most likely it shouldn't even be a concern.</li>\n</ul>\n<h3 id=\"security\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#security\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>Security</h3>\n<p>the defaults are sensible, but we may have to modify:</p>\n<ul>\n<li>The security group\n<ul>\n<li>You can think of security groups as individual firewalls for your instances. With security groups, you can control what goes in and out of your instances.</li>\n</ul>\n</li>\n<li>The VPC ACL.\n<ul>\n<li>You can think of VPC ACL as a network firewall. With the VPC ACL, you can control what goes in and out of your network.</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"scaling\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#scaling\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>Scaling</h3>\n<p>The auto part of Auto Scaling allows us to automatically add/remove EC2 instances (therefore horizontal scaling). In theory it works, but is often impractical.\nThe main premise of Auto Scaling is that once you decide how much headroom you want, you’ll be able to make that headroom a constant size</p>\n<p>Unless the following 2 are true, then it's probably not worth messing around with auto-scaling:</p>\n<ul>\n<li>Are your EC2 costs high enough that any reduction in usage will be materially significant?</li>\n<li>If your EC2 bill were to go down by 30%—would that be a big deal for your business?</li>\n</ul>\n<h4 id=\"how-many-ec2-instances-to-run\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#how-many-ec2-instances-to-run\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>How many EC2 instances to run?</h4>\n<p>Capacity Headroom - we need to have a buffer between the expected peak demand and the maximum capacity that our system can handle.</p>\n<p>Pricing</p>\n<ul>\n<li>only pay for the number of seconds your instance is running.</li>\n</ul>\n<h1 id=\"elb-elastic-load-balancing\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#elb-elastic-load-balancing\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>ELB (Elastic Load Balancing)</h1>\n<p>Comes in 3 variants:</p>\n<ul>\n<li>Classic \n<ul>\n<li>Legacy software.</li>\n</ul>\n</li>\n<li>Application (ALB)\n<ul>\n<li>a proper reverse proxy that sits between the internet and your application</li>\n<li>Every request to your application gets handled by the load balancer first. The load balancer then makes another request to your application and finally forwards the response from your application to the caller.</li>\n</ul>\n</li>\n<li>Network (NLB)\n<ul>\n<li>behave like load balancers, but they work by routing network packets rather than by proxying HTTP requests</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"s3-simple-storage-service\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#s3-simple-storage-service\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>S3 (Simple Storage Service)</h1>\n<p>Fundamentally, you can think of S3 as a highly-durable hash table in the cloud. </p>\n<ul>\n<li>The key can be any string, and </li>\n<li>the value any blob/object of data up to 5 TB.</li>\n</ul>\n<p>Object storage is used for purposes such as storing photos on Facebook, songs on Spotify, or files in online collaboration services, such as Dropbox.</p>\n<p>Data gets streamed at a rate of around 90 MB/s.</p>\n<p>You can have as many parallel uploads and downloads as you want, thus, the infinite bandwidth.</p>\n<p>S3 offers built-in redundancy.</p>\n<p>At first you can start with the default storage class and ignore all the other classes. Don't bother with the implications of the different storage classes until you really need to start saving money from S3 storage costs.</p>\n<h3 id=\"limitations-1\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#limitations-1\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>Limitations</h3>\n<ul>\n<li>\n<p>cannot append to objects.</p>\n</li>\n<li>\n<p>It doesn’t support HTTPS when used as a static website host, so you cannot host static websites</p>\n</li>\n<li>\n<p>Alternatives: Azure Blob</p>\n</li>\n</ul>\n<p>Pricing\n$23.55/TB/month\n$5/million uploads and $0.40/million downloads</p>\n<h1 id=\"fargate\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#fargate\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>Fargate</h1>\n<ul>\n<li>serverless compute engine for containers</li>\n<li>adds about 20% in price, but removes a lot of the admin overhead</li>\n<li>removes the need to provision and manage servers\n<ul>\n<li>don't have to worry about scaling, patching, securing, and managing servers</li>\n</ul>\n</li>\n<li>Fargate automates how much computing power you need and will scale up/down automatically</li>\n<li>with Fargate, you only interact with your containers\n<img src=\"/Digital-Garden/assets/images/2021-03-08-21-25-27.png\"></li>\n</ul>\n<h1 id=\"rds-relational-database-service\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#rds-relational-database-service\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>RDS (Relational Database Service)</h1>\n<ul>\n<li>databases shouldn't be run in a container</li>\n<li>by default will spin up a single instance in a single availability zone\n<ul>\n<li>if we want more redundancy, we can add an active backup instance</li>\n</ul>\n</li>\n<li>doesn't support downloading postgres extensions</li>\n</ul>\n<h1 id=\"amplify\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#amplify\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>Amplify</h1>\n<ul>\n<li>toolbox for front-end/mobile development, with some overlap with Firebase\n<ul>\n<li>ex. tools for creating onboarding flow, tools for implementing AI/ML features, tools for auth </li>\n</ul>\n</li>\n<li>also includes tools to help implement cloud-based features in the app</li>\n<li>includes tools to make real-time apps (ex. news feed, chat)</li>\n</ul>\n<h1 id=\"elastic-beanstalk\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#elastic-beanstalk\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>Elastic Beanstalk</h1>\n<p>Purpose is to deploy + scale web apps/services built with common web languages (Javascript, PHP etc) onto webservers like Nginx/Apache</p>\n<ul>\n<li>Elastic beanstalk hosts all the services needed for deployment/scaling</li>\n</ul>\n<p>Handles things like:</p>\n<ul>\n<li>Provisioning services</li>\n<li>loadbalancing</li>\n<li>scaling infra</li>\n<li>updating platform with latest patches</li>\n<li>app health monitoring</li>\n</ul>\n<p>Also allows us to reimplement portions of the code as containerized services, allowing us to achieve a more <a href=\"/Digital-Garden/notes/0ZcWOP1WGOQ0aJ06\">distributed</a> architectural design</p>\n<p>Allows to retain control over the resources powering your application, so you can decide on how much you want to manage.</p>\n<p>Alternatives: Azure App Service, Google Cloud App Engine</p>\n<h3 id=\"process\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#process\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>Process</h3>\n<ol>\n<li>upload source code bundle to Elastic Beanstalk console</li>\n<li>Elastic Beanstalk return a new URL for the webapp</li>\n</ol>\n<h1 id=\"dynamodb\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#dynamodb\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>DynamoDB</h1>\n<p>Data is stored as a partitioned B-Tree.\nUnlike Redis, in that it is immediately consistent and highly-durable, centered around that single data structure.</p>\n<ul>\n<li>If you put something into DynamoDB, you’ll be able to read it back immediately and, for all practical purposes, you can assume that what you have put will never get lost.</li>\n</ul>\n<p>DynamoDB data is schemaless. The DB engine can manage structured or semi-structured data, including JSON documents.\nFully managed.\nsupports key–value and document data structures\nThe general rule of thumb is to choose Dynamo for low throughput apps as writes are expensive and consistent reads are twice the cost of eventually consistent reads\nHigh vendor lock-in.\nprovides seamless integration with services such as Redshift (large scale data analysis), Cognito (identity pools), Elastic Map Reduce (EMR), Data Pipeline, Kinesis, and S3. Also, has tight integration with AWS lambda via Streams and aligns with the server-less philosophy; automatic scaling according to your application load, pay-per-what-you-use pricing, easy to get started with, and no servers to manage. </p>\n<p>When to use DynamoDB?</p>\n<ul>\n<li>In case you are looking for a database that can handle simple key-value queries but those queries are very large in number</li>\n<li>In case you are working with OLTP workload like online ticket booking or banking where the data needs to be highly consistent</li>\n</ul>\n<p>When not to use DynamoDB?</p>\n<ul>\n<li>In cases where you have to do computations on the data. \n<ul>\n<li>Relational databases run their queries close to the data, so if you’re trying to calculate the sum total value of orders per customer, then that rollup gets done while reading the data, and only the final summary (one row per customer) gets sent over the network. However, if you were to do this with DynamoDB, you’d have to get all the customer orders (one row per order), which involves a lot more data over the network, and then you have to do the rollup in your application, which is far away from the data.</li>\n</ul>\n</li>\n</ul>\n<p>Pricing\n$256/TB/month</p>\n<p>By default, you should start with DynamoDB’s on-demand pricing and only consider the provisioned capacity as cost optimization. On-demand costs $1.25 per million writes, and $0.25 per million reads.</p>\n<ul>\n<li>Then, if your usage grows significantly, you will almost always want to consider moving to provisioned capacity (significant cost savings).</li>\n<li>if you believe that on-demand pricing is too expensive, then DynamoDB will very likely be too expensive, even with provisioned capacity. In that case, you might want to consider a relational database.</li>\n</ul>\n<h1 id=\"cloudformation\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#cloudformation\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>CloudFormation</h1>\n<p>When working in AWS, you almost always want to use some CloudFormation (or a similar tool).\nlets you create and update the things you have in AWS without having to click around on the console or write fragile scripts.</p>\n<ul>\n<li>for instance, gives us the ability to tear down everything cleanly and recreate your AWS set up in one click</li>\n</ul>\n<p>rule of thumb is to let CloudFormation deal with all the AWS things that are either static or change very rarely, like load balancers, deployment pipelines, VPC configs, security groups</p>\n<h3 id=\"overview\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#overview\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>Overview</h3>\n<ul>\n<li>define your AWS resources as a YAML script</li>\n<li>point CloudFormation to your AWS account, and it creates all the resources you defined idempotently.</li>\n<li>Updates can be rolled back.</li>\n</ul>\n<h1 id=\"sqs-simple-queue-service\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#sqs-simple-queue-service\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>SQS (Simple Queue Service)</h1>\n<p>highly-durable queue in the cloud</p>\n<ul>\n<li>put messages on one end, and a consumer takes them out from the other side.\nMessages are consumed <em>almost</em> in FIFO, but there is no strictness to adhere to this.</li>\n<li>Strictness <em>can</em> be guaranteed, but there is a performance cost.</li>\n</ul>\n<p>SQS requires zero capacity management.</p>\n<ul>\n<li>no limit on the rate of messages enqueued or consumed</li>\n<li>don’t have to worry about any throttling limits.</li>\n<li>number of messages stored in SQS (the backlog size) is also unlimited.</li>\n</ul>\n<p>great default choice for dispatching asynchronous work.</p>\n<h1 id=\"kinesis\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#kinesis\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>Kinesis</h1>\n<p>A highly-durable linked list in the cloud</p>\n<p>Use-cases are similar to SQS—you would typically use either Kinesis or SQS when you want to enqueue records for asynchronous processing.</p>\n<p>Difference with SQS:</p>\n<ul>\n<li>SQS can only have one consumer, while Kinesis can have many.</li>\n<li>Once an SQS message gets consumed, it gets deleted from the queue. But Kinesis records get added to a list in a stable order, and any number of consumers can read a copy of the stream by keeping a cursor over this never-ending list.</li>\n<li>Multiple consumers don’t affect each other, and if one falls behind, it doesn’t slow down the other consumers.</li>\n<li>Whenever consumers read data out of Kinesis, they will always get their records in the same order.</li>\n<li>Often cheaper than SQS</li>\n<li>Kinesis can carry a significant operational burden with the need to provision capacity (shards).</li>\n</ul>\n<h1 id=\"cloudfront\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#cloudfront\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>CloudFront</h1>\n<p>CloudFront is a CDN in AWS which operates at Edge Locations around the world closer to the users. It can cache the static assets and deliver them to the end-users quite fast.</p>\n<p>Lambda Edge functions run here</p>\n<hr>\n<h2 id=\"backlinks\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#backlinks\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>Backlinks</h2>\n<ul>\n<li><a href=\"/Digital-Garden/notes/dfab2e99-6155-482d-a598-8b8cc11f7ddc\">Nosql</a></li>\n</ul>\n<hr>\n<h2 id=\"children\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#children\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>Children</h2>\n<ol>\n<li><a href=\"/Digital-Garden/notes/9de1b0f8-ba4e-428c-8b35-f05c5788214b\">Ecs</a></li>\n</ol>","noteIndex":{"id":"0e1ca097-be9f-4e4c-a7ed-d6dfb05cd4e8","title":"Root","vault":{"fsPath":"../main/tech","name":"tech"},"type":"note","desc":"","links":[],"anchors":{"digital-garden":{"type":"header","text":"Digital Garden","value":"digital-garden","line":8,"column":0}},"fname":"root","updated":1618676699718,"created":1615482407722,"parent":null,"children":["723b0cf7-a5f3-4c71-a811-2c782faa4cc4","mcq7ZV8MBAMVYrXg","dMS8QtNyJCwovtfh6ERrp","ZaTr28eWk1DrXOEsc1YVb","WH8jEz5lviqlnG5f","a19c5ab0-fd8c-4bd0-9aed-da5abefabc45","4586ac41-3af7-4176-aaf0-440ad1773bc9","610b951b-7363-471f-acd5-210710b9d104","f29f31f3-7235-41ad-83a1-b64f3f466916","3445f14b-9f67-412d-9762-dc14ee7c90e4","c3304982-eb1c-45ec-8556-4599d2286b5c","facc2b01-755a-409f-99f6-57bef2d1501f","b965d9fa-c200-4a8d-9323-73b9c2565812","4d5aab64-f4a4-40a0-9155-f28aaf49d38a","a95e8592-84c0-4698-a0d9-07e8e130b322","234faa4d-432f-43f4-99fb-08ac4c01bf9b","105fd41a-910d-4b94-8686-98c3933931f2","f3bcc3d9-7232-41f4-aaaf-86a99b56dc65","ANfx9Z4a6ZA0uJuSHtbIJ","4668ac41-f2d5-40c0-9144-efb456d8663b","j8xePJ5wfKsznvM5DP5q6","dc79799f-a55d-48ab-a8be-c48adb1b19c0","f6feef57-b8f5-451f-a09a-7b63f6a07183","12797f4e-92d0-447e-adc7-e5cb4ff4c883","5a9fb1df-478e-4687-9be0-5cb97e61ec57","1374e9e9-1cbc-4e1f-b1ca-66b8569533dd","f529cc34-aba0-45ca-ad7e-02ddda318941","0zcauha3il2NqtxZazIo7","9bbd6f68-03b2-41f4-92e4-2ca313e8b450","5a2ab598-fa7e-4471-8bda-9f5831b679ae","3b7ffbbf-762e-411f-8fad-5e2b1b95e384","81e5a201-c843-49d1-b291-f99d818cee0c","295ca45b-6851-4d38-9ecb-1d7e4a885849","vdjkh6890a6Ye6vvbN0CD","b3b7587a-fbd2-48a9-aef1-4efc90458e82","znCO2WghOAWC8nBGb4Ooa","7cc5d9c3-20d8-4fef-aca2-7d6dcdc7b3d7","f32fab12-3c92-4e91-8d61-01e17e734910","fqVQpS9FBiXgKsZX3R3sJ","53b47d5a-542b-4fab-8f6c-c70574ab7a48","963c4b54-02bd-4943-a15f-52cf59ffd0f4","739907b4-b36d-4ad1-866d-c9f8050de776","e65188a1-177e-4ab2-99f9-75f85d537621","fajYnbVhCRDi74xn0H30R","bArGdGwqo3iFkyKMyE7qR","ffYYlFAOinMkMeUg","5d700782-fb81-416e-83f9-5dd88260e350","w3MsVswhiuHRpAOQ","s2PhLzio3pcBg3bQ","d8118e61-b25f-4a6f-8f88-4e7ddd69827f","e1c5eaef-0205-4e6d-ab9f-5a207d58cc12","55a2161d-d415-4fbd-98cb-ff8aed19e6ee","67265fd9-7fbd-4bf7-b3c9-ced802b8a830","dvxpt2xKPsfCOTR4lY8Qp","a68b9a8c-a9c9-4133-8230-2671b2d8d86b","3bb25f58-2b50-4fa3-af55-48ea9f88a081","egctyVUjVesp2xA5t0ZYt","76420b75-f886-43ad-a876-c4fd4ad09ff2","1310c9cf-0160-4ad5-aad7-cf355c9313ac","6c54da8e-be6f-4ce3-b642-ef3108533df9","77ebb3d5-30b3-44e0-badc-02314bfd4f12","0e4f1336-2037-42e7-a854-054718e9359f","6412cc53-4648-46c1-8be6-c6d1c301baa1","c56bb2bc-4c2b-4bce-87e7-f1e655aa449a","UFrwsXzC1yr7Ge8FF8Vbo","a8edc4ac-028b-40ec-872a-e4a005b04b2a","38d933b3-770f-49df-b1ac-f2ae4f6061fd","vqPq_S-Il3EV72fUR41r6","93de42ca-53ea-460a-baa7-b9ec5c47cb1e","3bcd5b24-cdfa-45ad-b249-55ae92119ed3","aO8W81Z0PyIb6Hs7nOHPW","27f2c279-9420-4375-9487-5493c1dbbefc","Xt8o0SFdV1BIvmCKb1Ign","05537701-5721-425c-a0d5-8ec5da941220","1b6e8550-252e-4f9f-a586-05044cb97f0a","4866aa20-2068-47f0-afd1-c2b96a24f951","PXd6hUzi0wF7oPnT","f7c590dc-921d-4b6f-8f8e-e075b0c16035","f4355062-fdda-4c6f-a969-3f8a10c15475","c299d2dd-7cbd-4b81-976a-37b808ee41a8","9c56d34a-84ee-481e-ac5a-13fa56750a3c","60f0e948-b809-40de-aac1-180423cbebcd","dfab2e99-6155-482d-a598-8b8cc11f7ddc","e6ff7608-3de4-46e3-93a7-24ba07f70f42","bb4b4e79-9835-4284-bcac-d3de9b203e1a","3babc3d2-79ae-470a-9c06-ab8bba2e684e","4eeb4df6-2842-4db4-84ce-1992975f36a5","dff06309-f792-4ee2-a0ef-529972167027","d1aaf074-9c4c-4926-9106-44b71fd92529","20206ec8-0739-464e-b41d-65307a0c5aa6","3IFIK1ByzeIxZCByryGLN","0ba5c14a-800b-4614-ad5b-0ae7102e269e","db9cdb23-f02b-426c-b27e-baafb72916bd","7a81c659-7511-48c0-a78f-552d0e6cfff7","8e83deb1-8f7c-439e-b991-70e544645bfb","ubXzUle7zxv25VkjiLmpR","fb9dbfa7-978e-4f56-aeb7-3c97fb6c9e93","b6226bd4-551d-4670-a956-158bdce3f5a6","f691cb23-bc18-4b33-b454-155b1e785d62","a02e32ca-2839-46bc-a452-684f01a4e671","887233a2-8653-46ef-adce-2e482007942b","b6746509-f9f8-4823-b3b9-0d6d5f1fdb69","vlb4ItR9EQCCw9ACUA5h7","f39cc3a8-8357-49e5-8cdb-04450d05d913","1426c9b1-f3c1-4c01-8efd-a732c782c48c","dCGCWXgAmiOZXbdULT1m6","e02953c0-95d2-4101-a117-f8e0221800f0","GL8aMKtYOxcE560XF4HUK","9cc2f536-ad6d-49d2-bf6a-30284dfa1158","f9503aa6-bceb-4b11-89cd-d7e6f50d5cb0","e9bf14ec-5801-4be8-ba1e-3034dc742fa6","fee6c25b-8ea8-45bf-89d5-8c6d036b03b6","b28d278d-4fa0-4eac-9d26-dd6b10eb169d","yJwSC7hqYIezTFHf5i0Ev","5B2iI6ltu8TF5LJWAfXUE","4db45135-9630-4554-8ad4-6ca853621fca","MA3EsQQpV6iMx8j3hkJPK","84143a1b-aa79-40ff-bcae-6d9858fec127","osu6JGOnvXJ5gt3tpqWZY","1a6173cd-cf13-4b34-a522-8350bf9a364f","xRWsry32YkvSjs2Z","39SlH3nIiO6oQSwmZaMXT","TJrAQeEG6EjrEarYyIbYK","240d9848-b03d-445a-8787-090d79024b6a","5730411b-fefa-49e0-aced-451f5b148299","63a922b8-2d60-4ea7-9f47-bcfaa0caef7e","734cd78d-0bc9-426b-803d-1efc84dfffe5","3baf3651-9e5a-46bd-bba1-f0c0caf7385c","6733cf80-f2b1-41eb-8ddf-e2fa947f6b43","si3z090WsiLasMhJBa1Az","3577d6e8-1437-4f7b-9da2-c353ed232038"],"data":{},"contentHash":"b5a875cede0b3b4abe401df717960205","custom":{"nav_order":0,"permalink":"/"},"body":"\n# Digital Garden\n\nThis Wiki of Personal Information is organized according to domains and their\nsub-domains, along with specific implementation of those domains.\n\nFor instance, Git itself is a domain. Sub-domains of Git, would be `commit`,\n`tags`, `reflog` etc. implementations of each of those could be `cli`, `strat`\n(strategies), `inner` etc.\n\nThe goal of the wiki is to present data in a manner that is from the perspective\nof a querying user. Here, a user is a programmer wanting to get key information\nfrom a specific domain. For instance, if a user wants to use postgres functions\nand hasn't done them in a while, they should be able to query\n`postgres.functions` to see what information is available to them.\n\nThis wiki has been written with myself in mind. While learning each of these\ndomains, I have been sensitive to the aha moments and have noted down my\ninsights as they arose. I have refrained from capturing information that I\nconsidered obvious or otherwise non-beneficial to my own understanding.\n\nThe ability I hope to gain from this wiki is the ability to step away from any\ngiven domain for a long period of time, and be able to be passably useful for\nwhatever my goals are within a short period of time. Of course, this is all\nvague sounding, and really depends on the domain, along with the ends I am\ntrying to reach.\n"},"collectionChildren":null,"customHeadContent":null,"config":{"version":3,"useFMTitle":true,"useNoteTitleForLink":true,"noLegacyNoteRef":true,"mermaid":true,"useKatex":true,"dev":{"enablePreviewV2":true},"site":{"assetsPrefix":"/Digital-Garden","siteUrl":"https://tycholiz.github.io","copyAssets":true,"siteHierarchies":["root"],"siteRootDir":"docs","usePrettyRefs":true,"title":"Dendron","description":"Publishable tech notes","duplicateNoteBehavior":{"action":"useVault","payload":["tech"]},"siteLastModified":true,"gh_edit_branch":"main","usePrettyLinks":true,"siteNotesDir":"notes","siteFaviconPath":"favicon.ico","gh_edit_link":true,"gh_edit_link_text":"Edit this page on GitHub","gh_root":"docs/","gh_edit_view_mode":"edit","writeStubs":true,"siteIndex":"root"},"commands":{"lookup":{"note":{"selectionMode":"extract","confirmVaultOnCreate":false,"leaveTrace":false}},"insertNote":{"initialValue":"templates"},"insertNoteLink":{"aliasMode":"none","enableMultiSelect":false},"insertNoteIndex":{"enableMarker":false},"randomNote":{}},"workspace":{"dendronVersion":"0.67.1","vaults":[{"fsPath":"../main/tech","name":"tech"}],"journal":{"dailyDomain":"daily","name":"journal","dateFormat":"y.MM.dd","addBehavior":"childOfDomain"},"scratch":{"name":"scratch","dateFormat":"y.MM.dd.HHmmss","addBehavior":"asOwnDomain"},"graph":{"zoomSpeed":1},"enableAutoCreateOnDefinition":false,"enableXVaultWikiLink":false,"enableRemoteVaultInit":true,"workspaceVaultSyncMode":"noCommit","enableAutoFoldFrontmatter":true,"maxPreviewsCached":10,"maxNoteLength":204800,"task":{"name":"","dateFormat":"","addBehavior":"childOfCurrent","statusSymbols":{"":" ","wip":"w","done":"x","assigned":"a","moved":"m","blocked":"b","delegated":"l","dropped":"d","pending":"y"},"prioritySymbols":{"H":"high","M":"medium","L":"low"},"todoIntegration":false,"createTaskSelectionType":"selection2link"},"enableUserTags":true,"enableHashTags":true},"usePrettyRefs":true}},"__N_SSG":true}