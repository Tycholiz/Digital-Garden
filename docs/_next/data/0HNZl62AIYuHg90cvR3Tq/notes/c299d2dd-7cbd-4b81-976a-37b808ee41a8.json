{"pageProps":{"note":{"id":"c299d2dd-7cbd-4b81-976a-37b808ee41a8","title":"Nginx","vault":{"fsPath":"../main/tech","name":"tech"},"type":"note","desc":"","links":[],"anchors":{"overview":{"type":"header","text":"Overview","value":"overview","line":8,"column":0},"config-file":{"type":"header","text":"Config file","value":"config-file","line":15,"column":0},"blocks":{"type":"header","text":"Blocks","value":"blocks","line":25,"column":0},"server-block":{"type":"header","text":"Server Block","value":"server-block","line":29,"column":0},"location-block":{"type":"header","text":"Location Block","value":"location-block","line":45,"column":0},"tasks-of-nginx":{"type":"header","text":"Tasks of Nginx","value":"tasks-of-nginx","line":73,"column":0},"serving-static-content":{"type":"header","text":"Serving Static Content","value":"serving-static-content","line":74,"column":0},"reverse-proxy-server":{"type":"header","text":"Reverse Proxy Server","value":"reverse-proxy-server","line":86,"column":0},"debugging":{"type":"header","text":"Debugging","value":"debugging","line":102,"column":0},"pitfalls":{"type":"header","text":"Pitfalls","value":"pitfalls","line":106,"column":0}},"fname":"nginx","updated":1615270208490,"created":1615270186589,"parent":"0e1ca097-be9f-4e4c-a7ed-d6dfb05cd4e8","children":["485747d0-4ad3-4453-b400-515c8833535f"],"data":{},"contentHash":"28efb6d023080b6e65036dd5dff20d00","custom":{}},"body":"<h1 id=\"nginx\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#nginx\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>Nginx</h1>\n<h2 id=\"overview\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#overview\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>Overview</h2>\n<ul>\n<li>Nginx has 1 master process, and multiple worker processes.\n<ul>\n<li>The master's job is to read configuration files, and to manage the worker processes.</li>\n<li>The worker processes handle the requests.</li>\n</ul>\n</li>\n<li>Nginx uses an event-based model to distribute requests among workers</li>\n<li>The # of workers is specified in the config file, and may either be fixed, or adjustable based on how many cores the CPU has. </li>\n</ul>\n<h3 id=\"config-file\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#config-file\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>Config file</h3>\n<ul>\n<li>The nginx config file <code>nginx.conf</code> is stored either in <code>/usr/local/nginx/conf</code>, <code>/etc/nginx</code>, or <code>/usr/local/etc/nginx</code>.</li>\n<li>nginx consists of modules which are controlled by directives specified in the configuration file\n<ul>\n<li>Directives can either be simple directives or block directives\n<ul>\n<li>simple ends with <code>;</code>, block uses <code>{}</code></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>If a directive can have other directives inside, it is called a Context \n<ul>\n<li>ex. <code>events</code>, <code>http</code>, <code>server</code>, <code>location</code></li>\n</ul>\n</li>\n<li>If a directive is not placed within a Context, then it is considered to be in the Main Context. \n<ul>\n<li>The <code>events</code> and <code>http</code> directives reside in the Main Context, <code>server</code> in <code>http</code>, and <code>location</code> in <code>server</code>.</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"blocks\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#blocks\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>Blocks</h2>\n<ul>\n<li>Nginx divides the configurations meant to serve different content into Blocks, which live in a hierarchical structure.</li>\n<li>Each time a client request is made to the server, Nginx begins a process of determining which hierarchical block should be used to handle the request.</li>\n</ul>\n<h3 id=\"server-block\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#server-block\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>Server Block</h3>\n<ul>\n<li>Defines a virtual server used to handle requests of a defined type\n<ul>\n<li>each Server Block functions as a separate virtual web server instance</li>\n</ul>\n</li>\n<li>Based on the domain name, port and IP address requested, we can configure multiple server blocks to handle each combination.</li>\n<li>The <code>server_name</code> and <code>listen</code> directives are used to determine which server block should be used to fulfill a request. They are used to bind to tcp sockets.\n<ul>\n<li>With <code>listen</code>, we can use a lone IP, a lone port, or a combo of the two. If we only specify one, then defaults are used\n<ul>\n<li>default port: 80</li>\n<li>default IP: 0.0.0.0</li>\n</ul>\n</li>\n<li>the <code>server_name</code> directive is only evaluated when nginx needs to distinguish between server blocks that match to the same level of specificity in the <code>listen</code> directive. Put another way, it is a \"specificity tie-breaker\" \n<ul>\n<li>in other words, if <code>example.com</code> is hosted on <code>192.168.1.10:80</code>, a request will always be served by a server block that specifies <code>listen 192.168.1.10</code>, even if there is another server block that specifies <code>server_name example.com</code></li>\n</ul>\n</li>\n<li>Finally, if further specificity is needed, then the Host header from the request (which contains the URI that the client was trying to reach) is used. \n<ul>\n<li>When using wildcard matching, the longest match beginning with a wildcard is used\n<ul>\n<li>ex. if the request has a Host header of <code>www.example.com</code>, and we have 3 server blocks with <code>server_name</code> of <code>*.example.com</code>, <code>www.example.*</code> and <code>*.com</code>, <code>*.example.com</code> would win out.</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>With server blocks, we can run more than one website on a single host</li>\n<li>in Apache, called <em>VirtualHost</em> </li>\n</ul>\n<h3 id=\"location-block\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#location-block\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>Location Block</h3>\n<ul>\n<li>Lives within a Server Block (or nested in other location blocks).</li>\n<li>Determine how Nginx should handle the part of the request that comes after IP:port (ie. the URI).</li>\n<li>Similar to how Nginx has a specificity-based process for determining which server block will process the request, Nginx has an algorithm to determine which location block within the server should be used for handling requests.</li>\n<li>Location blocks take the following form:</li>\n</ul>\n<pre><code>location &#x3C;optional_modifier> &#x3C;location_match> {\n}\n</code></pre>\n<ul>\n<li>The <code>location_match</code> defines what Nginx should check the request URI against.</li>\n<li>The <code>optional_modifier</code> affects the way Nginx will attempt to match the location block.\n<ul>\n<li>ex. check for prefix match (default), check for exact match (<code>=</code>), check for case-sensitive Regex (<code>~</code>)</li>\n</ul>\n</li>\n<li>The URI specified after <code>location</code> will be added to the path specified in the <em>root directive</em>\n<ul>\n<li>ex. if we specify <code>root /var/www/</code> and the location block specifies <code>/images/</code>, then the path to the requested file on the local FS will be <code>/var/www/images</code></li>\n</ul>\n</li>\n<li>ex. Imagine we had a server block:</li>\n</ul>\n<pre><code>server {\n    location / {\n        root /data/www;\n    }\n\n    location /images/ {\n        root /data;\n    }\n}\n</code></pre>\n<p>in response to a request with URI starting with <code>/images/</code>, the server will send files from the <code>/data/images</code> directory. </p>\n<h2 id=\"tasks-of-nginx\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#tasks-of-nginx\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>Tasks of Nginx</h2>\n<h3 id=\"serving-static-content\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#serving-static-content\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>Serving Static Content</h3>\n<ul>\n<li>Nginx can be configured to serve static content, such as HTML and images.</li>\n<li>this involves setting up of a server block inside the http block with two location blocks.\n<ul>\n<li>multiple server blocks are able to be added, each specifying a different port.</li>\n</ul>\n</li>\n</ul>\n<pre><code>http {\n\tserver {\n\t\t\n\t}\n}\n</code></pre>\n<h3 id=\"reverse-proxy-server\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#reverse-proxy-server\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>Reverse Proxy Server</h3>\n<ul>\n<li>When Nginx proxies a request, it sends the request to a specified proxied server, fetches the response, and sends it back to the client\n<ul>\n<li>it is possible to proxy requests to another HTTP server (eg. another Nginx server) or to a non-HTTP server (eg. express.js)\n<ul>\n<li>We use a specified protocol like FastCGI to do this</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>We can establish a proxy server by using the <code>proxy_pass</code> directive within a <em>location block</em>.\n<ul>\n<li>The value of <code>proxy_pass</code> is the address of the proxy server:</li>\n</ul>\n</li>\n</ul>\n<pre><code>location /some/path/ {\n    proxy_pass http://www.example.com/link/;\n}\n</code></pre>\n<ul>\n<li>In this config, all requests processed to <code>/some/path/</code> to be sent to the proxy server at <code>http://www.example.com/link/</code>.\n<ul>\n<li>ex. the request with the URI of <code>/some/path/page.html</code> will be proxied to <code>http://www.example.com/link/page.html</code></li>\n</ul>\n</li>\n<li>to pass a request to a non-HTTP server, the appropriate <code>*_pass</code> directive should be used\n<ul>\n<li>ex. <code>fastcgi_pass</code></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"debugging\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#debugging\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>Debugging</h2>\n<ul>\n<li>upon changing nginx.conf, we need to reload the nginx server with <code>nginx -s reload</code>.</li>\n<li>logs are stored at either <code>/usr/local/nginx/logs</code> or <code>/var/log/nginx</code></li>\n</ul>\n<h3 id=\"pitfalls\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#pitfalls\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>Pitfalls</h3>\n<ul>\n<li>A <em>root directive</em> should occur outside of the location block. We can then use another <em>root directive</em> within a <em>location block</em> if we want to override it.\n<ul>\n<li>Conversely, if you were to add a root to every location block then a location block that isn’t matched will have no root. Therefore, it is important that a root directive occur prior to your location blocks, which can then override this directive if they need to.</li>\n</ul>\n</li>\n<li><a href=\"https://www.nginx.com/resources/wiki/start/topics/tutorials/config_pitfalls/\">source</a></li>\n</ul>\n<hr>\n<h2 id=\"children\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#children\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>Children</h2>\n<ol>\n<li><a href=\"/Digital-Garden/notes/485747d0-4ad3-4453-b400-515c8833535f\">Conf</a></li>\n</ol>","noteIndex":{"id":"0e1ca097-be9f-4e4c-a7ed-d6dfb05cd4e8","title":"Root","vault":{"fsPath":"../main/tech","name":"tech"},"type":"note","desc":"","links":[],"anchors":{"digital-garden":{"type":"header","text":"Digital Garden","value":"digital-garden","line":8,"column":0}},"fname":"root","updated":1618676699718,"created":1615482407722,"parent":null,"children":["723b0cf7-a5f3-4c71-a811-2c782faa4cc4","mcq7ZV8MBAMVYrXg","dMS8QtNyJCwovtfh6ERrp","ZaTr28eWk1DrXOEsc1YVb","WH8jEz5lviqlnG5f","a19c5ab0-fd8c-4bd0-9aed-da5abefabc45","4586ac41-3af7-4176-aaf0-440ad1773bc9","610b951b-7363-471f-acd5-210710b9d104","f29f31f3-7235-41ad-83a1-b64f3f466916","3445f14b-9f67-412d-9762-dc14ee7c90e4","c3304982-eb1c-45ec-8556-4599d2286b5c","facc2b01-755a-409f-99f6-57bef2d1501f","b965d9fa-c200-4a8d-9323-73b9c2565812","4d5aab64-f4a4-40a0-9155-f28aaf49d38a","a95e8592-84c0-4698-a0d9-07e8e130b322","234faa4d-432f-43f4-99fb-08ac4c01bf9b","105fd41a-910d-4b94-8686-98c3933931f2","f3bcc3d9-7232-41f4-aaaf-86a99b56dc65","ANfx9Z4a6ZA0uJuSHtbIJ","4668ac41-f2d5-40c0-9144-efb456d8663b","j8xePJ5wfKsznvM5DP5q6","dc79799f-a55d-48ab-a8be-c48adb1b19c0","f6feef57-b8f5-451f-a09a-7b63f6a07183","12797f4e-92d0-447e-adc7-e5cb4ff4c883","5a9fb1df-478e-4687-9be0-5cb97e61ec57","1374e9e9-1cbc-4e1f-b1ca-66b8569533dd","f529cc34-aba0-45ca-ad7e-02ddda318941","0zcauha3il2NqtxZazIo7","9bbd6f68-03b2-41f4-92e4-2ca313e8b450","5a2ab598-fa7e-4471-8bda-9f5831b679ae","3b7ffbbf-762e-411f-8fad-5e2b1b95e384","81e5a201-c843-49d1-b291-f99d818cee0c","295ca45b-6851-4d38-9ecb-1d7e4a885849","vdjkh6890a6Ye6vvbN0CD","b3b7587a-fbd2-48a9-aef1-4efc90458e82","znCO2WghOAWC8nBGb4Ooa","7cc5d9c3-20d8-4fef-aca2-7d6dcdc7b3d7","f32fab12-3c92-4e91-8d61-01e17e734910","fqVQpS9FBiXgKsZX3R3sJ","53b47d5a-542b-4fab-8f6c-c70574ab7a48","963c4b54-02bd-4943-a15f-52cf59ffd0f4","739907b4-b36d-4ad1-866d-c9f8050de776","e65188a1-177e-4ab2-99f9-75f85d537621","fajYnbVhCRDi74xn0H30R","bArGdGwqo3iFkyKMyE7qR","ffYYlFAOinMkMeUg","5d700782-fb81-416e-83f9-5dd88260e350","w3MsVswhiuHRpAOQ","s2PhLzio3pcBg3bQ","d8118e61-b25f-4a6f-8f88-4e7ddd69827f","e1c5eaef-0205-4e6d-ab9f-5a207d58cc12","55a2161d-d415-4fbd-98cb-ff8aed19e6ee","67265fd9-7fbd-4bf7-b3c9-ced802b8a830","dvxpt2xKPsfCOTR4lY8Qp","a68b9a8c-a9c9-4133-8230-2671b2d8d86b","3bb25f58-2b50-4fa3-af55-48ea9f88a081","egctyVUjVesp2xA5t0ZYt","76420b75-f886-43ad-a876-c4fd4ad09ff2","1310c9cf-0160-4ad5-aad7-cf355c9313ac","6c54da8e-be6f-4ce3-b642-ef3108533df9","77ebb3d5-30b3-44e0-badc-02314bfd4f12","0e4f1336-2037-42e7-a854-054718e9359f","6412cc53-4648-46c1-8be6-c6d1c301baa1","c56bb2bc-4c2b-4bce-87e7-f1e655aa449a","UFrwsXzC1yr7Ge8FF8Vbo","a8edc4ac-028b-40ec-872a-e4a005b04b2a","38d933b3-770f-49df-b1ac-f2ae4f6061fd","vqPq_S-Il3EV72fUR41r6","93de42ca-53ea-460a-baa7-b9ec5c47cb1e","3bcd5b24-cdfa-45ad-b249-55ae92119ed3","aO8W81Z0PyIb6Hs7nOHPW","27f2c279-9420-4375-9487-5493c1dbbefc","Xt8o0SFdV1BIvmCKb1Ign","05537701-5721-425c-a0d5-8ec5da941220","1b6e8550-252e-4f9f-a586-05044cb97f0a","4866aa20-2068-47f0-afd1-c2b96a24f951","PXd6hUzi0wF7oPnT","f7c590dc-921d-4b6f-8f8e-e075b0c16035","f4355062-fdda-4c6f-a969-3f8a10c15475","c299d2dd-7cbd-4b81-976a-37b808ee41a8","9c56d34a-84ee-481e-ac5a-13fa56750a3c","60f0e948-b809-40de-aac1-180423cbebcd","dfab2e99-6155-482d-a598-8b8cc11f7ddc","e6ff7608-3de4-46e3-93a7-24ba07f70f42","bb4b4e79-9835-4284-bcac-d3de9b203e1a","3babc3d2-79ae-470a-9c06-ab8bba2e684e","4eeb4df6-2842-4db4-84ce-1992975f36a5","dff06309-f792-4ee2-a0ef-529972167027","d1aaf074-9c4c-4926-9106-44b71fd92529","20206ec8-0739-464e-b41d-65307a0c5aa6","3IFIK1ByzeIxZCByryGLN","0ba5c14a-800b-4614-ad5b-0ae7102e269e","db9cdb23-f02b-426c-b27e-baafb72916bd","7a81c659-7511-48c0-a78f-552d0e6cfff7","8e83deb1-8f7c-439e-b991-70e544645bfb","ubXzUle7zxv25VkjiLmpR","fb9dbfa7-978e-4f56-aeb7-3c97fb6c9e93","b6226bd4-551d-4670-a956-158bdce3f5a6","f691cb23-bc18-4b33-b454-155b1e785d62","a02e32ca-2839-46bc-a452-684f01a4e671","887233a2-8653-46ef-adce-2e482007942b","b6746509-f9f8-4823-b3b9-0d6d5f1fdb69","vlb4ItR9EQCCw9ACUA5h7","f39cc3a8-8357-49e5-8cdb-04450d05d913","1426c9b1-f3c1-4c01-8efd-a732c782c48c","dCGCWXgAmiOZXbdULT1m6","e02953c0-95d2-4101-a117-f8e0221800f0","GL8aMKtYOxcE560XF4HUK","9cc2f536-ad6d-49d2-bf6a-30284dfa1158","f9503aa6-bceb-4b11-89cd-d7e6f50d5cb0","e9bf14ec-5801-4be8-ba1e-3034dc742fa6","fee6c25b-8ea8-45bf-89d5-8c6d036b03b6","b28d278d-4fa0-4eac-9d26-dd6b10eb169d","yJwSC7hqYIezTFHf5i0Ev","5B2iI6ltu8TF5LJWAfXUE","4db45135-9630-4554-8ad4-6ca853621fca","MA3EsQQpV6iMx8j3hkJPK","84143a1b-aa79-40ff-bcae-6d9858fec127","osu6JGOnvXJ5gt3tpqWZY","1a6173cd-cf13-4b34-a522-8350bf9a364f","xRWsry32YkvSjs2Z","39SlH3nIiO6oQSwmZaMXT","TJrAQeEG6EjrEarYyIbYK","240d9848-b03d-445a-8787-090d79024b6a","5730411b-fefa-49e0-aced-451f5b148299","63a922b8-2d60-4ea7-9f47-bcfaa0caef7e","734cd78d-0bc9-426b-803d-1efc84dfffe5","3baf3651-9e5a-46bd-bba1-f0c0caf7385c","6733cf80-f2b1-41eb-8ddf-e2fa947f6b43","si3z090WsiLasMhJBa1Az","3577d6e8-1437-4f7b-9da2-c353ed232038"],"data":{},"contentHash":"b5a875cede0b3b4abe401df717960205","custom":{"nav_order":0,"permalink":"/"},"body":"\n# Digital Garden\n\nThis Wiki of Personal Information is organized according to domains and their\nsub-domains, along with specific implementation of those domains.\n\nFor instance, Git itself is a domain. Sub-domains of Git, would be `commit`,\n`tags`, `reflog` etc. implementations of each of those could be `cli`, `strat`\n(strategies), `inner` etc.\n\nThe goal of the wiki is to present data in a manner that is from the perspective\nof a querying user. Here, a user is a programmer wanting to get key information\nfrom a specific domain. For instance, if a user wants to use postgres functions\nand hasn't done them in a while, they should be able to query\n`postgres.functions` to see what information is available to them.\n\nThis wiki has been written with myself in mind. While learning each of these\ndomains, I have been sensitive to the aha moments and have noted down my\ninsights as they arose. I have refrained from capturing information that I\nconsidered obvious or otherwise non-beneficial to my own understanding.\n\nThe ability I hope to gain from this wiki is the ability to step away from any\ngiven domain for a long period of time, and be able to be passably useful for\nwhatever my goals are within a short period of time. Of course, this is all\nvague sounding, and really depends on the domain, along with the ends I am\ntrying to reach.\n"},"collectionChildren":null,"customHeadContent":null,"config":{"version":3,"useFMTitle":true,"useNoteTitleForLink":true,"noLegacyNoteRef":true,"mermaid":true,"useKatex":true,"dev":{"enablePreviewV2":true},"site":{"assetsPrefix":"/Digital-Garden","siteUrl":"https://tycholiz.github.io","copyAssets":true,"siteHierarchies":["root"],"siteRootDir":"docs","usePrettyRefs":true,"title":"Dendron","description":"Publishable tech notes","duplicateNoteBehavior":{"action":"useVault","payload":["tech"]},"siteLastModified":true,"gh_edit_branch":"main","usePrettyLinks":true,"siteNotesDir":"notes","siteFaviconPath":"favicon.ico","gh_edit_link":true,"gh_edit_link_text":"Edit this page on GitHub","gh_root":"docs/","gh_edit_view_mode":"edit","writeStubs":true,"siteIndex":"root"},"commands":{"lookup":{"note":{"selectionMode":"extract","confirmVaultOnCreate":false,"leaveTrace":false}},"insertNote":{"initialValue":"templates"},"insertNoteLink":{"aliasMode":"none","enableMultiSelect":false},"insertNoteIndex":{"enableMarker":false},"randomNote":{}},"workspace":{"dendronVersion":"0.67.1","vaults":[{"fsPath":"../main/tech","name":"tech"}],"journal":{"dailyDomain":"daily","name":"journal","dateFormat":"y.MM.dd","addBehavior":"childOfDomain"},"scratch":{"name":"scratch","dateFormat":"y.MM.dd.HHmmss","addBehavior":"asOwnDomain"},"graph":{"zoomSpeed":1},"enableAutoCreateOnDefinition":false,"enableXVaultWikiLink":false,"enableRemoteVaultInit":true,"workspaceVaultSyncMode":"noCommit","enableAutoFoldFrontmatter":true,"maxPreviewsCached":10,"maxNoteLength":204800,"task":{"name":"","dateFormat":"","addBehavior":"childOfCurrent","statusSymbols":{"":" ","wip":"w","done":"x","assigned":"a","moved":"m","blocked":"b","delegated":"l","dropped":"d","pending":"y"},"prioritySymbols":{"H":"high","M":"medium","L":"low"},"todoIntegration":false,"createTaskSelectionType":"selection2link"},"enableUserTags":true,"enableHashTags":true},"usePrettyRefs":true}},"__N_SSG":true}