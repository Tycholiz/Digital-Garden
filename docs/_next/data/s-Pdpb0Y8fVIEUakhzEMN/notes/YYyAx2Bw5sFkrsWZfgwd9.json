{"pageProps":{"note":{"id":"YYyAx2Bw5sFkrsWZfgwd9","title":"Saga","desc":"","updated":1618449830123,"created":1615185252869,"custom":{},"fname":"redux.mw.saga","type":"note","vault":{"fsPath":"../main/tech","name":"tech"},"contentHash":"0a4edca366c6214f4c5ed34a79f2eb0e","links":[],"anchors":{"what-is-it":{"type":"header","text":"What is it?","value":"what-is-it","line":8,"column":0,"depth":1},"reconciling-generator-fns-and-saga":{"type":"header","text":"Reconciling Generator fns and Saga","value":"reconciling-generator-fns-and-saga","line":14,"column":0,"depth":2},"types-of-saga":{"type":"header","text":"Types of Saga","value":"types-of-saga","line":21,"column":0,"depth":1},"worker-saga":{"type":"header","text":"Worker Saga","value":"worker-saga","line":22,"column":0,"depth":3},"watcher-saga":{"type":"header","text":"Watcher Saga","value":"watcher-saga","line":25,"column":0,"depth":3},"root-saga":{"type":"header","text":"Root Saga","value":"root-saga","line":28,"column":0,"depth":3},"example-process":{"type":"header","text":"Example process","value":"example-process","line":31,"column":0,"depth":1},"api-reference":{"type":"header","text":"API Reference","value":"api-reference","line":35,"column":0,"depth":1},"effects":{"type":"header","text":"Effects","value":"effects","line":36,"column":0,"depth":3},"ue-resources":{"type":"header","text":"UE Resources","value":"ue-resources","line":52,"column":0,"depth":1}},"children":[],"parent":"gKBWcFkbYGz5FYXF11zN2","data":{}},"body":"<h1 id=\"saga\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#saga\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>Saga</h1>\n<h1 id=\"what-is-it\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#what-is-it\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>What is it?</h1>\n<ul>\n<li>a saga is a daemon that lets us define long-running processes that take actions as they come, and transform or perform requests before outputting actions. This moves the logic from action creators into sagas</li>\n<li>a saga is a separate thread in the app that's just for side-effects\n<ul>\n<li>while thunks utilize callbacks, a saga thread can be started, paused (<code>yield</code>) and cancelled by dispatching actions within generator functions</li>\n</ul>\n</li>\n<li>in synchronous redux, a dispatched action is assigned to a reducer. In Async redux, a dispatched action is assigned to a saga. The saga does its side effect (<code>resourceListReadRequest</code>), and takes the returned data, and dispatches another action (<code>resourceListReadSuccess</code>) which is then picked up by the reducer.</li>\n</ul>\n<h2 id=\"reconciling-generator-fns-and-saga\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#reconciling-generator-fns-and-saga\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>Reconciling Generator fns and Saga</h2>\n<ul>\n<li>Imagine a saga as a thread that constantly calls <code>next()</code> and tries to execute the <code>yield</code> lines as soon as it can</li>\n<li>spec: like a promise, it will wait on that value to \"return\" before it calls <code>next()</code> and goes to the next <code>yield</code></li>\n<li>In Sagas, we are \"yielding\" to the redux-saga middleware\n<ul>\n<li>The MW suspends the saga until the yielded side effect resolves. At this point, the MW calls <code>next()</code></li>\n</ul>\n</li>\n<li>When we say <code>yield call(___)</code>, we are only describing what we want to happen. We aren't describing the actual outcome. In this sense, it is declarative.</li>\n</ul>\n<h1 id=\"types-of-saga\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#types-of-saga\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>Types of Saga</h1>\n<h3 id=\"worker-saga\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#worker-saga\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>Worker Saga</h3>\n<ul>\n<li>def - Sagas that perform side effects and dispatch other actions asynchronously.</li>\n</ul>\n<h3 id=\"watcher-saga\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#watcher-saga\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>Watcher Saga</h3>\n<ul>\n<li>def - Sagas that listen for dispatched actions and call worker sagas in response</li>\n</ul>\n<h3 id=\"root-saga\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#root-saga\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>Root Saga</h3>\n<ul>\n<li>def - Sagas that run all watcher sagas in parallel</li>\n</ul>\n<h1 id=\"example-process\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#example-process\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>Example process</h1>\n<ol>\n<li>An action <code>resourceListReadRequest</code> is dispatched somewhere in the code</li>\n<li>A <em>Watcher Saga</em> that is designed to listen for <code>resourceListReadRequest</code> picks up on the fact that it was dispatched, and notifys the <em>Worker Saga</em></li>\n</ol>\n<h1 id=\"api-reference\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#api-reference\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>API Reference</h1>\n<h3 id=\"effects\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#effects\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>Effects</h3>\n<p><em>def</em> - an object containing instructions to be fulfilled by middleware. When the MW retrieves an effect yielded by a saga (ie. when a saga executes put, call, take etc), the saga pauses until the effect is done.</p>\n<ul>\n<li><code>call</code> - call the fn (1st arg) with args (rest args)</li>\n<li><code>put</code> - dispatch action</li>\n<li><code>take</code> - block execution of the saga until the provided action is dispatched\n<ul>\n<li>therefore, this is used in a watcher saga</li>\n</ul>\n</li>\n<li><code>fork</code> - useful when a saga needs to start a non-blocking task\n<ul>\n<li>Non-blocking means: the caller starts the task and continues executing without waiting for it to complete</li>\n<li>Situations:\n<ol>\n<li>grouping sagas by logical domain</li>\n<li>keeping a reference to a task in order to be able to cancel/join it</li>\n</ol>\n</li>\n</ul>\n</li>\n<li><code>takeEvery</code> - each time a particular action is dispatched, spawn a saga\n<ul>\n<li><code>takeEvery</code> uses <code>take</code> and <code>fork</code> under the hood</li>\n</ul>\n</li>\n<li><code>takeLatest</code> - spawn a saga only for the latest dispatched action of a given type\n<ul>\n<li>ex.  imagine a user is mashing the login button. with Thunk, an API call would be made with each button press. with redux-saga, we get to just take the latest one and ignore the rest</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"ue-resources\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#ue-resources\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>UE Resources</h1>\n<p><a href=\"https://flaviocopes.com/redux-saga/\">redux-saga primer</a></p>\n<ul>\n<li><a href=\"https://medium.com/appsflyer/dont-call-me-i-ll-call-you-side-effects-management-with-redux-saga-part-2-cd16f6bcdbcd\">also</a></li>\n</ul>","noteIndex":{"id":"olZIVfSs2uLLr3BppFh4K","title":"Root","desc":"","updated":1618676699718,"created":1615482407722,"custom":{"nav_order":0,"permalink":"/"},"fname":"root","type":"note","vault":{"fsPath":"../main/tech","name":"tech"},"contentHash":"777fb4dab9bcf63cbfe772245d7e4871","links":[],"anchors":{"digital-garden":{"type":"header","text":"Digital Garden","value":"digital-garden","line":8,"column":0,"depth":1}},"children":["zFMjbn3xihVNHjUIdZCD1","IK6NOKemuDjhfstJBovKL","RS8qp1GxwtiJopCUHTTtq","ZaTr28eWk1DrXOEsc1YVb","Vi0WYVLZunVM9iR8XZJn3","ngAbg7gluvbt1bY1UIRsi","RCPPXSakm5TvKka8kOmVp","MPx8ykTP57I40WTZvTP7f","ZU5WmdTG1bHoE8RcmZXZG","jqWiyYJff92RjXuUQt9PQ","KihijM8OQvZ4pASkkhqzL","F9vyqvls3OBCujtukqKhy","facc2b01-755a-409f-99f6-57bef2d1501f","m5ov42Vm6mR7RQWTvl1NW","YYt62mSW964cwb5nP0hva","PZxxZ4iESzSlbbHJKxuAZ","UDu62Pa6BaRqlG8uGoMhy","nMCtMXVvjBsJk3iw1zoIO","ANfx9Z4a6ZA0uJuSHtbIJ","BkG557LKUYbH1DnxprEVT","1TaH8zDTM98FZ9SYaeXLM","dc79799f-a55d-48ab-a8be-c48adb1b19c0","f6feef57-b8f5-451f-a09a-7b63f6a07183","4sz47Y0LKs1Si73rWtyyh","5a9fb1df-478e-4687-9be0-5cb97e61ec57","1374e9e9-1cbc-4e1f-b1ca-66b8569533dd","f529cc34-aba0-45ca-ad7e-02ddda318941","0zcauha3il2NqtxZazIo7","9bbd6f68-03b2-41f4-92e4-2ca313e8b450","5a2ab598-fa7e-4471-8bda-9f5831b679ae","uV6w4mZPoohWyZV4Xaad0","RgE0mZLaUjPftFPZsiAoe","mytCOts26Pidush65tdRW","fwUzxfLSPMH1eL8oBoLWx","TbW7PM9bg1y5TGkiWwQ8b","xiSIDeEtIc8X0lpUQlppI","0jxgntiLNHWFuCbzqtFGF","GkdMprLUe4QQULBxmGN6V","4SYc6v5hxY5g6Ip6kjpwO","fqVQpS9FBiXgKsZX3R3sJ","L5JUZlGAGvTxrsEBB7DY8","963c4b54-02bd-4943-a15f-52cf59ffd0f4","TeTedoeS2LdHPR632eCpM","e65188a1-177e-4ab2-99f9-75f85d537621","fajYnbVhCRDi74xn0H30R","bArGdGwqo3iFkyKMyE7qR","4Dcp7gbEVoLLgfu7bXFai","5d700782-fb81-416e-83f9-5dd88260e350","zubgzhNFE6KlTgXcjTz6O","8lpdfWa0cbSq1XJQbcYcY","17I8ZksXvqCH1mRtZDjHp","kF916Ow84qpJJeMRkWMIo","tMLkLcrIHHBz56xVmBLkP","CSePBQ6q7qhowKESqVwt7","laZ4OfLhZNK1Kuy6GaWUr","z5IJblOknQhMzZ5QZh4ye","N36FHxfxzwJfxDY3miWyX","3bb25f58-2b50-4fa3-af55-48ea9f88a081","aOqNcxZh8qN4MoBJcvGTc","u93Rz4fEWGu6VBR30Zraf","9hjMHnKvYT4jLKvuDSXaV","LgW7mTIALODoXc54B3p6S","UYPxfHBFWX7fb6hHU5bB6","qxSOd6SPN8qf9ZUojVFDX","WQoMTf6VXBaxCgksXAVsj","2Mw4XgfyCHXHNOX5yoCIY","UFrwsXzC1yr7Ge8FF8Vbo","a8edc4ac-028b-40ec-872a-e4a005b04b2a","0XJqmcdtcMZu66glBI5O8","lK8r8BXS4ThiUTe4xKIZe","93de42ca-53ea-460a-baa7-b9ec5c47cb1e","Rxs2jaGpdFzqYtP7lAJFJ","aO8W81Z0PyIb6Hs7nOHPW","I01hENHnh8Tqu3Ok8sLzG","evqsPNutOaZ8hcBCqxFQu","zhhxcjZUHdU8uRLwGb9Zh","G1aFACZB2ooWGMGwyd3ZW","YWy1C4tgoaCcw1m8JJsr7","Szj3o5iaNxPpesiCqwrbu","XhvCDW3fIw6h6MhY5ticq","Q70g7SusFZBQXzkuQifv4","AzfWDH3wp7jFpL2EYxBcW","y0fwpZ9qMqirsLiFyOciU","ZF8xj8wwDUqKlrwTrCFZ1","tAJvhqhdfyZZa87QHq1TU","4hRmipi8lxpBLyzWu5JVB","iTg0C7QjvnmqBZeEigJNs","3babc3d2-79ae-470a-9c06-ab8bba2e684e","bF3UsMFya3fMeXWDspVov","ULkfbL9WpktbVYnzhl6Jw","PpNOO8JYWe6dM8wruSa7x","di40pCxDn7IiqE8lFdD46","rmW0mkerqV35I8QPji6lM","3IFIK1ByzeIxZCByryGLN","iImkYAKfkw3beAl6pLbDn","tho65KN0ZpjQlVvP1fEzM","ecDe8DNWrkeQTwpTEvHje","Yqhdd9mSJGN7OJOeyoSD2","NEhsoOfR7J6o01ielAuUm","Ws5tah8tpeyn9tK8VBTg8","Bqpifx2HX3vjLhX9yvhTV","gWAg15uBJgkS2B0wcpMAa","l7V3v2ep1YdDCt7DOr7Ci","yM2PJBdqJnHpD63cPA6sW","qn0bre7eLbi3QMbCfWkUi","fSu0KxFL41IRouotqmbHs","0gtg24Mj1a1bQFPRGQNlO","7iQPBMltLPLbFEz2qbjPu","yoh4pwoXcfELInGKRdYf6","dCGCWXgAmiOZXbdULT1m6","jMavlje07sNa6hSEIE8WA","Xxm0JE4dKHxrQAaZfzvxD","PAEBZCyFBZJyR7OoMZ41E","PQ6km8RgRCuyICBPOYz8f","2bhftt8rGuxYu4pFgNqru","hjYIZpHQWuXfeEoGeJEKW","K2M9bQqVq2eQfm29eslKL","X8obW1iKwYsvNgKWGyCzy","yJwSC7hqYIezTFHf5i0Ev","c4Z7ETcOHUILRMH32Sfjw","qiR6dIu857b9M9kTqjOyK","8vflbCVkwZtYcqdDDTNAz","Ku1OgHMhELajzo61Gx7ye","LUrfhDWo8wuwZu7CN9TV8","osu6JGOnvXJ5gt3tpqWZY","1a6173cd-cf13-4b34-a522-8350bf9a364f","ZgCUp366YrF2Tyky2NT73","S2sBltrPfd8a7ICuD7CuH","oWCuBXOg6JWfZzjmKxmNl","jOmhZ8ovLYTPbpM1vqSDx","FraC6xzLy1ei91l1ICyc9","6ceBas2RE9Q4787GDngH7","734cd78d-0bc9-426b-803d-1efc84dfffe5","k4Bb09px6r0FxIRs49SXV","oaG3H1S9IUBO644nGZigu","Ka7agQJkUMRSWN0uFdkWK","si3z090WsiLasMhJBa1Az","ljKAVERmdEiKLK9hXGKBm","LIcuGYV0DDt1VWbvH6Sed","MgUSrpNCIwDOW4fX3vPOF","bZumdyapJ2H0wWWOmJ45i","QHXEIyeZGIGMVi5Q52UWI","i5Fya3Vzzm0rBT0ctByuo"],"parent":null,"data":{},"body":"\n# Digital Garden\n\nThis Wiki of Personal Information is organized according to domains and their\nsub-domains, along with specific implementation of those domains.\n\nFor instance, Git itself is a domain. Sub-domains of Git, would be `commit`,\n`tags`, `reflog` etc. implementations of each of those could be `cli`, `strat`\n(strategies), `inner` etc.\n\nThe goal of the wiki is to present data in a manner that is from the perspective\nof a querying user. Here, a user is a programmer wanting to get key information\nfrom a specific domain. For instance, if a user wants to use postgres functions\nand hasn't done them in a while, they should be able to query\n`postgres.functions` to see what information is available to them.\n\nThis wiki has been written with myself in mind. While learning each of these\ndomains, I have been sensitive to the \"aha\" moments and have noted down my\ninsights as they arose. I have refrained from capturing information that I\nconsidered obvious or otherwise non-beneficial to my own understanding.\n\nThe ability I hope to gain from this wiki is the ability to step away from any\ngiven domain for a long period of time, and be able to be passably useful for\nwhatever my goals are within a short period of time. Of course, this is all\nvague sounding, and really depends on the domain, along with the ends I am\ntrying to reach.\n\nTo achieve this, the system should be steadfast to:\n- be able to put information in relatively easily, without too much thought\n\trequired to make that determination.\n- be able to extract the information that we need, meaning there is a\n\thigh-degree in confidence in the location of the information. The idea is\n\tthat information loses a large amount of its value when it is unfindable.\n\tTherefore, a relatively strict ideology should be used when determining\n\twhere a piece of information belongs.\n"},"collectionChildren":null,"customHeadContent":null,"config":{"version":3,"useFMTitle":true,"useNoteTitleForLink":true,"noLegacyNoteRef":true,"mermaid":true,"useKatex":true,"dev":{"enablePreviewV2":true},"site":{"assetsPrefix":"/Digital-Garden","siteUrl":"https://tycholiz.github.io","copyAssets":true,"siteHierarchies":["root"],"siteRootDir":"docs","usePrettyRefs":true,"title":"Dendron","description":"Publishable tech notes","duplicateNoteBehavior":{"action":"useVault","payload":["tech"]},"siteLastModified":true,"gh_edit_branch":"main","usePrettyLinks":true,"siteNotesDir":"notes","siteFaviconPath":"favicon.ico","gh_edit_link":true,"gh_edit_link_text":"Edit this page on GitHub","gh_root":"docs/","gh_edit_view_mode":"edit","writeStubs":true,"siteIndex":"root"},"commands":{"lookup":{"note":{"selectionMode":"extract","confirmVaultOnCreate":false,"leaveTrace":false}},"insertNote":{"initialValue":"templates"},"insertNoteLink":{"aliasMode":"none","enableMultiSelect":false},"insertNoteIndex":{"enableMarker":false},"randomNote":{}},"workspace":{"dendronVersion":"0.67.1","vaults":[{"fsPath":"../main/tech","name":"tech"}],"journal":{"dailyDomain":"daily","name":"journal","dateFormat":"y.MM.dd","addBehavior":"childOfDomain"},"scratch":{"name":"scratch","dateFormat":"y.MM.dd.HHmmss","addBehavior":"asOwnDomain"},"graph":{"zoomSpeed":1},"enableAutoCreateOnDefinition":false,"enableXVaultWikiLink":false,"enableRemoteVaultInit":true,"workspaceVaultSyncMode":"noCommit","enableAutoFoldFrontmatter":true,"maxPreviewsCached":10,"maxNoteLength":204800,"task":{"name":"","dateFormat":"","addBehavior":"childOfCurrent","statusSymbols":{"":" ","wip":"w","done":"x","assigned":"a","moved":"m","blocked":"b","delegated":"l","dropped":"d","pending":"y"},"prioritySymbols":{"H":"high","M":"medium","L":"low"},"todoIntegration":false,"createTaskSelectionType":"selection2link"},"enableUserTags":true,"enableHashTags":true},"usePrettyRefs":true}},"__N_SSG":true}