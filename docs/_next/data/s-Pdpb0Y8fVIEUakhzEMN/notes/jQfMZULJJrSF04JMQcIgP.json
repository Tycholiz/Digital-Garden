{"pageProps":{"note":{"id":"jQfMZULJJrSF04JMQcIgP","title":"Binary","desc":"","updated":1633798029940,"created":1633614583391,"custom":{},"fname":"general.lang.data-structs.tree.binary","type":"note","vault":{"fsPath":"../main/tech","name":"tech"},"contentHash":"2e1367bac66112d72bce95077956e44f","links":[{"type":"wiki","from":{"fname":"general.lang.data-structs.tree.binary","id":"jQfMZULJJrSF04JMQcIgP","vaultName":"tech"},"value":"general.algorithms.space-and-time","alias":"time complexity","position":{"start":{"line":45,"column":25,"offset":3102},"end":{"line":45,"column":78,"offset":3155},"indent":[]},"xvault":false,"sameFile":false,"to":{"fname":"general.algorithms.space-and-time"}}],"anchors":{"binary-search-tree-bst":{"type":"header","text":"Binary Search Tree (BST)","value":"binary-search-tree-bst","line":12,"column":0,"depth":1},"logic-of-a-bst":{"type":"header","text":"Logic of a BST","value":"logic-of-a-bst","line":26,"column":0,"depth":2},"finding-a-node-by-key":{"type":"header","text":"Finding a node by key","value":"finding-a-node-by-key","line":27,"column":0,"depth":3},"inserting-into-tree":{"type":"header","text":"Inserting into tree","value":"inserting-into-tree","line":33,"column":0,"depth":3},"advantages":{"type":"header","text":"Advantages","value":"advantages","line":46,"column":0,"depth":4},"traversal-types":{"type":"header","text":"Traversal types","value":"traversal-types","line":53,"column":0,"depth":3},"storing-a-bst":{"type":"header","text":"\"Storing\" a BST","value":"storing-a-bst","line":58,"column":0,"depth":3}},"children":[],"parent":"4lEin54l6IUwYZFNsijVg","data":{}},"body":"<h1 id=\"binary\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#binary\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>Binary</h1>\n<p>Each node has at most 2 children (referred to ask <em>left child</em> and <em>right child</em>).</p>\n<p>We can break a binary tree down into the left subtree and the right subtree.</p>\n<h1 id=\"binary-search-tree-bst\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#binary-search-tree-bst\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>Binary Search Tree (BST)</h1>\n<p>A binary tree is a BST if the key of the node is greater than all the nodes in its left subtree and is smaller than all the nodes in its right subtree.\nA binary tree is a BST if:</p>\n<ul>\n<li>the key of each node in the left subtree is <em>less than</em> all the nodes in the right subtree, and</li>\n<li>the key of each node in the right subtree is <em>more than</em> all the nodes in the left subtree</li>\n<li>the root key is between the largest key in the left subtree and the smallest key in the right subtree\n<ul>\n<li>in other works, the root key serves as the dividing point.</li>\n</ul>\n</li>\n</ul>\n<p>The following is a BST, because there are no nodes in the left subtree that are greater than any node in the right subtree.\n<img src=\"/Digital-Garden/assets/images/2021-10-07-06-54-40.png\"></p>\n<p>The following is <em>not</em> a BST, since there is a node with key 51 in the left subtree of 50 which breaks our invariant.\n<img src=\"/Digital-Garden/assets/images/2021-10-07-06-57-26.png\"></p>\n<h2 id=\"logic-of-a-bst\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#logic-of-a-bst\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>Logic of a BST</h2>\n<h3 id=\"finding-a-node-by-key\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#finding-a-node-by-key\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>Finding a node by key</h3>\n<ol>\n<li>Compare current node's key with X. If it's equal, we've found the key. All done.</li>\n<li>If X is less than node's key, we start looking at node's left subtree. It's because we know that right subtree cannot contain anything greater than X.</li>\n<li>If X is greater than node's key, we start looking in the right subtree.</li>\n<li>We repeat this process until we find the key or we reach the leaf node. If we reach the leaf node and haven't found the key as yet, we return not found.</li>\n</ol>\n<h3 id=\"inserting-into-tree\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#inserting-into-tree\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>Inserting into tree</h3>\n<p>New nodes are <em>always</em> leaf nodes. Following the logic of left children being smaller and right children being larger, we start searching a key from the root until we hit a leaf node. Once a leaf node is found, the new node is added as a child of the leaf node.</p>\n<ul>\n<li>Therefore, there is only one correct location for the node to be, which is dependent on the key.</li>\n</ul>\n<p>Assume we want to insert a node with key <code>K</code>. Starting at the root,</p>\n<ol>\n<li>Compare current node's key with <code>k</code>.</li>\n<li>If <code>k</code> is less than the current node,\n<ul>\n<li>If left child of current node is <code>null</code>, we insert <code>k</code> as the left child of current node and return.</li>\n<li>If the left child is not <code>null</code>, the left child becomes the new current node, and we repeat the process from step 1.</li>\n</ul>\n</li>\n<li>If <code>k</code> is greater than the current node,\n<ul>\n<li>If right child of current node is <code>null</code>, we insert <code>k</code> as the right child of the current node and return.</li>\n<li>If the right child is not <code>null</code>, the right child becomes the new current node, and we repeat the process from step 1.</li>\n</ul>\n</li>\n</ol>\n<h4 id=\"advantages\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#advantages\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>Advantages</h4>\n<p>Binary trees are useful for accessing nodes based on their key or value. When labelled like this, we can implement a Binary Search Tree (for efficient searching/sorting/min/maxing).</p>\n<p>Binary search trees allow binary search for fast lookup, addition and removal of data items, and can be used to implement dynamic sets and lookup tables.</p>\n<ul>\n<li>with the way that the nodes of a BST are arranged, each comparison skips ~half the remaining tree.\n<ul>\n<li>this results in a <a href=\"/Digital-Garden/notes/kh4pnGNcrtlixB0ThQuBq\">time complexity</a> that is logarithmic (<code>O(log n)</code>), making it much faster than the linear time required to find items in an unsorted array, but slower than finding items in a hash table.</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"traversal-types\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#traversal-types\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>Traversal types</h3>\n<p>In-order traversals are performed on each node by processing the left subtree, then the node itself, then the right subtree.\nPre-order traversal\nPost-order traversal</p>\n<h3 id=\"storing-a-bst\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#storing-a-bst\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>\"Storing\" a BST</h3>\n<p>store both Inorder and Preorder traversals. This solution requires space twice the size of Binary Tree.</p>","noteIndex":{"id":"olZIVfSs2uLLr3BppFh4K","title":"Root","desc":"","updated":1618676699718,"created":1615482407722,"custom":{"nav_order":0,"permalink":"/"},"fname":"root","type":"note","vault":{"fsPath":"../main/tech","name":"tech"},"contentHash":"777fb4dab9bcf63cbfe772245d7e4871","links":[],"anchors":{"digital-garden":{"type":"header","text":"Digital Garden","value":"digital-garden","line":8,"column":0,"depth":1}},"children":["zFMjbn3xihVNHjUIdZCD1","IK6NOKemuDjhfstJBovKL","RS8qp1GxwtiJopCUHTTtq","ZaTr28eWk1DrXOEsc1YVb","Vi0WYVLZunVM9iR8XZJn3","ngAbg7gluvbt1bY1UIRsi","RCPPXSakm5TvKka8kOmVp","MPx8ykTP57I40WTZvTP7f","ZU5WmdTG1bHoE8RcmZXZG","jqWiyYJff92RjXuUQt9PQ","KihijM8OQvZ4pASkkhqzL","F9vyqvls3OBCujtukqKhy","facc2b01-755a-409f-99f6-57bef2d1501f","m5ov42Vm6mR7RQWTvl1NW","YYt62mSW964cwb5nP0hva","PZxxZ4iESzSlbbHJKxuAZ","UDu62Pa6BaRqlG8uGoMhy","nMCtMXVvjBsJk3iw1zoIO","ANfx9Z4a6ZA0uJuSHtbIJ","BkG557LKUYbH1DnxprEVT","1TaH8zDTM98FZ9SYaeXLM","dc79799f-a55d-48ab-a8be-c48adb1b19c0","f6feef57-b8f5-451f-a09a-7b63f6a07183","4sz47Y0LKs1Si73rWtyyh","5a9fb1df-478e-4687-9be0-5cb97e61ec57","1374e9e9-1cbc-4e1f-b1ca-66b8569533dd","f529cc34-aba0-45ca-ad7e-02ddda318941","0zcauha3il2NqtxZazIo7","9bbd6f68-03b2-41f4-92e4-2ca313e8b450","5a2ab598-fa7e-4471-8bda-9f5831b679ae","uV6w4mZPoohWyZV4Xaad0","RgE0mZLaUjPftFPZsiAoe","mytCOts26Pidush65tdRW","fwUzxfLSPMH1eL8oBoLWx","TbW7PM9bg1y5TGkiWwQ8b","xiSIDeEtIc8X0lpUQlppI","0jxgntiLNHWFuCbzqtFGF","GkdMprLUe4QQULBxmGN6V","4SYc6v5hxY5g6Ip6kjpwO","fqVQpS9FBiXgKsZX3R3sJ","L5JUZlGAGvTxrsEBB7DY8","963c4b54-02bd-4943-a15f-52cf59ffd0f4","TeTedoeS2LdHPR632eCpM","e65188a1-177e-4ab2-99f9-75f85d537621","fajYnbVhCRDi74xn0H30R","bArGdGwqo3iFkyKMyE7qR","4Dcp7gbEVoLLgfu7bXFai","5d700782-fb81-416e-83f9-5dd88260e350","zubgzhNFE6KlTgXcjTz6O","8lpdfWa0cbSq1XJQbcYcY","17I8ZksXvqCH1mRtZDjHp","kF916Ow84qpJJeMRkWMIo","tMLkLcrIHHBz56xVmBLkP","CSePBQ6q7qhowKESqVwt7","laZ4OfLhZNK1Kuy6GaWUr","z5IJblOknQhMzZ5QZh4ye","N36FHxfxzwJfxDY3miWyX","3bb25f58-2b50-4fa3-af55-48ea9f88a081","aOqNcxZh8qN4MoBJcvGTc","u93Rz4fEWGu6VBR30Zraf","9hjMHnKvYT4jLKvuDSXaV","LgW7mTIALODoXc54B3p6S","UYPxfHBFWX7fb6hHU5bB6","qxSOd6SPN8qf9ZUojVFDX","WQoMTf6VXBaxCgksXAVsj","2Mw4XgfyCHXHNOX5yoCIY","UFrwsXzC1yr7Ge8FF8Vbo","a8edc4ac-028b-40ec-872a-e4a005b04b2a","0XJqmcdtcMZu66glBI5O8","lK8r8BXS4ThiUTe4xKIZe","93de42ca-53ea-460a-baa7-b9ec5c47cb1e","Rxs2jaGpdFzqYtP7lAJFJ","aO8W81Z0PyIb6Hs7nOHPW","I01hENHnh8Tqu3Ok8sLzG","evqsPNutOaZ8hcBCqxFQu","zhhxcjZUHdU8uRLwGb9Zh","G1aFACZB2ooWGMGwyd3ZW","YWy1C4tgoaCcw1m8JJsr7","Szj3o5iaNxPpesiCqwrbu","XhvCDW3fIw6h6MhY5ticq","Q70g7SusFZBQXzkuQifv4","AzfWDH3wp7jFpL2EYxBcW","y0fwpZ9qMqirsLiFyOciU","ZF8xj8wwDUqKlrwTrCFZ1","tAJvhqhdfyZZa87QHq1TU","4hRmipi8lxpBLyzWu5JVB","iTg0C7QjvnmqBZeEigJNs","3babc3d2-79ae-470a-9c06-ab8bba2e684e","bF3UsMFya3fMeXWDspVov","ULkfbL9WpktbVYnzhl6Jw","PpNOO8JYWe6dM8wruSa7x","di40pCxDn7IiqE8lFdD46","rmW0mkerqV35I8QPji6lM","3IFIK1ByzeIxZCByryGLN","iImkYAKfkw3beAl6pLbDn","tho65KN0ZpjQlVvP1fEzM","ecDe8DNWrkeQTwpTEvHje","Yqhdd9mSJGN7OJOeyoSD2","NEhsoOfR7J6o01ielAuUm","Ws5tah8tpeyn9tK8VBTg8","Bqpifx2HX3vjLhX9yvhTV","gWAg15uBJgkS2B0wcpMAa","l7V3v2ep1YdDCt7DOr7Ci","yM2PJBdqJnHpD63cPA6sW","qn0bre7eLbi3QMbCfWkUi","fSu0KxFL41IRouotqmbHs","0gtg24Mj1a1bQFPRGQNlO","7iQPBMltLPLbFEz2qbjPu","yoh4pwoXcfELInGKRdYf6","dCGCWXgAmiOZXbdULT1m6","jMavlje07sNa6hSEIE8WA","Xxm0JE4dKHxrQAaZfzvxD","PAEBZCyFBZJyR7OoMZ41E","PQ6km8RgRCuyICBPOYz8f","2bhftt8rGuxYu4pFgNqru","hjYIZpHQWuXfeEoGeJEKW","K2M9bQqVq2eQfm29eslKL","X8obW1iKwYsvNgKWGyCzy","yJwSC7hqYIezTFHf5i0Ev","c4Z7ETcOHUILRMH32Sfjw","qiR6dIu857b9M9kTqjOyK","8vflbCVkwZtYcqdDDTNAz","Ku1OgHMhELajzo61Gx7ye","LUrfhDWo8wuwZu7CN9TV8","osu6JGOnvXJ5gt3tpqWZY","1a6173cd-cf13-4b34-a522-8350bf9a364f","ZgCUp366YrF2Tyky2NT73","S2sBltrPfd8a7ICuD7CuH","oWCuBXOg6JWfZzjmKxmNl","jOmhZ8ovLYTPbpM1vqSDx","FraC6xzLy1ei91l1ICyc9","6ceBas2RE9Q4787GDngH7","734cd78d-0bc9-426b-803d-1efc84dfffe5","k4Bb09px6r0FxIRs49SXV","oaG3H1S9IUBO644nGZigu","Ka7agQJkUMRSWN0uFdkWK","si3z090WsiLasMhJBa1Az","ljKAVERmdEiKLK9hXGKBm","LIcuGYV0DDt1VWbvH6Sed","MgUSrpNCIwDOW4fX3vPOF","bZumdyapJ2H0wWWOmJ45i","QHXEIyeZGIGMVi5Q52UWI","i5Fya3Vzzm0rBT0ctByuo"],"parent":null,"data":{},"body":"\n# Digital Garden\n\nThis Wiki of Personal Information is organized according to domains and their\nsub-domains, along with specific implementation of those domains.\n\nFor instance, Git itself is a domain. Sub-domains of Git, would be `commit`,\n`tags`, `reflog` etc. implementations of each of those could be `cli`, `strat`\n(strategies), `inner` etc.\n\nThe goal of the wiki is to present data in a manner that is from the perspective\nof a querying user. Here, a user is a programmer wanting to get key information\nfrom a specific domain. For instance, if a user wants to use postgres functions\nand hasn't done them in a while, they should be able to query\n`postgres.functions` to see what information is available to them.\n\nThis wiki has been written with myself in mind. While learning each of these\ndomains, I have been sensitive to the \"aha\" moments and have noted down my\ninsights as they arose. I have refrained from capturing information that I\nconsidered obvious or otherwise non-beneficial to my own understanding.\n\nThe ability I hope to gain from this wiki is the ability to step away from any\ngiven domain for a long period of time, and be able to be passably useful for\nwhatever my goals are within a short period of time. Of course, this is all\nvague sounding, and really depends on the domain, along with the ends I am\ntrying to reach.\n\nTo achieve this, the system should be steadfast to:\n- be able to put information in relatively easily, without too much thought\n\trequired to make that determination.\n- be able to extract the information that we need, meaning there is a\n\thigh-degree in confidence in the location of the information. The idea is\n\tthat information loses a large amount of its value when it is unfindable.\n\tTherefore, a relatively strict ideology should be used when determining\n\twhere a piece of information belongs.\n"},"collectionChildren":null,"customHeadContent":null,"config":{"version":3,"useFMTitle":true,"useNoteTitleForLink":true,"noLegacyNoteRef":true,"mermaid":true,"useKatex":true,"dev":{"enablePreviewV2":true},"site":{"assetsPrefix":"/Digital-Garden","siteUrl":"https://tycholiz.github.io","copyAssets":true,"siteHierarchies":["root"],"siteRootDir":"docs","usePrettyRefs":true,"title":"Dendron","description":"Publishable tech notes","duplicateNoteBehavior":{"action":"useVault","payload":["tech"]},"siteLastModified":true,"gh_edit_branch":"main","usePrettyLinks":true,"siteNotesDir":"notes","siteFaviconPath":"favicon.ico","gh_edit_link":true,"gh_edit_link_text":"Edit this page on GitHub","gh_root":"docs/","gh_edit_view_mode":"edit","writeStubs":true,"siteIndex":"root"},"commands":{"lookup":{"note":{"selectionMode":"extract","confirmVaultOnCreate":false,"leaveTrace":false}},"insertNote":{"initialValue":"templates"},"insertNoteLink":{"aliasMode":"none","enableMultiSelect":false},"insertNoteIndex":{"enableMarker":false},"randomNote":{}},"workspace":{"dendronVersion":"0.67.1","vaults":[{"fsPath":"../main/tech","name":"tech"}],"journal":{"dailyDomain":"daily","name":"journal","dateFormat":"y.MM.dd","addBehavior":"childOfDomain"},"scratch":{"name":"scratch","dateFormat":"y.MM.dd.HHmmss","addBehavior":"asOwnDomain"},"graph":{"zoomSpeed":1},"enableAutoCreateOnDefinition":false,"enableXVaultWikiLink":false,"enableRemoteVaultInit":true,"workspaceVaultSyncMode":"noCommit","enableAutoFoldFrontmatter":true,"maxPreviewsCached":10,"maxNoteLength":204800,"task":{"name":"","dateFormat":"","addBehavior":"childOfCurrent","statusSymbols":{"":" ","wip":"w","done":"x","assigned":"a","moved":"m","blocked":"b","delegated":"l","dropped":"d","pending":"y"},"prioritySymbols":{"H":"high","M":"medium","L":"low"},"todoIntegration":false,"createTaskSelectionType":"selection2link"},"enableUserTags":true,"enableHashTags":true},"usePrettyRefs":true}},"__N_SSG":true}