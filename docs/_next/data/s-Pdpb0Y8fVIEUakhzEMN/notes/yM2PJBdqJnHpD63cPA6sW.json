{"pageProps":{"note":{"id":"yM2PJBdqJnHpD63cPA6sW","title":"Regex","desc":"","updated":1638292647016,"created":1615072428892,"custom":{},"fname":"regex","type":"note","vault":{"fsPath":"../main/tech","name":"tech"},"contentHash":"00c59628b0e880bafc9ecd85d36eca26","links":[],"anchors":{"the-eager-regex-engine":{"type":"header","text":"The Eager Regex engine","value":"the-eager-regex-engine","line":10,"column":0,"depth":3},"implementing-business-logic-in-regex":{"type":"header","text":"Implementing Business Logic in Regex","value":"implementing-business-logic-in-regex","line":29,"column":0,"depth":3},"match-vs-pattern":{"type":"header","text":"Match vs pattern","value":"match-vs-pattern","line":39,"column":0,"depth":3},"different-flavors-of-regex":{"type":"header","text":"Different flavors of Regex","value":"different-flavors-of-regex","line":48,"column":0,"depth":2},"bre":{"type":"header","text":"BRE","value":"bre","line":55,"column":0,"depth":4},"terms":{"type":"header","text":"Terms","value":"terms","line":66,"column":0,"depth":2},"useful-regex-patterns":{"type":"header","text":"Useful Regex Patterns","value":"useful-regex-patterns","line":71,"column":0,"depth":1}},"children":["w2VA5YkzLJzSw1JaxaFXL","GDfm3P5Bmk2UIW7VXqOtQ","nzN1gIEjllvdUknO4s40W","qGTAOUjURzlaW48DPjCLB","5fsrbU0bsjDTgusUDdDqa","midPuyHDHxnZW01AbRXde","bVQ4RQYN9p4GVYz9rmdtw"],"parent":"olZIVfSs2uLLr3BppFh4K","data":{}},"body":"<h1 id=\"regex\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#regex\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>Regex</h1>\n<p>Regex is the art of defining a string format. This format could be as simple as a literal string (e.g. the word \"email\"), or it could be as complex as the pattern that an email address follows.</p>\n<h3 id=\"the-eager-regex-engine\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#the-eager-regex-engine\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>The Eager Regex engine</h3>\n<p>Regex is eager, meaning it will always return the leftmost match even if there is a better match to be found later.</p>\n<ul>\n<li>put another way, the engine is “eager” to report a match.</li>\n<li>ex. if we were looking for the word <code>cat</code> in the sentence \"He captured a catfish for his cat.\", it would match the substring \"cat\" of the whole word \"catfish\", even though there is a single word \"cat\" at the end of the sentence. This shows how the regex engine returns the leftmost match; not the best match.</li>\n</ul>\n<p>Imagine we used an alternation to match one of multiple strings: <code>Get|GetValue|Set|SetValue</code>. Because</p>\n<ol>\n<li>The engine walks through the regex, attempting to match the next token (ie. character or character class) in the regex to the next character.</li>\n<li>If a match is found, the engine advances through the regex and the subject string.</li>\n<li>If a token fails to match, the engine backtracks to a previous position in the regex and the subject string where it can try a different path through the regex.</li>\n</ol>\n<p>A regex engine always returns the leftmost match, even if a “better” match could be found later:</p>\n<ol>\n<li>When applying a regex to a string, the engine starts at the first character of the string.</li>\n<li>It tries all possible permutations of the regular expression at the first character.</li>\n<li>Only if all possibilities have been tried and found to fail, does the engine continue with the second character in the text.</li>\n<li>Again, it tries all possible permutations of the regex, in exactly the same order. The result is that the regex engine returns the leftmost match.</li>\n</ol>\n<p><a href=\"https://www.regular-expressions.info/engine.html\">source</a></p>\n<h3 id=\"implementing-business-logic-in-regex\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#implementing-business-logic-in-regex\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>Implementing Business Logic in Regex</h3>\n<p>Consider that Regex can be used to implement business logic. For instance, consider the following Regex:</p>\n<pre><code>[0-9]{1,2}(\\.\\d+)? MB\n</code></pre>\n<p>This Regex will match <code>25 MB</code>, <code>3 MB</code>, <code>7.45 MB</code>, but not <code>100 MB</code>. By using <code>{1,2}</code>, we've limited our search to matches that are less than 100 MB.</p>\n<hr>\n<h3 id=\"match-vs-pattern\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#match-vs-pattern\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>Match vs pattern</h3>\n<ul>\n<li><code>pattern</code> - the regex text that we type into the search field</li>\n<li><code>match</code> - any text in the document that is highlighted as a result of the search</li>\n</ul>\n<hr>\n<p>While there are many implementations of regex that differ sometimes slightly, there are basically only two kinds of regular expression engines: text-directed engines, and regex-directed engines, with nearly all modern regex flavors are based on regex-directed engines</p>\n<ul>\n<li>certain very useful features, such as lazy quantifiers, backreferences, atomic grouping, possessive quantifiers etc., can only be implemented in regex-directed engines.</li>\n</ul>\n<h2 id=\"different-flavors-of-regex\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#different-flavors-of-regex\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>Different flavors of Regex</h2>\n<p>The \"normal\" regex is Perl-Compatible Regex (PCRE)</p>\n<ul>\n<li>may be contrasted with Basic Regular Expressions (BRE)</li>\n<li>Vim Regex largely follows BRE</li>\n</ul>\n<p>The main difference between the two is that BRE tends to treat more characters as literals - an \"a\" is an \"a\", but also a \"(\" is a \"(\", not a special character - and so involves more backslashes to give them \"special\" meaning.</p>\n<h4 id=\"bre\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#bre\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>BRE</h4>\n<ul>\n<li>\n<p><code>\\V</code> Verbatim Switch - only <code>\\</code> has special meaning (ie. very nomagic)</p>\n<ul>\n<li>prevent regex symbols from taking over - <code>/\\Va.k.a</code> (equivalent to <code>/a\\.k\\.a\\.</code>)</li>\n<li>in regex, <code>.</code> means \"match any character\". making a verbatim search removes that functionality</li>\n<li>when we use <code>\\V</code>, it means for the following search, only <code>\\</code> will have a special meaning</li>\n</ul>\n</li>\n<li>\n<p><code>\\v</code> Literal Switch - all characters (except word characters (<strong>[a-zA-Z_]</strong>)) have special meaning (ie. very magic)</p>\n</li>\n<li>\n<p>delimit words - since the word \"the\" appears in \"these\", if we wanted to just search for the word \"the\", we can use delimiters: <code>/\\v&#x3C;the></code></p>\n</li>\n<li>\n<p>ignore case - <code>/search\\c</code></p>\n</li>\n<li>\n<p>enforce case - <code>/search\\C</code></p>\n</li>\n</ul>\n<h2 id=\"terms\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#terms\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>Terms</h2>\n<ul>\n<li><strong>magic</strong> means we don't have to escape a character for it to take on its special meaning. <strong>nomagic</strong> means we have to escape, because otherwise the character will be taken literally\n<ul>\n<li><strong><em>ex.</em></strong> with magic, <code>.</code> will mean \"stand in for any character\". with nomagic, it will literally mean \"match the <code>.</code> character\"</li>\n<li>this makes sense, because with magic, a lot of cool stuff is happening that we have no idea how it's being done. Without magic, it's just looking for a character</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"useful-regex-patterns\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#useful-regex-patterns\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>Useful Regex Patterns</h1>\n<p><code>'\\{\\s.*ListView.*from\\s.react-native.'</code> - search for a non-default exported module from a specific module</p>\n<hr>\n<h2 id=\"children\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#children\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>Children</h2>\n<ol>\n<li><a href=\"/Digital-Garden/notes/w2VA5YkzLJzSw1JaxaFXL\">Anchors</a></li>\n<li><a href=\"/Digital-Garden/notes/GDfm3P5Bmk2UIW7VXqOtQ\">Backreferences</a></li>\n<li><a href=\"/Digital-Garden/notes/nzN1gIEjllvdUknO4s40W\">Character Class</a></li>\n<li><a href=\"/Digital-Garden/notes/qGTAOUjURzlaW48DPjCLB\">Cook</a></li>\n<li><a href=\"/Digital-Garden/notes/5fsrbU0bsjDTgusUDdDqa\">Lookarounds</a></li>\n<li><a href=\"/Digital-Garden/notes/midPuyHDHxnZW01AbRXde\">Quantifiers</a></li>\n<li><a href=\"/Digital-Garden/notes/bVQ4RQYN9p4GVYz9rmdtw\">Special Characters</a></li>\n</ol>","noteIndex":{"id":"olZIVfSs2uLLr3BppFh4K","title":"Root","desc":"","updated":1618676699718,"created":1615482407722,"custom":{"nav_order":0,"permalink":"/"},"fname":"root","type":"note","vault":{"fsPath":"../main/tech","name":"tech"},"contentHash":"777fb4dab9bcf63cbfe772245d7e4871","links":[],"anchors":{"digital-garden":{"type":"header","text":"Digital Garden","value":"digital-garden","line":8,"column":0,"depth":1}},"children":["zFMjbn3xihVNHjUIdZCD1","IK6NOKemuDjhfstJBovKL","RS8qp1GxwtiJopCUHTTtq","ZaTr28eWk1DrXOEsc1YVb","Vi0WYVLZunVM9iR8XZJn3","ngAbg7gluvbt1bY1UIRsi","RCPPXSakm5TvKka8kOmVp","MPx8ykTP57I40WTZvTP7f","ZU5WmdTG1bHoE8RcmZXZG","jqWiyYJff92RjXuUQt9PQ","KihijM8OQvZ4pASkkhqzL","F9vyqvls3OBCujtukqKhy","facc2b01-755a-409f-99f6-57bef2d1501f","m5ov42Vm6mR7RQWTvl1NW","YYt62mSW964cwb5nP0hva","PZxxZ4iESzSlbbHJKxuAZ","UDu62Pa6BaRqlG8uGoMhy","nMCtMXVvjBsJk3iw1zoIO","ANfx9Z4a6ZA0uJuSHtbIJ","BkG557LKUYbH1DnxprEVT","1TaH8zDTM98FZ9SYaeXLM","dc79799f-a55d-48ab-a8be-c48adb1b19c0","f6feef57-b8f5-451f-a09a-7b63f6a07183","4sz47Y0LKs1Si73rWtyyh","5a9fb1df-478e-4687-9be0-5cb97e61ec57","1374e9e9-1cbc-4e1f-b1ca-66b8569533dd","f529cc34-aba0-45ca-ad7e-02ddda318941","0zcauha3il2NqtxZazIo7","9bbd6f68-03b2-41f4-92e4-2ca313e8b450","5a2ab598-fa7e-4471-8bda-9f5831b679ae","uV6w4mZPoohWyZV4Xaad0","RgE0mZLaUjPftFPZsiAoe","mytCOts26Pidush65tdRW","fwUzxfLSPMH1eL8oBoLWx","TbW7PM9bg1y5TGkiWwQ8b","xiSIDeEtIc8X0lpUQlppI","0jxgntiLNHWFuCbzqtFGF","GkdMprLUe4QQULBxmGN6V","4SYc6v5hxY5g6Ip6kjpwO","fqVQpS9FBiXgKsZX3R3sJ","L5JUZlGAGvTxrsEBB7DY8","963c4b54-02bd-4943-a15f-52cf59ffd0f4","TeTedoeS2LdHPR632eCpM","e65188a1-177e-4ab2-99f9-75f85d537621","fajYnbVhCRDi74xn0H30R","bArGdGwqo3iFkyKMyE7qR","4Dcp7gbEVoLLgfu7bXFai","5d700782-fb81-416e-83f9-5dd88260e350","zubgzhNFE6KlTgXcjTz6O","8lpdfWa0cbSq1XJQbcYcY","17I8ZksXvqCH1mRtZDjHp","kF916Ow84qpJJeMRkWMIo","tMLkLcrIHHBz56xVmBLkP","CSePBQ6q7qhowKESqVwt7","laZ4OfLhZNK1Kuy6GaWUr","z5IJblOknQhMzZ5QZh4ye","N36FHxfxzwJfxDY3miWyX","3bb25f58-2b50-4fa3-af55-48ea9f88a081","aOqNcxZh8qN4MoBJcvGTc","u93Rz4fEWGu6VBR30Zraf","9hjMHnKvYT4jLKvuDSXaV","LgW7mTIALODoXc54B3p6S","UYPxfHBFWX7fb6hHU5bB6","qxSOd6SPN8qf9ZUojVFDX","WQoMTf6VXBaxCgksXAVsj","2Mw4XgfyCHXHNOX5yoCIY","UFrwsXzC1yr7Ge8FF8Vbo","a8edc4ac-028b-40ec-872a-e4a005b04b2a","0XJqmcdtcMZu66glBI5O8","lK8r8BXS4ThiUTe4xKIZe","93de42ca-53ea-460a-baa7-b9ec5c47cb1e","Rxs2jaGpdFzqYtP7lAJFJ","aO8W81Z0PyIb6Hs7nOHPW","I01hENHnh8Tqu3Ok8sLzG","evqsPNutOaZ8hcBCqxFQu","zhhxcjZUHdU8uRLwGb9Zh","G1aFACZB2ooWGMGwyd3ZW","YWy1C4tgoaCcw1m8JJsr7","Szj3o5iaNxPpesiCqwrbu","XhvCDW3fIw6h6MhY5ticq","Q70g7SusFZBQXzkuQifv4","AzfWDH3wp7jFpL2EYxBcW","y0fwpZ9qMqirsLiFyOciU","ZF8xj8wwDUqKlrwTrCFZ1","tAJvhqhdfyZZa87QHq1TU","4hRmipi8lxpBLyzWu5JVB","iTg0C7QjvnmqBZeEigJNs","3babc3d2-79ae-470a-9c06-ab8bba2e684e","bF3UsMFya3fMeXWDspVov","ULkfbL9WpktbVYnzhl6Jw","PpNOO8JYWe6dM8wruSa7x","di40pCxDn7IiqE8lFdD46","rmW0mkerqV35I8QPji6lM","3IFIK1ByzeIxZCByryGLN","iImkYAKfkw3beAl6pLbDn","tho65KN0ZpjQlVvP1fEzM","ecDe8DNWrkeQTwpTEvHje","Yqhdd9mSJGN7OJOeyoSD2","NEhsoOfR7J6o01ielAuUm","Ws5tah8tpeyn9tK8VBTg8","Bqpifx2HX3vjLhX9yvhTV","gWAg15uBJgkS2B0wcpMAa","l7V3v2ep1YdDCt7DOr7Ci","yM2PJBdqJnHpD63cPA6sW","qn0bre7eLbi3QMbCfWkUi","fSu0KxFL41IRouotqmbHs","0gtg24Mj1a1bQFPRGQNlO","7iQPBMltLPLbFEz2qbjPu","yoh4pwoXcfELInGKRdYf6","dCGCWXgAmiOZXbdULT1m6","jMavlje07sNa6hSEIE8WA","Xxm0JE4dKHxrQAaZfzvxD","PAEBZCyFBZJyR7OoMZ41E","PQ6km8RgRCuyICBPOYz8f","2bhftt8rGuxYu4pFgNqru","hjYIZpHQWuXfeEoGeJEKW","K2M9bQqVq2eQfm29eslKL","X8obW1iKwYsvNgKWGyCzy","yJwSC7hqYIezTFHf5i0Ev","c4Z7ETcOHUILRMH32Sfjw","qiR6dIu857b9M9kTqjOyK","8vflbCVkwZtYcqdDDTNAz","Ku1OgHMhELajzo61Gx7ye","LUrfhDWo8wuwZu7CN9TV8","osu6JGOnvXJ5gt3tpqWZY","1a6173cd-cf13-4b34-a522-8350bf9a364f","ZgCUp366YrF2Tyky2NT73","S2sBltrPfd8a7ICuD7CuH","oWCuBXOg6JWfZzjmKxmNl","jOmhZ8ovLYTPbpM1vqSDx","FraC6xzLy1ei91l1ICyc9","6ceBas2RE9Q4787GDngH7","734cd78d-0bc9-426b-803d-1efc84dfffe5","k4Bb09px6r0FxIRs49SXV","oaG3H1S9IUBO644nGZigu","Ka7agQJkUMRSWN0uFdkWK","si3z090WsiLasMhJBa1Az","ljKAVERmdEiKLK9hXGKBm","LIcuGYV0DDt1VWbvH6Sed","MgUSrpNCIwDOW4fX3vPOF","bZumdyapJ2H0wWWOmJ45i","QHXEIyeZGIGMVi5Q52UWI","i5Fya3Vzzm0rBT0ctByuo"],"parent":null,"data":{},"body":"\n# Digital Garden\n\nThis Wiki of Personal Information is organized according to domains and their\nsub-domains, along with specific implementation of those domains.\n\nFor instance, Git itself is a domain. Sub-domains of Git, would be `commit`,\n`tags`, `reflog` etc. implementations of each of those could be `cli`, `strat`\n(strategies), `inner` etc.\n\nThe goal of the wiki is to present data in a manner that is from the perspective\nof a querying user. Here, a user is a programmer wanting to get key information\nfrom a specific domain. For instance, if a user wants to use postgres functions\nand hasn't done them in a while, they should be able to query\n`postgres.functions` to see what information is available to them.\n\nThis wiki has been written with myself in mind. While learning each of these\ndomains, I have been sensitive to the \"aha\" moments and have noted down my\ninsights as they arose. I have refrained from capturing information that I\nconsidered obvious or otherwise non-beneficial to my own understanding.\n\nThe ability I hope to gain from this wiki is the ability to step away from any\ngiven domain for a long period of time, and be able to be passably useful for\nwhatever my goals are within a short period of time. Of course, this is all\nvague sounding, and really depends on the domain, along with the ends I am\ntrying to reach.\n\nTo achieve this, the system should be steadfast to:\n- be able to put information in relatively easily, without too much thought\n\trequired to make that determination.\n- be able to extract the information that we need, meaning there is a\n\thigh-degree in confidence in the location of the information. The idea is\n\tthat information loses a large amount of its value when it is unfindable.\n\tTherefore, a relatively strict ideology should be used when determining\n\twhere a piece of information belongs.\n"},"collectionChildren":null,"customHeadContent":null,"config":{"version":3,"useFMTitle":true,"useNoteTitleForLink":true,"noLegacyNoteRef":true,"mermaid":true,"useKatex":true,"dev":{"enablePreviewV2":true},"site":{"assetsPrefix":"/Digital-Garden","siteUrl":"https://tycholiz.github.io","copyAssets":true,"siteHierarchies":["root"],"siteRootDir":"docs","usePrettyRefs":true,"title":"Dendron","description":"Publishable tech notes","duplicateNoteBehavior":{"action":"useVault","payload":["tech"]},"siteLastModified":true,"gh_edit_branch":"main","usePrettyLinks":true,"siteNotesDir":"notes","siteFaviconPath":"favicon.ico","gh_edit_link":true,"gh_edit_link_text":"Edit this page on GitHub","gh_root":"docs/","gh_edit_view_mode":"edit","writeStubs":true,"siteIndex":"root"},"commands":{"lookup":{"note":{"selectionMode":"extract","confirmVaultOnCreate":false,"leaveTrace":false}},"insertNote":{"initialValue":"templates"},"insertNoteLink":{"aliasMode":"none","enableMultiSelect":false},"insertNoteIndex":{"enableMarker":false},"randomNote":{}},"workspace":{"dendronVersion":"0.67.1","vaults":[{"fsPath":"../main/tech","name":"tech"}],"journal":{"dailyDomain":"daily","name":"journal","dateFormat":"y.MM.dd","addBehavior":"childOfDomain"},"scratch":{"name":"scratch","dateFormat":"y.MM.dd.HHmmss","addBehavior":"asOwnDomain"},"graph":{"zoomSpeed":1},"enableAutoCreateOnDefinition":false,"enableXVaultWikiLink":false,"enableRemoteVaultInit":true,"workspaceVaultSyncMode":"noCommit","enableAutoFoldFrontmatter":true,"maxPreviewsCached":10,"maxNoteLength":204800,"task":{"name":"","dateFormat":"","addBehavior":"childOfCurrent","statusSymbols":{"":" ","wip":"w","done":"x","assigned":"a","moved":"m","blocked":"b","delegated":"l","dropped":"d","pending":"y"},"prioritySymbols":{"H":"high","M":"medium","L":"low"},"todoIntegration":false,"createTaskSelectionType":"selection2link"},"enableUserTags":true,"enableHashTags":true},"usePrettyRefs":true}},"__N_SSG":true}