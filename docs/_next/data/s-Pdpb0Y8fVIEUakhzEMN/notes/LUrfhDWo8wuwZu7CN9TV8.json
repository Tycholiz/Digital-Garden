{"pageProps":{"note":{"id":"LUrfhDWo8wuwZu7CN9TV8","title":"Testing","desc":"","updated":1638899118178,"created":1618634866362,"custom":{},"fname":"testing","type":"note","vault":{"fsPath":"../main/tech","name":"tech"},"contentHash":"4100a11d8ec57e38a2dac137988daf7b","links":[{"type":"wiki","from":{"fname":"testing","id":"LUrfhDWo8wuwZu7CN9TV8","vaultName":"tech"},"value":"testing.method.unit","alias":"unit testing","position":{"start":{"line":2,"column":51,"offset":51},"end":{"line":2,"column":87,"offset":87},"indent":[]},"xvault":false,"sameFile":false,"to":{"fname":"testing.method.unit"}},{"type":"wiki","from":{"fname":"testing","id":"LUrfhDWo8wuwZu7CN9TV8","vaultName":"tech"},"value":"testing.method.integration","alias":"integration testing","position":{"start":{"line":2,"column":89,"offset":89},"end":{"line":2,"column":139,"offset":139},"indent":[]},"xvault":false,"sameFile":false,"to":{"fname":"testing.method.integration"}},{"type":"wiki","from":{"fname":"testing","id":"LUrfhDWo8wuwZu7CN9TV8","vaultName":"tech"},"value":"testing.e2e","alias":"E2E testing","position":{"start":{"line":2,"column":141,"offset":141},"end":{"line":2,"column":168,"offset":168},"indent":[]},"xvault":false,"sameFile":false,"to":{"fname":"testing.e2e"}},{"type":"ref","from":{"fname":"testing","id":"LUrfhDWo8wuwZu7CN9TV8","vaultName":"tech"},"value":"testing.test-double","position":{"start":{"line":5,"column":1,"offset":371},"end":{"line":5,"column":25,"offset":395},"indent":[]},"xvault":false,"to":{"fname":"testing.test-double"}}],"anchors":{"test-doubles":{"type":"header","text":"Test Doubles","value":"test-doubles","line":10,"column":0,"depth":2},"making-the-test-fail-at-first":{"type":"header","text":"Making the test fail at first","value":"making-the-test-fail-at-first","line":13,"column":0,"depth":2}},"children":["DKLu1SzuRhuvwi462k0Ez","oVfbIz9jQKACNE2FyfskO","peFveWL9xMeDsanfC77Af","6rd2UlBxaM4Uc41t6VY63","ZLN1ACLozCBSkyy2qWivT","965AqO8bdqbS0Et9bKsUO"],"parent":"olZIVfSs2uLLr3BppFh4K","data":{}},"body":"<h1 id=\"testing\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#testing\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>Testing</h1>\n<p>The different strategies of testing, whether it's <a href=\"/Digital-Garden/notes/AQjiAvYdKm3JHmww0q2V6\">unit testing</a>, <a href=\"/Digital-Garden/notes/3MvwNqq5SfLk55OoIdqkH\">integration testing</a>, <a title=\"Private\" style=\"color: brown\" href=\"https://wiki.dendron.so/notes/hfyvYGJZQiUwQaaxQO27q.html\" target=\"_blank\">E2E testing (Private)</a> etc., have a common concept of a <strong>System Under Test (SUT)</strong>. In unit and integration(?) tests, it is the actual module being tested. In E2E, it is the whole flow that is being tested.</p>\n<h2 id=\"test-doubles\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#test-doubles\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>Test Doubles</h2>\n<p></p><p></p><div class=\"portal-container\">\n<div class=\"portal-head\">\n<div class=\"portal-backlink\">\n<div class=\"portal-title\">From <span class=\"portal-text-title\">Test Double</span></div>\n<a href=\"/Digital-Garden/notes/965AqO8bdqbS0Et9bKsUO\" class=\"portal-arrow\">Go to text <span class=\"right-arrow\">→</span></a>\n</div>\n</div>\n<div id=\"portal-parent-anchor\" class=\"portal-parent\" markdown=\"1\">\n<div class=\"portal-parent-fader-top\"></div>\n<div class=\"portal-parent-fader-bottom\"></div><p>Often, in order to test a module in isolation we need other modules that help the main module perform its action. In cases such as these, we need <em>test doubles</em> to stand in for the actual modules.</p>\n<p>The word “mock” is often used in an informal way to refer to Test Doubles.</p>\n<ul>\n<li>Semantically speaking, a \"real mock\" refers to the kind described below. In colloquial parlance, it refers indiscriminately to all 5.</li>\n</ul>\n<p>There are 5 types of Test Double:</p>\n<ul>\n<li><a href=\"/Digital-Garden/notes/otxChSDHzNWESFUFx6U4y\">Dummy</a> objects</li>\n<li><a href=\"/Digital-Garden/notes/KYcFflB8k11EN5OiM3Af1\">Fake</a> objects</li>\n<li><a href=\"/Digital-Garden/notes/m0KzcQACLje5KS1v61t7v\">Stubs</a></li>\n<li><a href=\"/Digital-Garden/notes/4gVYCsW8AJjv9DGE8TJdr\">Spies</a></li>\n<li><a href=\"/Digital-Garden/notes/JUu4GPp6TBnRJBbzNQbFw\">Mocks</a> are what we are talking about here: objects pre-programmed with expectations which form a specification of the calls they are expected to receive.</li>\n</ul>\n<p>All Test Doubles can and usually do state verification, but only mocks insist upon behavior verification.</p>\n<p>Test Doubles need to make the SUT believe it's talking with its real collaborators.</p>\n<p><a href=\"/Digital-Garden/notes/m0KzcQACLje5KS1v61t7v\">Stubs</a> and <a href=\"/Digital-Garden/notes/4gVYCsW8AJjv9DGE8TJdr\">Spies</a> can probably cover most use-cases for test doubles.</p>\n<p><em>\"stubs and spies are very easy to write. The IDE makes it trivial. You just point at the interface and tell the IDE to implement it. Voila! It gives you a dummy. Then you just make a simple modification and turn it into a stub or a spy. So you seldom need an actual mocking tool.\"</em></p>\n<h2 id=\"authorizer-example\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#authorizer-example\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>Authorizer example</h2>\n<p>Imagine we had a <code>System</code> class, which accepts an <code>Authorizer</code> as a parameter. That is, when we instantiate a new <code>system</code> object, it is associated with some <code>authorizer</code>. Different Test Doubles are used depending on what we want to do in the test.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">AcceptingAuthorizerStub</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Authorizer</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">public</span> <span class=\"token class-name\">Boolean</span> <span class=\"token function\">login</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> username<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> password<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">System</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token class-name\">System</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Authorizer</span> authorizer<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>authorizer <span class=\"token operator\">=</span> authorizer<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">loginCount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token comment\">//returns number of logged in users.</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>While testing the <code>System</code> class, if we:</p>\n<ul>\n<li>don't even care about the <code>authorizer</code> object (since we are not calling any of its methods within the test), we would use a dummy.</li>\n<li>wanted to simply return <code>true</code> for the <code>authorizer.login()</code> method, we would use a stub.\n<ul>\n<li>here, we just want to know that we are logged in so we can test the parts of the <code>System</code> that require us to be logged in.</li>\n</ul>\n</li>\n<li>want to assert that the <code>login()</code> method was called by the <code>authorizer</code> object, we would use a spy.</li>\n</ul>\n<hr>\n<h3 id=\"mocking-vs-stubbing\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#mocking-vs-stubbing\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>Mocking vs Stubbing</h3>\n<p>A stub is a simple fake object. It just makes sure test runs smoothly.\nA mock can be thought of as a smarter stub. You verify your test passes through it.</p>\n<p>Mocks are used to assert and should never return data, stubs are used to return data and should never assert.</p>\n<p>A Mock is interaction-based; Stubs are state-based.</p>\n<ul>\n<li>This means you don't expect from Mock to return some value, but to assume that specific order of method calls are made.</li>\n</ul>\n<p>Stubs test how your SUT handles receiving messages, mocks test how your SUT sends messages.</p>\n<p>a stub returns answers to questions. A mock also returns answers to questions, but it also verifies that the question was asked</p>\n<p>there may be several stubs in one test, but generally there is only one mock.</p>\n<p>A Stub is written with predetermined behavior.</p>\n<ul>\n<li>The idea is you would have a class that implements the dependency (abstract class or interface most likely) you are faking for testing purposes and the methods would just be stubbed out with set responses. They would not do anything fancy and you would have already written the stubbed code for it outside of your test.</li>\n</ul>\n<p>Stubs don't care that correct methods have been invoked in mock.</p>\n<p>A mock is set up with the expectations.</p>\n<ul>\n<li>Mocks in a way are determined at runtime since the code that sets the expectations has to run before they do anything.</li>\n</ul>\n<p>Tests written with mocks usually follow an initialize -> set expectations -> exercise -> verify pattern to testing. While the pre-written stub would follow an initialize -> exercise -> verify.</p>\n<p>Both mocks and stubs testing give an answer for the question: What is the result?\nTesting with mocks are also interested in: How the result has been achieved?</p>\n<h1 id=\"e-resources\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#e-resources\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>E Resources</h1>\n<p><a href=\"https://blog.cleancoder.com/uncle-bob/2014/05/14/TheLittleMocker.html\">A conversation about \"Mocking\"</a></p></div></div><p></p><p></p>\n<h2 id=\"making-the-test-fail-at-first\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#making-the-test-fail-at-first\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>Making the test fail at first</h2>\n<p>The goal of doing TDD is to turn the red bar green. The key distinction here is that before we get to the green bar, we have to have the red bar.\n\"if your tests verify your code then what verifies your tests?\". The answer is twofold:</p>\n<ul>\n<li>your tests verify the code</li>\n<li>your code verifies the tests</li>\n</ul>\n<p>The purpose of making tests fail first is to improve confidence that we don't have false negatives. That is, we don't want to be in a position where tests are passing for a reason other than the fact that our code is working properly.</p>\n<hr>\n<h2 id=\"children\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#children\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>Children</h2>\n<ol>\n<li><a href=\"/Digital-Garden/notes/6rd2UlBxaM4Uc41t6VY63\">Load Testing</a></li>\n<li><a href=\"/Digital-Garden/notes/oVfbIz9jQKACNE2FyfskO\">TDD</a></li>\n<li><a href=\"/Digital-Garden/notes/DKLu1SzuRhuvwi462k0Ez\">Test Anything Protocol</a></li>\n<li><a href=\"/Digital-Garden/notes/965AqO8bdqbS0Et9bKsUO\">Test Double</a></li>\n<li><a href=\"/Digital-Garden/notes/peFveWL9xMeDsanfC77Af\">Test Harness</a></li>\n<li><a href=\"/Digital-Garden/notes/ZLN1ACLozCBSkyy2qWivT\">Testing Methods</a></li>\n</ol>","noteIndex":{"id":"olZIVfSs2uLLr3BppFh4K","title":"Root","desc":"","updated":1618676699718,"created":1615482407722,"custom":{"nav_order":0,"permalink":"/"},"fname":"root","type":"note","vault":{"fsPath":"../main/tech","name":"tech"},"contentHash":"777fb4dab9bcf63cbfe772245d7e4871","links":[],"anchors":{"digital-garden":{"type":"header","text":"Digital Garden","value":"digital-garden","line":8,"column":0,"depth":1}},"children":["zFMjbn3xihVNHjUIdZCD1","IK6NOKemuDjhfstJBovKL","RS8qp1GxwtiJopCUHTTtq","ZaTr28eWk1DrXOEsc1YVb","Vi0WYVLZunVM9iR8XZJn3","ngAbg7gluvbt1bY1UIRsi","RCPPXSakm5TvKka8kOmVp","MPx8ykTP57I40WTZvTP7f","ZU5WmdTG1bHoE8RcmZXZG","jqWiyYJff92RjXuUQt9PQ","KihijM8OQvZ4pASkkhqzL","F9vyqvls3OBCujtukqKhy","facc2b01-755a-409f-99f6-57bef2d1501f","m5ov42Vm6mR7RQWTvl1NW","YYt62mSW964cwb5nP0hva","PZxxZ4iESzSlbbHJKxuAZ","UDu62Pa6BaRqlG8uGoMhy","nMCtMXVvjBsJk3iw1zoIO","ANfx9Z4a6ZA0uJuSHtbIJ","BkG557LKUYbH1DnxprEVT","1TaH8zDTM98FZ9SYaeXLM","dc79799f-a55d-48ab-a8be-c48adb1b19c0","f6feef57-b8f5-451f-a09a-7b63f6a07183","4sz47Y0LKs1Si73rWtyyh","5a9fb1df-478e-4687-9be0-5cb97e61ec57","1374e9e9-1cbc-4e1f-b1ca-66b8569533dd","f529cc34-aba0-45ca-ad7e-02ddda318941","0zcauha3il2NqtxZazIo7","9bbd6f68-03b2-41f4-92e4-2ca313e8b450","5a2ab598-fa7e-4471-8bda-9f5831b679ae","uV6w4mZPoohWyZV4Xaad0","RgE0mZLaUjPftFPZsiAoe","mytCOts26Pidush65tdRW","fwUzxfLSPMH1eL8oBoLWx","TbW7PM9bg1y5TGkiWwQ8b","xiSIDeEtIc8X0lpUQlppI","0jxgntiLNHWFuCbzqtFGF","GkdMprLUe4QQULBxmGN6V","4SYc6v5hxY5g6Ip6kjpwO","fqVQpS9FBiXgKsZX3R3sJ","L5JUZlGAGvTxrsEBB7DY8","963c4b54-02bd-4943-a15f-52cf59ffd0f4","TeTedoeS2LdHPR632eCpM","e65188a1-177e-4ab2-99f9-75f85d537621","fajYnbVhCRDi74xn0H30R","bArGdGwqo3iFkyKMyE7qR","4Dcp7gbEVoLLgfu7bXFai","5d700782-fb81-416e-83f9-5dd88260e350","zubgzhNFE6KlTgXcjTz6O","8lpdfWa0cbSq1XJQbcYcY","17I8ZksXvqCH1mRtZDjHp","kF916Ow84qpJJeMRkWMIo","tMLkLcrIHHBz56xVmBLkP","CSePBQ6q7qhowKESqVwt7","laZ4OfLhZNK1Kuy6GaWUr","z5IJblOknQhMzZ5QZh4ye","N36FHxfxzwJfxDY3miWyX","3bb25f58-2b50-4fa3-af55-48ea9f88a081","aOqNcxZh8qN4MoBJcvGTc","u93Rz4fEWGu6VBR30Zraf","9hjMHnKvYT4jLKvuDSXaV","LgW7mTIALODoXc54B3p6S","UYPxfHBFWX7fb6hHU5bB6","qxSOd6SPN8qf9ZUojVFDX","WQoMTf6VXBaxCgksXAVsj","2Mw4XgfyCHXHNOX5yoCIY","UFrwsXzC1yr7Ge8FF8Vbo","a8edc4ac-028b-40ec-872a-e4a005b04b2a","0XJqmcdtcMZu66glBI5O8","lK8r8BXS4ThiUTe4xKIZe","93de42ca-53ea-460a-baa7-b9ec5c47cb1e","Rxs2jaGpdFzqYtP7lAJFJ","aO8W81Z0PyIb6Hs7nOHPW","I01hENHnh8Tqu3Ok8sLzG","evqsPNutOaZ8hcBCqxFQu","zhhxcjZUHdU8uRLwGb9Zh","G1aFACZB2ooWGMGwyd3ZW","YWy1C4tgoaCcw1m8JJsr7","Szj3o5iaNxPpesiCqwrbu","XhvCDW3fIw6h6MhY5ticq","Q70g7SusFZBQXzkuQifv4","AzfWDH3wp7jFpL2EYxBcW","y0fwpZ9qMqirsLiFyOciU","ZF8xj8wwDUqKlrwTrCFZ1","tAJvhqhdfyZZa87QHq1TU","4hRmipi8lxpBLyzWu5JVB","iTg0C7QjvnmqBZeEigJNs","3babc3d2-79ae-470a-9c06-ab8bba2e684e","bF3UsMFya3fMeXWDspVov","ULkfbL9WpktbVYnzhl6Jw","PpNOO8JYWe6dM8wruSa7x","di40pCxDn7IiqE8lFdD46","rmW0mkerqV35I8QPji6lM","3IFIK1ByzeIxZCByryGLN","iImkYAKfkw3beAl6pLbDn","tho65KN0ZpjQlVvP1fEzM","ecDe8DNWrkeQTwpTEvHje","Yqhdd9mSJGN7OJOeyoSD2","NEhsoOfR7J6o01ielAuUm","Ws5tah8tpeyn9tK8VBTg8","Bqpifx2HX3vjLhX9yvhTV","gWAg15uBJgkS2B0wcpMAa","l7V3v2ep1YdDCt7DOr7Ci","yM2PJBdqJnHpD63cPA6sW","qn0bre7eLbi3QMbCfWkUi","fSu0KxFL41IRouotqmbHs","0gtg24Mj1a1bQFPRGQNlO","7iQPBMltLPLbFEz2qbjPu","yoh4pwoXcfELInGKRdYf6","dCGCWXgAmiOZXbdULT1m6","jMavlje07sNa6hSEIE8WA","Xxm0JE4dKHxrQAaZfzvxD","PAEBZCyFBZJyR7OoMZ41E","PQ6km8RgRCuyICBPOYz8f","2bhftt8rGuxYu4pFgNqru","hjYIZpHQWuXfeEoGeJEKW","K2M9bQqVq2eQfm29eslKL","X8obW1iKwYsvNgKWGyCzy","yJwSC7hqYIezTFHf5i0Ev","c4Z7ETcOHUILRMH32Sfjw","qiR6dIu857b9M9kTqjOyK","8vflbCVkwZtYcqdDDTNAz","Ku1OgHMhELajzo61Gx7ye","LUrfhDWo8wuwZu7CN9TV8","osu6JGOnvXJ5gt3tpqWZY","1a6173cd-cf13-4b34-a522-8350bf9a364f","ZgCUp366YrF2Tyky2NT73","S2sBltrPfd8a7ICuD7CuH","oWCuBXOg6JWfZzjmKxmNl","jOmhZ8ovLYTPbpM1vqSDx","FraC6xzLy1ei91l1ICyc9","6ceBas2RE9Q4787GDngH7","734cd78d-0bc9-426b-803d-1efc84dfffe5","k4Bb09px6r0FxIRs49SXV","oaG3H1S9IUBO644nGZigu","Ka7agQJkUMRSWN0uFdkWK","si3z090WsiLasMhJBa1Az","ljKAVERmdEiKLK9hXGKBm","LIcuGYV0DDt1VWbvH6Sed","MgUSrpNCIwDOW4fX3vPOF","bZumdyapJ2H0wWWOmJ45i","QHXEIyeZGIGMVi5Q52UWI","i5Fya3Vzzm0rBT0ctByuo"],"parent":null,"data":{},"body":"\n# Digital Garden\n\nThis Wiki of Personal Information is organized according to domains and their\nsub-domains, along with specific implementation of those domains.\n\nFor instance, Git itself is a domain. Sub-domains of Git, would be `commit`,\n`tags`, `reflog` etc. implementations of each of those could be `cli`, `strat`\n(strategies), `inner` etc.\n\nThe goal of the wiki is to present data in a manner that is from the perspective\nof a querying user. Here, a user is a programmer wanting to get key information\nfrom a specific domain. For instance, if a user wants to use postgres functions\nand hasn't done them in a while, they should be able to query\n`postgres.functions` to see what information is available to them.\n\nThis wiki has been written with myself in mind. While learning each of these\ndomains, I have been sensitive to the \"aha\" moments and have noted down my\ninsights as they arose. I have refrained from capturing information that I\nconsidered obvious or otherwise non-beneficial to my own understanding.\n\nThe ability I hope to gain from this wiki is the ability to step away from any\ngiven domain for a long period of time, and be able to be passably useful for\nwhatever my goals are within a short period of time. Of course, this is all\nvague sounding, and really depends on the domain, along with the ends I am\ntrying to reach.\n\nTo achieve this, the system should be steadfast to:\n- be able to put information in relatively easily, without too much thought\n\trequired to make that determination.\n- be able to extract the information that we need, meaning there is a\n\thigh-degree in confidence in the location of the information. The idea is\n\tthat information loses a large amount of its value when it is unfindable.\n\tTherefore, a relatively strict ideology should be used when determining\n\twhere a piece of information belongs.\n"},"collectionChildren":null,"customHeadContent":null,"config":{"version":3,"useFMTitle":true,"useNoteTitleForLink":true,"noLegacyNoteRef":true,"mermaid":true,"useKatex":true,"dev":{"enablePreviewV2":true},"site":{"assetsPrefix":"/Digital-Garden","siteUrl":"https://tycholiz.github.io","copyAssets":true,"siteHierarchies":["root"],"siteRootDir":"docs","usePrettyRefs":true,"title":"Dendron","description":"Publishable tech notes","duplicateNoteBehavior":{"action":"useVault","payload":["tech"]},"siteLastModified":true,"gh_edit_branch":"main","usePrettyLinks":true,"siteNotesDir":"notes","siteFaviconPath":"favicon.ico","gh_edit_link":true,"gh_edit_link_text":"Edit this page on GitHub","gh_root":"docs/","gh_edit_view_mode":"edit","writeStubs":true,"siteIndex":"root"},"commands":{"lookup":{"note":{"selectionMode":"extract","confirmVaultOnCreate":false,"leaveTrace":false}},"insertNote":{"initialValue":"templates"},"insertNoteLink":{"aliasMode":"none","enableMultiSelect":false},"insertNoteIndex":{"enableMarker":false},"randomNote":{}},"workspace":{"dendronVersion":"0.67.1","vaults":[{"fsPath":"../main/tech","name":"tech"}],"journal":{"dailyDomain":"daily","name":"journal","dateFormat":"y.MM.dd","addBehavior":"childOfDomain"},"scratch":{"name":"scratch","dateFormat":"y.MM.dd.HHmmss","addBehavior":"asOwnDomain"},"graph":{"zoomSpeed":1},"enableAutoCreateOnDefinition":false,"enableXVaultWikiLink":false,"enableRemoteVaultInit":true,"workspaceVaultSyncMode":"noCommit","enableAutoFoldFrontmatter":true,"maxPreviewsCached":10,"maxNoteLength":204800,"task":{"name":"","dateFormat":"","addBehavior":"childOfCurrent","statusSymbols":{"":" ","wip":"w","done":"x","assigned":"a","moved":"m","blocked":"b","delegated":"l","dropped":"d","pending":"y"},"prioritySymbols":{"H":"high","M":"medium","L":"low"},"todoIntegration":false,"createTaskSelectionType":"selection2link"},"enableUserTags":true,"enableHashTags":true},"usePrettyRefs":true}},"__N_SSG":true}