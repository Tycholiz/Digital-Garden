{"pageProps":{"note":{"id":"a9WtJDyCZ4NvEaAZ4p3bd","title":"Pod","desc":"","updated":1640380840995,"created":1622064644283,"custom":{},"fname":"k8s.objects.pod","type":"note","vault":{"fsPath":"../main/tech","name":"tech"},"contentHash":"24ed4406658a5d3784c47f9c1667d790","links":[{"type":"wiki","from":{"fname":"k8s.objects.pod","id":"a9WtJDyCZ4NvEaAZ4p3bd","vaultName":"tech"},"value":"k8s.components.js.node.kubelet","alias":"reference","position":{"start":{"line":106,"column":1,"offset":4720},"end":{"line":106,"column":45,"offset":4764},"indent":[]},"xvault":false,"sameFile":false,"to":{"fname":"k8s.components.js.node.kubelet"}}],"anchors":{"how-many-containers-in-a-pod":{"type":"header","text":"How many containers in a pod?","value":"how-many-containers-in-a-pod","line":67,"column":0,"depth":3},"podtemplate":{"type":"header","text":"PodTemplate","value":"podtemplate","line":81,"column":0,"depth":3},"pod-scheduling":{"type":"header","text":"Pod Scheduling","value":"pod-scheduling","line":89,"column":0,"depth":2},"major-components":{"type":"header","text":"Major components","value":"major-components","line":91,"column":0,"depth":3},"api-server":{"type":"header","text":"API Server","value":"api-server","line":95,"column":0,"depth":4},"scheduler":{"type":"header","text":"Scheduler","value":"scheduler","line":104,"column":0,"depth":4},"kubelet":{"type":"header","text":"Kubelet","value":"kubelet","line":110,"column":0,"depth":4},"process-of-creating-a-pod":{"type":"header","text":"Process of creating a pod","value":"process-of-creating-a-pod","line":114,"column":0,"depth":3},"pod-definition-file":{"type":"header","text":"Pod Definition File","value":"pod-definition-file","line":127,"column":0,"depth":2}},"children":["bpkHS7t7KGHv2Ty9BfWtp"],"parent":"G8flDlvSL0SmiOVLt7fDX","data":{}},"body":"<h1 id=\"pod\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#pod\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>Pod</h1>\n<p>A Pod is a way to represent a running process in a cluster.</p>\n<ul>\n<li>Pod refers to a pod of whales or pea pod</li>\n</ul>\n<p>A pod is a collection of containers that share resources</p>\n<ul>\n<li>Though realistically, we tend to only have a single container in a Pod. We might see more than 1, but it normally isn't more than 2 or 3.</li>\n</ul>\n<p>A pod is designed to run multiple cooperative processes that could be seen as a single cohesive piece of work. This is the level of abstraction that we live at in Kubernetes.</p>\n<p>Pods are the building blocks of Kubernetes, just as containers are the building block of Docker.</p>\n<ul>\n<li>In Docker, we think in terms of processes. In Kubernetes, we think in terms of multiple processes (co-existing to perform one task)</li>\n</ul>\n<p>All the containers in a pod run on the same machine.</p>\n<ul>\n<li>That is, a pod cannot be split across multiple nodes</li>\n</ul>\n<p>A pod provides a way to set <code>.env</code> variables, mount storage, and feed other information into a container</p>\n<p>A pod encapsulates one or more containers deployed together on one host, thereby sharing the same resources (of the host)</p>\n<ul>\n<li>ex. if we have 5 containers of a mongodb service deployed, and 3 of them were on the same host (ex. same machine), those 3 together would be called a Pod</li>\n</ul>\n<p>Pods are not long-lived services. Even though Kubernetes is doing its best to ensure that the containers in a Pod are (almost) always up-and-running, the same cannot be said for Pods. In Kubernetes, containers are fault-tolerant, but pods are not.</p>\n<ul>\n<li>If a Pod fails, gets destroyed, or gets evicted from a Node, it will not be rescheduled.</li>\n<li>Similarly, if a whole node is destroyed, all the Pods on it will cease to exist.</li>\n</ul>\n<p>Each pod gets its own IP address, though it is unreliable, since pods are designed to be short-lived; so the creation of a new pod would result in a new IP</p>\n<p>When the container inside a pod exits, the pod dies too.</p>\n<p>When a container inside a pod fails, Kubernetes will create a new container based off the same image:</p>\n<pre class=\"language-sh\"><code class=\"language-sh\">$ kubectl exec -it db pkill mongod\n$ kubectl get pods\n</code></pre>\n<p>produces (note how RESTARTS is 1):</p>\n<pre><code>NAME READY STATUS  RESTARTS AGE\ndb   1/1   Running 1        13m\n</code></pre>\n<p>Everything in a pod is tightly coupled.</p>\n<p>The containers in a pod are not necessarily Docker containers, though it is the most common implementation.</p>\n<p>Normally pods are not created by hand. Instead, we depend on higher level constructs like Controllers to do that for us.</p>\n<p>Pods...</p>\n<ul>\n<li>are mortal. They are born and cannot be resurrected once they die.</li>\n<li>are not intended to run multiple instances of the same application,</li>\n</ul>\n<p>Containers within a pod...</p>\n<ul>\n<li>share an IP address and port space, and can find each other via localhost.</li>\n<li>share storage space</li>\n</ul>\n<p>In a pre-container world, being executed on the same physical or virtual machine would mean being executed on the same logical host.</p>\n<ul>\n<li>logical host would contain relatively tightly coupled code</li>\n</ul>\n<h3 id=\"how-many-containers-in-a-pod\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#how-many-containers-in-a-pod\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>How many containers in a pod?</h3>\n<p>Even though a Pod can contain any number of containers, the most common use case is to use the <strong>single-container-in-a-Pod</strong> model</p>\n<ul>\n<li>Imagine we had your express api server image and a postgres image. If we put both of these in a single pod, we would no longer be able to have different numbers of containers. For instance, we could not have 2 api containers and 1 postgres container.</li>\n</ul>\n<p>There are scenarios when having multiple containers in a Pod is a good idea. However, they are very specific and, in most cases, are based on one container that acts as the main service and the rest serving as side-cars.</p>\n<p>A frequent use case is multi-container Pods used for:</p>\n<ul>\n<li>Continuous integration (CI)</li>\n<li>Continious Delivery (CD)</li>\n<li>Continuous Deployment processes (CDP)</li>\n</ul>\n<h3 id=\"podtemplate\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#podtemplate\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>PodTemplate</h3>\n<p>When we create a pod, a hash of the PodTemplate is taken and it appended to the Pod name. This means that 2 pods created from identical PodTemplates on different machines will produce the same hash.</p>\n<ul>\n<li>This is also how Git SHAs work.</li>\n</ul>\n<p>spec: PodTemplate is in the ReplicaSet</p>\n<h2 id=\"pod-scheduling\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#pod-scheduling\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>Pod Scheduling</h2>\n<h3 id=\"major-components\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#major-components\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>Major components</h3>\n<p>There are 3 major components: API Server, Scheduler, Kubelet</p>\n<h4 id=\"api-server\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#api-server\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>API Server</h4>\n<p>Central component of the K8s cluster</p>\n<ul>\n<li>runs on the master node\n<ul>\n<li>with Minikube, both master and worker nodes are baked into the same VM. Realistically, the K8s cluster should have the two separated on different hosts.</li>\n</ul>\n</li>\n</ul>\n<p>Most of the coordination in Kubernetes consists of a component writing to the API Server resource that another component is watching. The second component will then react to changes almost immediately.</p>\n<h4 id=\"scheduler\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#scheduler\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>Scheduler</h4>\n<p>The scheduler is also running on the master node.</p>\n<ul>\n<li>Its job is to watch for unassigned pods and assign them to a node which has available resources (CPU and memory) matching Pod requirements.</li>\n</ul>\n<h4 id=\"kubelet\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#kubelet\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>Kubelet</h4>\n<p><a href=\"/Digital-Garden/notes/bRPGb7XOb1TDfZqpnf201\">reference</a></p>\n<h3 id=\"process-of-creating-a-pod\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#process-of-creating-a-pod\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>Process of creating a pod</h3>\n<p>ie. when running <code>kubectl create -f pod/db.yml</code></p>\n<ol>\n<li>kubectl (the K8s client) sends a request to the API Server, requesting the creation of a pod</li>\n<li>Since the scheduler is watching the API server for new events, it detected that there is an unassigned Pod.</li>\n<li>The scheduler decided which node to assign the Pod to and sent that information to the API server.</li>\n<li>Kubelet is also watching the API server. It detected that the Pod was assigned to the node it is running on.</li>\n<li>Kubelet sent a request to Docker requesting the creation of the containers that form the Pod. In our case, the Pod defines a single container based on the mongo image.</li>\n<li>Finally, Kubelet sent a request to the API server notifying it that the Pod was created successfully.</li>\n</ol>\n<p><img src=\"/Digital-Garden/assets/images/2021-05-28-11-22-21.png\" alt=\"Pod Scheduling Sequence\"></p>\n<h2 id=\"pod-definition-file\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#pod-definition-file\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>Pod Definition File</h2>\n<pre class=\"language-yml\"><code class=\"language-yml\"><span class=\"token comment\"># using v1 of the K8s Pods API</span>\n<span class=\"token key atrule\">apiVersion</span><span class=\"token punctuation\">:</span> v1\n<span class=\"token key atrule\">kind</span><span class=\"token punctuation\">:</span> Pod\n<span class=\"token key atrule\">metadata</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> db\n  <span class=\"token key atrule\">labels</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">type</span><span class=\"token punctuation\">:</span> db\n    <span class=\"token key atrule\">vendor</span><span class=\"token punctuation\">:</span> MongoLabs\n<span class=\"token key atrule\">spec</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">containers</span><span class=\"token punctuation\">:</span>\n  <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> db\n    <span class=\"token key atrule\">image</span><span class=\"token punctuation\">:</span> mongo<span class=\"token punctuation\">:</span><span class=\"token number\">3.3</span>\n    <span class=\"token key atrule\">command</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"mongod\"</span><span class=\"token punctuation\">]</span> <span class=\"token comment\"># the command that should be executed when the container starts</span>\n    <span class=\"token key atrule\">args</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"--rest\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"--httpinterface\"</span><span class=\"token punctuation\">]</span>\n\n</code></pre>\n<hr>\n<h2 id=\"children\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#children\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>Children</h2>\n<ol>\n<li><a href=\"/Digital-Garden/notes/bpkHS7t7KGHv2Ty9BfWtp\">CLI</a></li>\n</ol>","noteIndex":{"id":"olZIVfSs2uLLr3BppFh4K","title":"Root","desc":"","updated":1618676699718,"created":1615482407722,"custom":{"nav_order":0,"permalink":"/"},"fname":"root","type":"note","vault":{"fsPath":"../main/tech","name":"tech"},"contentHash":"777fb4dab9bcf63cbfe772245d7e4871","links":[],"anchors":{"digital-garden":{"type":"header","text":"Digital Garden","value":"digital-garden","line":8,"column":0,"depth":1}},"children":["zFMjbn3xihVNHjUIdZCD1","IK6NOKemuDjhfstJBovKL","RS8qp1GxwtiJopCUHTTtq","ZaTr28eWk1DrXOEsc1YVb","Vi0WYVLZunVM9iR8XZJn3","ngAbg7gluvbt1bY1UIRsi","RCPPXSakm5TvKka8kOmVp","MPx8ykTP57I40WTZvTP7f","ZU5WmdTG1bHoE8RcmZXZG","jqWiyYJff92RjXuUQt9PQ","KihijM8OQvZ4pASkkhqzL","F9vyqvls3OBCujtukqKhy","facc2b01-755a-409f-99f6-57bef2d1501f","m5ov42Vm6mR7RQWTvl1NW","YYt62mSW964cwb5nP0hva","PZxxZ4iESzSlbbHJKxuAZ","UDu62Pa6BaRqlG8uGoMhy","nMCtMXVvjBsJk3iw1zoIO","ANfx9Z4a6ZA0uJuSHtbIJ","BkG557LKUYbH1DnxprEVT","1TaH8zDTM98FZ9SYaeXLM","dc79799f-a55d-48ab-a8be-c48adb1b19c0","f6feef57-b8f5-451f-a09a-7b63f6a07183","4sz47Y0LKs1Si73rWtyyh","5a9fb1df-478e-4687-9be0-5cb97e61ec57","1374e9e9-1cbc-4e1f-b1ca-66b8569533dd","f529cc34-aba0-45ca-ad7e-02ddda318941","0zcauha3il2NqtxZazIo7","9bbd6f68-03b2-41f4-92e4-2ca313e8b450","5a2ab598-fa7e-4471-8bda-9f5831b679ae","uV6w4mZPoohWyZV4Xaad0","RgE0mZLaUjPftFPZsiAoe","mytCOts26Pidush65tdRW","fwUzxfLSPMH1eL8oBoLWx","TbW7PM9bg1y5TGkiWwQ8b","xiSIDeEtIc8X0lpUQlppI","0jxgntiLNHWFuCbzqtFGF","GkdMprLUe4QQULBxmGN6V","4SYc6v5hxY5g6Ip6kjpwO","fqVQpS9FBiXgKsZX3R3sJ","L5JUZlGAGvTxrsEBB7DY8","963c4b54-02bd-4943-a15f-52cf59ffd0f4","TeTedoeS2LdHPR632eCpM","e65188a1-177e-4ab2-99f9-75f85d537621","fajYnbVhCRDi74xn0H30R","bArGdGwqo3iFkyKMyE7qR","4Dcp7gbEVoLLgfu7bXFai","5d700782-fb81-416e-83f9-5dd88260e350","zubgzhNFE6KlTgXcjTz6O","8lpdfWa0cbSq1XJQbcYcY","17I8ZksXvqCH1mRtZDjHp","kF916Ow84qpJJeMRkWMIo","tMLkLcrIHHBz56xVmBLkP","CSePBQ6q7qhowKESqVwt7","laZ4OfLhZNK1Kuy6GaWUr","z5IJblOknQhMzZ5QZh4ye","N36FHxfxzwJfxDY3miWyX","3bb25f58-2b50-4fa3-af55-48ea9f88a081","aOqNcxZh8qN4MoBJcvGTc","u93Rz4fEWGu6VBR30Zraf","9hjMHnKvYT4jLKvuDSXaV","LgW7mTIALODoXc54B3p6S","UYPxfHBFWX7fb6hHU5bB6","qxSOd6SPN8qf9ZUojVFDX","WQoMTf6VXBaxCgksXAVsj","2Mw4XgfyCHXHNOX5yoCIY","UFrwsXzC1yr7Ge8FF8Vbo","a8edc4ac-028b-40ec-872a-e4a005b04b2a","0XJqmcdtcMZu66glBI5O8","lK8r8BXS4ThiUTe4xKIZe","93de42ca-53ea-460a-baa7-b9ec5c47cb1e","Rxs2jaGpdFzqYtP7lAJFJ","aO8W81Z0PyIb6Hs7nOHPW","I01hENHnh8Tqu3Ok8sLzG","evqsPNutOaZ8hcBCqxFQu","zhhxcjZUHdU8uRLwGb9Zh","G1aFACZB2ooWGMGwyd3ZW","YWy1C4tgoaCcw1m8JJsr7","Szj3o5iaNxPpesiCqwrbu","XhvCDW3fIw6h6MhY5ticq","Q70g7SusFZBQXzkuQifv4","AzfWDH3wp7jFpL2EYxBcW","y0fwpZ9qMqirsLiFyOciU","ZF8xj8wwDUqKlrwTrCFZ1","tAJvhqhdfyZZa87QHq1TU","4hRmipi8lxpBLyzWu5JVB","iTg0C7QjvnmqBZeEigJNs","3babc3d2-79ae-470a-9c06-ab8bba2e684e","bF3UsMFya3fMeXWDspVov","ULkfbL9WpktbVYnzhl6Jw","PpNOO8JYWe6dM8wruSa7x","di40pCxDn7IiqE8lFdD46","rmW0mkerqV35I8QPji6lM","3IFIK1ByzeIxZCByryGLN","iImkYAKfkw3beAl6pLbDn","tho65KN0ZpjQlVvP1fEzM","ecDe8DNWrkeQTwpTEvHje","Yqhdd9mSJGN7OJOeyoSD2","NEhsoOfR7J6o01ielAuUm","Ws5tah8tpeyn9tK8VBTg8","Bqpifx2HX3vjLhX9yvhTV","gWAg15uBJgkS2B0wcpMAa","l7V3v2ep1YdDCt7DOr7Ci","yM2PJBdqJnHpD63cPA6sW","qn0bre7eLbi3QMbCfWkUi","fSu0KxFL41IRouotqmbHs","0gtg24Mj1a1bQFPRGQNlO","7iQPBMltLPLbFEz2qbjPu","yoh4pwoXcfELInGKRdYf6","dCGCWXgAmiOZXbdULT1m6","jMavlje07sNa6hSEIE8WA","Xxm0JE4dKHxrQAaZfzvxD","PAEBZCyFBZJyR7OoMZ41E","PQ6km8RgRCuyICBPOYz8f","2bhftt8rGuxYu4pFgNqru","hjYIZpHQWuXfeEoGeJEKW","K2M9bQqVq2eQfm29eslKL","X8obW1iKwYsvNgKWGyCzy","yJwSC7hqYIezTFHf5i0Ev","c4Z7ETcOHUILRMH32Sfjw","qiR6dIu857b9M9kTqjOyK","8vflbCVkwZtYcqdDDTNAz","Ku1OgHMhELajzo61Gx7ye","LUrfhDWo8wuwZu7CN9TV8","osu6JGOnvXJ5gt3tpqWZY","1a6173cd-cf13-4b34-a522-8350bf9a364f","ZgCUp366YrF2Tyky2NT73","S2sBltrPfd8a7ICuD7CuH","oWCuBXOg6JWfZzjmKxmNl","jOmhZ8ovLYTPbpM1vqSDx","FraC6xzLy1ei91l1ICyc9","6ceBas2RE9Q4787GDngH7","734cd78d-0bc9-426b-803d-1efc84dfffe5","k4Bb09px6r0FxIRs49SXV","oaG3H1S9IUBO644nGZigu","Ka7agQJkUMRSWN0uFdkWK","si3z090WsiLasMhJBa1Az","ljKAVERmdEiKLK9hXGKBm","LIcuGYV0DDt1VWbvH6Sed","MgUSrpNCIwDOW4fX3vPOF","bZumdyapJ2H0wWWOmJ45i","QHXEIyeZGIGMVi5Q52UWI","i5Fya3Vzzm0rBT0ctByuo"],"parent":null,"data":{},"body":"\n# Digital Garden\n\nThis Wiki of Personal Information is organized according to domains and their\nsub-domains, along with specific implementation of those domains.\n\nFor instance, Git itself is a domain. Sub-domains of Git, would be `commit`,\n`tags`, `reflog` etc. implementations of each of those could be `cli`, `strat`\n(strategies), `inner` etc.\n\nThe goal of the wiki is to present data in a manner that is from the perspective\nof a querying user. Here, a user is a programmer wanting to get key information\nfrom a specific domain. For instance, if a user wants to use postgres functions\nand hasn't done them in a while, they should be able to query\n`postgres.functions` to see what information is available to them.\n\nThis wiki has been written with myself in mind. While learning each of these\ndomains, I have been sensitive to the \"aha\" moments and have noted down my\ninsights as they arose. I have refrained from capturing information that I\nconsidered obvious or otherwise non-beneficial to my own understanding.\n\nThe ability I hope to gain from this wiki is the ability to step away from any\ngiven domain for a long period of time, and be able to be passably useful for\nwhatever my goals are within a short period of time. Of course, this is all\nvague sounding, and really depends on the domain, along with the ends I am\ntrying to reach.\n\nTo achieve this, the system should be steadfast to:\n- be able to put information in relatively easily, without too much thought\n\trequired to make that determination.\n- be able to extract the information that we need, meaning there is a\n\thigh-degree in confidence in the location of the information. The idea is\n\tthat information loses a large amount of its value when it is unfindable.\n\tTherefore, a relatively strict ideology should be used when determining\n\twhere a piece of information belongs.\n"},"collectionChildren":null,"customHeadContent":null,"config":{"version":3,"useFMTitle":true,"useNoteTitleForLink":true,"noLegacyNoteRef":true,"mermaid":true,"useKatex":true,"dev":{"enablePreviewV2":true},"site":{"assetsPrefix":"/Digital-Garden","siteUrl":"https://tycholiz.github.io","copyAssets":true,"siteHierarchies":["root"],"siteRootDir":"docs","usePrettyRefs":true,"title":"Dendron","description":"Publishable tech notes","duplicateNoteBehavior":{"action":"useVault","payload":["tech"]},"siteLastModified":true,"gh_edit_branch":"main","usePrettyLinks":true,"siteNotesDir":"notes","siteFaviconPath":"favicon.ico","gh_edit_link":true,"gh_edit_link_text":"Edit this page on GitHub","gh_root":"docs/","gh_edit_view_mode":"edit","writeStubs":true,"siteIndex":"root"},"commands":{"lookup":{"note":{"selectionMode":"extract","confirmVaultOnCreate":false,"leaveTrace":false}},"insertNote":{"initialValue":"templates"},"insertNoteLink":{"aliasMode":"none","enableMultiSelect":false},"insertNoteIndex":{"enableMarker":false},"randomNote":{}},"workspace":{"dendronVersion":"0.67.1","vaults":[{"fsPath":"../main/tech","name":"tech"}],"journal":{"dailyDomain":"daily","name":"journal","dateFormat":"y.MM.dd","addBehavior":"childOfDomain"},"scratch":{"name":"scratch","dateFormat":"y.MM.dd.HHmmss","addBehavior":"asOwnDomain"},"graph":{"zoomSpeed":1},"enableAutoCreateOnDefinition":false,"enableXVaultWikiLink":false,"enableRemoteVaultInit":true,"workspaceVaultSyncMode":"noCommit","enableAutoFoldFrontmatter":true,"maxPreviewsCached":10,"maxNoteLength":204800,"task":{"name":"","dateFormat":"","addBehavior":"childOfCurrent","statusSymbols":{"":" ","wip":"w","done":"x","assigned":"a","moved":"m","blocked":"b","delegated":"l","dropped":"d","pending":"y"},"prioritySymbols":{"H":"high","M":"medium","L":"low"},"todoIntegration":false,"createTaskSelectionType":"selection2link"},"enableUserTags":true,"enableHashTags":true},"usePrettyRefs":true}},"__N_SSG":true}