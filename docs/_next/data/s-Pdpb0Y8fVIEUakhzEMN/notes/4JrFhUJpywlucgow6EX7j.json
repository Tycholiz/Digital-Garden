{"pageProps":{"note":{"id":"4JrFhUJpywlucgow6EX7j","title":"Microservice","desc":"","updated":1640029120138,"created":null,"custom":{},"fname":"general.arch.microservice","type":"note","vault":{"fsPath":"../main/tech","name":"tech"},"contentHash":"cf421aec6471157844791fd03ec53141","links":[{"type":"wiki","from":{"fname":"general.arch.microservice","id":"4JrFhUJpywlucgow6EX7j","vaultName":"tech"},"value":"general.arch.SOA","alias":"SOA","position":{"start":{"line":2,"column":47,"offset":47},"end":{"line":2,"column":71,"offset":71},"indent":[]},"xvault":false,"sameFile":false,"to":{"fname":"general.arch.SOA"}},{"from":{"fname":"gitlab","vaultName":"tech"},"type":"backlink","position":{"start":{"line":4,"column":25,"offset":127},"end":{"line":4,"column":67,"offset":169},"indent":[]},"value":"general.arch.microservice"},{"from":{"fname":"k8s","vaultName":"tech"},"type":"backlink","position":{"start":{"line":31,"column":46,"offset":3243},"end":{"line":31,"column":101,"offset":3298},"indent":[]},"value":"general.arch.microservice"},{"from":{"fname":"testing.method.contract","vaultName":"tech"},"type":"backlink","position":{"start":{"line":14,"column":42,"offset":1060},"end":{"line":14,"column":84,"offset":1102},"indent":[]},"value":"general.arch.microservice"}],"anchors":{"pros--cons":{"type":"header","text":"Pros & Cons","value":"pros--cons","line":31,"column":0,"depth":2},"pros":{"type":"header","text":"Pros","value":"pros","line":32,"column":0,"depth":3},"cons":{"type":"header","text":"Cons","value":"cons","line":46,"column":0,"depth":3},"examples":{"type":"header","text":"Examples","value":"examples","line":56,"column":0,"depth":2},"amazon-product-page":{"type":"header","text":"Amazon Product Page","value":"amazon-product-page","line":57,"column":0,"depth":3},"resources":{"type":"header","text":"Resources","value":"resources","line":68,"column":0,"depth":1}},"children":["dXN7waVmwHQopWEjPpd0j","5lMqhn3fOgwP8k1v6yODU"],"parent":"vcEILMxyfRDtHPtCLNB5Z","data":{}},"body":"<h1 id=\"microservice\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#microservice\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>Microservice</h1>\n<p>A microservice architecture is variant of the <a href=\"/Digital-Garden/notes/BX7Yh5IwYZCsV2BSxvunp\">SOA</a> structural style</p>\n<ul>\n<li>arranges an application as a collection of loosely-coupled services.</li>\n<li>services are fine-grained and the protocols are lightweight.</li>\n</ul>\n<p>goal is that teams can bring their services life independent of others, but it comes at a cost to maintain the decoupling.</p>\n<ul>\n<li>Interfaces need to be designed carefully and treated as a public API.\n<ul>\n<li>These difficulties are usually solved by either having versioned APIs, or multiple interfaces on the same service (ie. multiple commands that effectively export a documentâ€” just done in different ways)</li>\n</ul>\n</li>\n</ul>\n<p>A microservice is a self-contained piece of business functionality with clear interfaces</p>\n<ul>\n<li>through its own internal components, it may implement a layered architecture</li>\n</ul>\n<p>The architecture essentially follows the Unix philosophy of \"Do one thing and do it well\"</p>\n<p>It lends itself to a continuous delivery software development process.</p>\n<ul>\n<li>A change to a small part of the application only requires rebuilding and redeploying only one or a small number of services</li>\n</ul>\n<p>Adheres to principles such as fine-grained interfaces (to independently deployable services), business-driven development (e.g. domain-driven design).</p>\n<p>Microservice architectures are commonly adopted for cloud-native applications, serverless computing, and applications using lightweight container deployment.</p>\n<p>When implementing a microservice-based architecture, the most important technology choices are the way microservices communicate with each other (synchronous, asynchronous, UI integration) and the protocols used for the communication (RESTful HTTP, messaging, GraphQL ...). Things like language and infrastructure don't introduce the coupling between services as you'd find in a monolithic app.</p>\n<ul>\n<li>In a traditional architecture, the choice of language impacts the whole system. This isn't the case in microservices,</li>\n</ul>\n<h2 id=\"pros--cons\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#pros--cons\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>Pros &#x26; Cons</h2>\n<h3 id=\"pros\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#pros\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>Pros</h3>\n<p>Modularity</p>\n<ul>\n<li>This makes the application easier to understand, develop, test, and become more resilient to architecture erosion. This benefit is often argued in comparison to the complexity of monolithic architectures.</li>\n</ul>\n<p>Scalability</p>\n<ul>\n<li>Since microservices are implemented and deployed independently of each other, i.e. they run within independent processes, they can be monitored and scaled independently.</li>\n</ul>\n<p>Integration of heterogeneous and legacy systems</p>\n<ul>\n<li>microservices is considered as a viable means for modernizing existing monolithic software application. There are experience reports of several companies who have successfully replaced (parts of) their existing software by microservices, or are in the process of doing so. The process for Software modernization of legacy applications is done using an incremental approach.</li>\n</ul>\n<p>Distributed development</p>\n<ul>\n<li>it parallelizes development by enabling small autonomous teams to develop, deploy and scale their respective services independently. It also allows the architecture of an individual service to emerge through continuous refactoring. Microservice-based architectures facilitate continuous integration, continuous delivery and deployment.\n<ul>\n<li>teams working on monoliths need to synchronize to deploy together.</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"cons\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#cons\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>Cons</h3>\n<ul>\n<li>Services form information barriers.</li>\n<li>Inter-service calls over a network have a higher cost in terms of network latency</li>\n<li>Testing and deployment are more complicated</li>\n<li>Moving responsibilities between services is more difficult. It may involve communication between different teams, depending on how messages are passed between each microservice.</li>\n<li>following this paradigm results in a tendency to see the microservice as the atomic unit. This can lead to too many services when the alternative of internal modularization of a more monolithic approach may lead to a simpler design.\n<ul>\n<li>To make this judgement requires understanding the overall architecture of the applications and interdependencies between components.</li>\n</ul>\n</li>\n<li>The architecture introduces additional complexity and new problems to deal with, such as network latency, message format design, Backup/Availability/Consistency (BAC), load balancing and fault tolerance\nmat design, Backup/Availability/Consistency (BAC), load balancing and fault tolerance</li>\n</ul>\n<h2 id=\"examples\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#examples\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>Examples</h2>\n<h3 id=\"amazon-product-page\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#amazon-product-page\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>Amazon Product Page</h3>\n<p>Consider that a product page on Amazon gets data from multiple distinct domains:</p>\n<ul>\n<li>Product Info Service - basic metadata about the product such as title, author, page count etc.</li>\n<li>Pricing Service - product price</li>\n<li>Order service - purchase history for product</li>\n<li>Inventory service - product availability</li>\n<li>Review service - customer reviews </li>\n</ul>\n<p>The question becomes, how do the clients access each individual service? This is more complex than what we'd have in a monorepo architecture. As such, problems are:</p>\n<ul>\n<li>each client (web, mobile) might not necessarily get the same sets of data (ex. mobile probably shows less information)</li>\n</ul>\n<h1 id=\"resources\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#resources\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>Resources</h1>\n<p><a href=\"https://microservices.io/patterns/index.html\">List of Microservice Patterns</a></p>\n<hr>\n<h2 id=\"backlinks\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#backlinks\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>Backlinks</h2>\n<ul>\n<li><a href=\"/Digital-Garden/notes/zubgzhNFE6KlTgXcjTz6O\">GitLab</a></li>\n<li><a href=\"/Digital-Garden/notes/qxSOd6SPN8qf9ZUojVFDX\">K8s</a></li>\n<li><a href=\"/Digital-Garden/notes/NfY3pvmOMzpQg8TKrUMGd\">Contract Testing</a></li>\n</ul>\n<hr>\n<h2 id=\"children\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#children\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>Children</h2>\n<ol>\n<li><a href=\"/Digital-Garden/notes/dXN7waVmwHQopWEjPpd0j\">Micro Frontend</a></li>\n<li><a href=\"/Digital-Garden/notes/5lMqhn3fOgwP8k1v6yODU\">Testing</a></li>\n</ol>","noteIndex":{"id":"olZIVfSs2uLLr3BppFh4K","title":"Root","desc":"","updated":1618676699718,"created":1615482407722,"custom":{"nav_order":0,"permalink":"/"},"fname":"root","type":"note","vault":{"fsPath":"../main/tech","name":"tech"},"contentHash":"777fb4dab9bcf63cbfe772245d7e4871","links":[],"anchors":{"digital-garden":{"type":"header","text":"Digital Garden","value":"digital-garden","line":8,"column":0,"depth":1}},"children":["zFMjbn3xihVNHjUIdZCD1","IK6NOKemuDjhfstJBovKL","RS8qp1GxwtiJopCUHTTtq","ZaTr28eWk1DrXOEsc1YVb","Vi0WYVLZunVM9iR8XZJn3","ngAbg7gluvbt1bY1UIRsi","RCPPXSakm5TvKka8kOmVp","MPx8ykTP57I40WTZvTP7f","ZU5WmdTG1bHoE8RcmZXZG","jqWiyYJff92RjXuUQt9PQ","KihijM8OQvZ4pASkkhqzL","F9vyqvls3OBCujtukqKhy","facc2b01-755a-409f-99f6-57bef2d1501f","m5ov42Vm6mR7RQWTvl1NW","YYt62mSW964cwb5nP0hva","PZxxZ4iESzSlbbHJKxuAZ","UDu62Pa6BaRqlG8uGoMhy","nMCtMXVvjBsJk3iw1zoIO","ANfx9Z4a6ZA0uJuSHtbIJ","BkG557LKUYbH1DnxprEVT","1TaH8zDTM98FZ9SYaeXLM","dc79799f-a55d-48ab-a8be-c48adb1b19c0","f6feef57-b8f5-451f-a09a-7b63f6a07183","4sz47Y0LKs1Si73rWtyyh","5a9fb1df-478e-4687-9be0-5cb97e61ec57","1374e9e9-1cbc-4e1f-b1ca-66b8569533dd","f529cc34-aba0-45ca-ad7e-02ddda318941","0zcauha3il2NqtxZazIo7","9bbd6f68-03b2-41f4-92e4-2ca313e8b450","5a2ab598-fa7e-4471-8bda-9f5831b679ae","uV6w4mZPoohWyZV4Xaad0","RgE0mZLaUjPftFPZsiAoe","mytCOts26Pidush65tdRW","fwUzxfLSPMH1eL8oBoLWx","TbW7PM9bg1y5TGkiWwQ8b","xiSIDeEtIc8X0lpUQlppI","0jxgntiLNHWFuCbzqtFGF","GkdMprLUe4QQULBxmGN6V","4SYc6v5hxY5g6Ip6kjpwO","fqVQpS9FBiXgKsZX3R3sJ","L5JUZlGAGvTxrsEBB7DY8","963c4b54-02bd-4943-a15f-52cf59ffd0f4","TeTedoeS2LdHPR632eCpM","e65188a1-177e-4ab2-99f9-75f85d537621","fajYnbVhCRDi74xn0H30R","bArGdGwqo3iFkyKMyE7qR","4Dcp7gbEVoLLgfu7bXFai","5d700782-fb81-416e-83f9-5dd88260e350","zubgzhNFE6KlTgXcjTz6O","8lpdfWa0cbSq1XJQbcYcY","17I8ZksXvqCH1mRtZDjHp","kF916Ow84qpJJeMRkWMIo","tMLkLcrIHHBz56xVmBLkP","CSePBQ6q7qhowKESqVwt7","laZ4OfLhZNK1Kuy6GaWUr","z5IJblOknQhMzZ5QZh4ye","N36FHxfxzwJfxDY3miWyX","3bb25f58-2b50-4fa3-af55-48ea9f88a081","aOqNcxZh8qN4MoBJcvGTc","u93Rz4fEWGu6VBR30Zraf","9hjMHnKvYT4jLKvuDSXaV","LgW7mTIALODoXc54B3p6S","UYPxfHBFWX7fb6hHU5bB6","qxSOd6SPN8qf9ZUojVFDX","WQoMTf6VXBaxCgksXAVsj","2Mw4XgfyCHXHNOX5yoCIY","UFrwsXzC1yr7Ge8FF8Vbo","a8edc4ac-028b-40ec-872a-e4a005b04b2a","0XJqmcdtcMZu66glBI5O8","lK8r8BXS4ThiUTe4xKIZe","93de42ca-53ea-460a-baa7-b9ec5c47cb1e","Rxs2jaGpdFzqYtP7lAJFJ","aO8W81Z0PyIb6Hs7nOHPW","I01hENHnh8Tqu3Ok8sLzG","evqsPNutOaZ8hcBCqxFQu","zhhxcjZUHdU8uRLwGb9Zh","G1aFACZB2ooWGMGwyd3ZW","YWy1C4tgoaCcw1m8JJsr7","Szj3o5iaNxPpesiCqwrbu","XhvCDW3fIw6h6MhY5ticq","Q70g7SusFZBQXzkuQifv4","AzfWDH3wp7jFpL2EYxBcW","y0fwpZ9qMqirsLiFyOciU","ZF8xj8wwDUqKlrwTrCFZ1","tAJvhqhdfyZZa87QHq1TU","4hRmipi8lxpBLyzWu5JVB","iTg0C7QjvnmqBZeEigJNs","3babc3d2-79ae-470a-9c06-ab8bba2e684e","bF3UsMFya3fMeXWDspVov","ULkfbL9WpktbVYnzhl6Jw","PpNOO8JYWe6dM8wruSa7x","di40pCxDn7IiqE8lFdD46","rmW0mkerqV35I8QPji6lM","3IFIK1ByzeIxZCByryGLN","iImkYAKfkw3beAl6pLbDn","tho65KN0ZpjQlVvP1fEzM","ecDe8DNWrkeQTwpTEvHje","Yqhdd9mSJGN7OJOeyoSD2","NEhsoOfR7J6o01ielAuUm","Ws5tah8tpeyn9tK8VBTg8","Bqpifx2HX3vjLhX9yvhTV","gWAg15uBJgkS2B0wcpMAa","l7V3v2ep1YdDCt7DOr7Ci","yM2PJBdqJnHpD63cPA6sW","qn0bre7eLbi3QMbCfWkUi","fSu0KxFL41IRouotqmbHs","0gtg24Mj1a1bQFPRGQNlO","7iQPBMltLPLbFEz2qbjPu","yoh4pwoXcfELInGKRdYf6","dCGCWXgAmiOZXbdULT1m6","jMavlje07sNa6hSEIE8WA","Xxm0JE4dKHxrQAaZfzvxD","PAEBZCyFBZJyR7OoMZ41E","PQ6km8RgRCuyICBPOYz8f","2bhftt8rGuxYu4pFgNqru","hjYIZpHQWuXfeEoGeJEKW","K2M9bQqVq2eQfm29eslKL","X8obW1iKwYsvNgKWGyCzy","yJwSC7hqYIezTFHf5i0Ev","c4Z7ETcOHUILRMH32Sfjw","qiR6dIu857b9M9kTqjOyK","8vflbCVkwZtYcqdDDTNAz","Ku1OgHMhELajzo61Gx7ye","LUrfhDWo8wuwZu7CN9TV8","osu6JGOnvXJ5gt3tpqWZY","1a6173cd-cf13-4b34-a522-8350bf9a364f","ZgCUp366YrF2Tyky2NT73","S2sBltrPfd8a7ICuD7CuH","oWCuBXOg6JWfZzjmKxmNl","jOmhZ8ovLYTPbpM1vqSDx","FraC6xzLy1ei91l1ICyc9","6ceBas2RE9Q4787GDngH7","734cd78d-0bc9-426b-803d-1efc84dfffe5","k4Bb09px6r0FxIRs49SXV","oaG3H1S9IUBO644nGZigu","Ka7agQJkUMRSWN0uFdkWK","si3z090WsiLasMhJBa1Az","ljKAVERmdEiKLK9hXGKBm","LIcuGYV0DDt1VWbvH6Sed","MgUSrpNCIwDOW4fX3vPOF","bZumdyapJ2H0wWWOmJ45i","QHXEIyeZGIGMVi5Q52UWI","i5Fya3Vzzm0rBT0ctByuo"],"parent":null,"data":{},"body":"\n# Digital Garden\n\nThis Wiki of Personal Information is organized according to domains and their\nsub-domains, along with specific implementation of those domains.\n\nFor instance, Git itself is a domain. Sub-domains of Git, would be `commit`,\n`tags`, `reflog` etc. implementations of each of those could be `cli`, `strat`\n(strategies), `inner` etc.\n\nThe goal of the wiki is to present data in a manner that is from the perspective\nof a querying user. Here, a user is a programmer wanting to get key information\nfrom a specific domain. For instance, if a user wants to use postgres functions\nand hasn't done them in a while, they should be able to query\n`postgres.functions` to see what information is available to them.\n\nThis wiki has been written with myself in mind. While learning each of these\ndomains, I have been sensitive to the \"aha\" moments and have noted down my\ninsights as they arose. I have refrained from capturing information that I\nconsidered obvious or otherwise non-beneficial to my own understanding.\n\nThe ability I hope to gain from this wiki is the ability to step away from any\ngiven domain for a long period of time, and be able to be passably useful for\nwhatever my goals are within a short period of time. Of course, this is all\nvague sounding, and really depends on the domain, along with the ends I am\ntrying to reach.\n\nTo achieve this, the system should be steadfast to:\n- be able to put information in relatively easily, without too much thought\n\trequired to make that determination.\n- be able to extract the information that we need, meaning there is a\n\thigh-degree in confidence in the location of the information. The idea is\n\tthat information loses a large amount of its value when it is unfindable.\n\tTherefore, a relatively strict ideology should be used when determining\n\twhere a piece of information belongs.\n"},"collectionChildren":null,"customHeadContent":null,"config":{"version":3,"useFMTitle":true,"useNoteTitleForLink":true,"noLegacyNoteRef":true,"mermaid":true,"useKatex":true,"dev":{"enablePreviewV2":true},"site":{"assetsPrefix":"/Digital-Garden","siteUrl":"https://tycholiz.github.io","copyAssets":true,"siteHierarchies":["root"],"siteRootDir":"docs","usePrettyRefs":true,"title":"Dendron","description":"Publishable tech notes","duplicateNoteBehavior":{"action":"useVault","payload":["tech"]},"siteLastModified":true,"gh_edit_branch":"main","usePrettyLinks":true,"siteNotesDir":"notes","siteFaviconPath":"favicon.ico","gh_edit_link":true,"gh_edit_link_text":"Edit this page on GitHub","gh_root":"docs/","gh_edit_view_mode":"edit","writeStubs":true,"siteIndex":"root"},"commands":{"lookup":{"note":{"selectionMode":"extract","confirmVaultOnCreate":false,"leaveTrace":false}},"insertNote":{"initialValue":"templates"},"insertNoteLink":{"aliasMode":"none","enableMultiSelect":false},"insertNoteIndex":{"enableMarker":false},"randomNote":{}},"workspace":{"dendronVersion":"0.67.1","vaults":[{"fsPath":"../main/tech","name":"tech"}],"journal":{"dailyDomain":"daily","name":"journal","dateFormat":"y.MM.dd","addBehavior":"childOfDomain"},"scratch":{"name":"scratch","dateFormat":"y.MM.dd.HHmmss","addBehavior":"asOwnDomain"},"graph":{"zoomSpeed":1},"enableAutoCreateOnDefinition":false,"enableXVaultWikiLink":false,"enableRemoteVaultInit":true,"workspaceVaultSyncMode":"noCommit","enableAutoFoldFrontmatter":true,"maxPreviewsCached":10,"maxNoteLength":204800,"task":{"name":"","dateFormat":"","addBehavior":"childOfCurrent","statusSymbols":{"":" ","wip":"w","done":"x","assigned":"a","moved":"m","blocked":"b","delegated":"l","dropped":"d","pending":"y"},"prioritySymbols":{"H":"high","M":"medium","L":"low"},"todoIntegration":false,"createTaskSelectionType":"selection2link"},"enableUserTags":true,"enableHashTags":true},"usePrettyRefs":true}},"__N_SSG":true}