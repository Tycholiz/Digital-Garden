{"pageProps":{"note":{"id":"G1aFACZB2ooWGMGwyd3ZW","title":"Mongoose","desc":"","updated":1615184205052,"created":1615184194611,"custom":{},"fname":"mongoose","type":"note","vault":{"fsPath":"../main/tech","name":"tech"},"contentHash":"5f28e34f91a814d2f3322586d67e0072","links":[],"anchors":{"hooks-aka-middleware":{"type":"header","text":"Hooks (a.k.a. Middleware)","value":"hooks-aka-middleware","line":9,"column":0,"depth":1},"pre-hooks":{"type":"header","text":"pre-hooks","value":"pre-hooks","line":19,"column":0,"depth":2},"serial":{"type":"header","text":"Serial","value":"serial","line":21,"column":0,"depth":3},"parallel":{"type":"header","text":"Parallel","value":"parallel","line":36,"column":0,"depth":3},"post-hooks":{"type":"header","text":"post-hooks","value":"post-hooks","line":49,"column":0,"depth":2},"types-of-middleware":{"type":"header","text":"Types of middleware","value":"types-of-middleware","line":63,"column":0,"depth":2},"document-mw":{"type":"header","text":"Document MW","value":"document-mw","line":64,"column":0,"depth":3},"model-mw":{"type":"header","text":"Model MW","value":"model-mw","line":79,"column":0,"depth":3},"query-mw":{"type":"header","text":"Query MW","value":"query-mw","line":81,"column":0,"depth":3},"aggregate-mw":{"type":"header","text":"Aggregate MW","value":"aggregate-mw","line":103,"column":0,"depth":3},"populate":{"type":"header","text":"Populate","value":"populate","line":109,"column":0,"depth":1},"schemas":{"type":"header","text":"Schemas","value":"schemas","line":154,"column":0,"depth":1},"instance-methods":{"type":"header","text":"Instance Methods","value":"instance-methods","line":155,"column":0,"depth":2},"static-methods":{"type":"header","text":"Static Methods","value":"static-methods","line":178,"column":0,"depth":2},"query-helper":{"type":"header","text":"Query Helper","value":"query-helper","line":190,"column":0,"depth":2},"virtual":{"type":"header","text":"Virtual","value":"virtual","line":206,"column":0,"depth":2},"accessing-the-parent-documents-from-the-child-document":{"type":"header","text":"Accessing the parent documents from the child document","value":"accessing-the-parent-documents-from-the-child-document","line":215,"column":0,"depth":3},"nested-routes":{"type":"header","text":"Nested routes","value":"nested-routes","line":227,"column":0,"depth":2},"improving-read-performance-with-indices":{"type":"header","text":"Improving Read Performance with Indices","value":"improving-read-performance-with-indices","line":231,"column":0,"depth":2},"e-resources":{"type":"header","text":"E Resources","value":"e-resources","line":236,"column":0,"depth":1}},"children":[],"parent":"olZIVfSs2uLLr3BppFh4K","data":{}},"body":"<h1 id=\"mongoose\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#mongoose\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>Mongoose</h1>\n<p>Note: do not use arrow functions in mongoose, since it prevents binding</p>\n<h1 id=\"hooks-aka-middleware\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#hooks-aka-middleware\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>Hooks (a.k.a. <em>Middleware</em>)</h1>\n<p>Hooks are useful for atomizing model logic and avoiding nested blocks of asynchronous code.\nOther use cases:</p>\n<ul>\n<li>complex validation</li>\n<li>removing dependent documents\n<ul>\n<li>(removing a user removes all his blogposts)</li>\n</ul>\n</li>\n<li>asynchronous defaults</li>\n<li>asynchronous tasks that a certain action triggers\n<ul>\n<li>triggering custom events</li>\n<li>notifications</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"pre-hooks\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#pre-hooks\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>pre-hooks</h2>\n<p>There are two types of pre-hooks:</p>\n<h3 id=\"serial\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#serial\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>Serial</h3>\n<p>The MW functions are executed one after another</p>\n<ul>\n<li>Note: calling <code>next()</code> does not immediately stop execution of the function. To do this, we would need to call <code>return</code>:</li>\n</ul>\n<pre><code>var schema = new Schema(..);\nschema.pre('save', function(next) {\n  if (foo()) {\n    console.log('calling next!');\n    // `return next();` will make sure the rest of this function doesn't run\n    /*return*/ next();\n  }\n  // Unless you comment out the `return` above, 'after next' will print\n  console.log('after next');\n});\n</code></pre>\n<h3 id=\"parallel\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#parallel\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>Parallel</h3>\n<p>The hooked method does not get executed until <code>done</code> is called by each middleware:</p>\n<pre><code>var schema = new Schema(..);\n\n// `true` means this is a parallel middleware. You **must** specify `true`\n// as the second parameter if you want to use parallel middleware.\nschema.pre('save', true, function(next, done) {\n  // calling next kicks off the next middleware in parallel\n  next();\n  setTimeout(done, 100);\n});\n</code></pre>\n<h2 id=\"post-hooks\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#post-hooks\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>post-hooks</h2>\n<p>Functions that are executed <em>after</em> the hooked method and all of its <code>pre</code> middleware have completed.</p>\n<p>Do not directly receive control flow</p>\n<ul>\n<li>i.e. no <code>next</code> or <code>done</code> callbacks are passed to it</li>\n</ul>\n<p><code>post</code> hooks are a way to register traditional event listeners for these methods</p>\n<ul>\n<li>ex. when the <code>save</code> pre-hook happens, this function will execute:</li>\n</ul>\n<pre><code>schema.post('save', function(doc) {\n  console.log('%s has been saved', doc._id);\n});\n</code></pre>\n<h2 id=\"types-of-middleware\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#types-of-middleware\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>Types of middleware</h2>\n<h3 id=\"document-mw\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#document-mw\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>Document MW</h3>\n<p><code>this</code> refers to the document itself</p>\n<p>Hook methods:</p>\n<ul>\n<li><code>init</code>\n<ul>\n<li>initialize a document without setters</li>\n<li>Called internally after a document is returned from mongodb.</li>\n</ul>\n</li>\n<li><code>validate</code> (a.k.a. <em>pre-save</em>)\n<ul>\n<li>Executes registered validation rules for this document.</li>\n<li>if a validation rule is violated, save is aborted</li>\n</ul>\n</li>\n<li><code>save</code>\n<ul>\n<li>Saves this document</li>\n<li>calling this (as a pre-hook) will trigger <code>validate</code>, though <code>validate</code> will execute before <code>save</code></li>\n</ul>\n</li>\n<li><code>remove</code>\n<ul>\n<li>Removes the document from database  </li>\n</ul>\n</li>\n</ul>\n<h3 id=\"model-mw\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#model-mw\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>Model MW</h3>\n<p><code>this</code> refers to the model (schema)</p>\n<h3 id=\"query-mw\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#query-mw\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>Query MW</h3>\n<p><code>this</code> refers to the query</p>\n<ul>\n<li><code>count</code></li>\n<li><code>find</code></li>\n<li><code>findOne</code></li>\n<li>...\nMongoose will not execute a query until <code>then</code> or <code>exec</code> has been called on it. The power of this comes when we want to build complex queries (ex. using <code>populate</code>/<code>aggregate</code>)</li>\n<li>Note: <code>.then()</code> in Mongoose are not actually <code>promises</code>. If you need a fully-fledged promise, use <code>.exec()</code></li>\n</ul>\n<pre><code>User.find({ username }) // will not execute\n\n// callback\nUser.find({ name: 'John' }, (err, res) => {}) // Will execute\n\n// .then()\nUser.find({name: 'John'}).then(); // Will execute\n\nPromise.all([User.find({name: 'John'}), User.find({name: 'Bob'})]) // Will execute all queries in parallel\n\n// .exec()\nUser.find({name: 'John'}).exec(); // Will execute returning a promise\n</code></pre>\n<h3 id=\"aggregate-mw\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#aggregate-mw\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>Aggregate MW</h3>\n<p>Aggregate MW executes whe you call <code>exec()</code> on an aggregate object\n<code>this</code> refers to the aggregation object (<code>&#x3C;Model>.aggregate</code>)</p>\n<p>If any middleware calls <code>next()</code> or <code>done()</code> with an argument of type <code>Error</code>, the flow is interrupted and the error is passed to the callback</p>\n<h1 id=\"populate\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#populate\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>Populate</h1>\n<p>Lets us reference documents in other collections</p>\n<ul>\n<li>similar to JOIN in SQL dbs</li>\n</ul>\n<p><em>population</em> is the process of automatically replacing the specified paths in the document with document(s) from other collection(s).</p>\n<p>In models, we give the <code>ref</code> option to a field (property within a document) to indicate which model to use during population.</p>\n<pre><code>const userSchema = new mongoose.Schema({\n    username: String,\n    posts: [{\n        type: mongoose.Schema.Types.ObjectId, //an array of object ids\n        ref: 'Post' //which model to use\n    }]\n})\n\nconst postSchema = new mongoose.Schema({\n    content: String,\n    author: {\n        type: mongoose.Schema.Types.ObjectId,\n        ref: 'User'\n    }\n})\n</code></pre>\n<p>Later, when we are within our controller, we will be using <code>.populate()</code> on the fields that have <code>type = mongoose.Schema.Types.ObjectId</code>:</p>\n<pre><code>User.findOne({ username: 'Kyle' })\n    .populate('posts') //we want populate to work with the posts field in the user collection\n    .exec((err, posts) => { // similar to .then()\n        if (err) return err\n        console.log('populated user:', posts)\n    }\n</code></pre>\n<p>This query will return the specific document within the user collection where <code>username = 'Kyle'</code>, and it will <em>populate</em> the posts field with all posts made by 'Kyle':</p>\n<pre><code>{\n    _id: 123,\n    username: 'Kyle',\n    posts: [\n        \"s8fm39m\",\n        \"c83ncm8\",\n        \"w822m02\"\n    ]\n}\n</code></pre>\n<h1 id=\"schemas\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#schemas\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>Schemas</h1>\n<h2 id=\"instance-methods\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#instance-methods\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>Instance Methods</h2>\n<p>Here, instance refers to the document (since a document is an instance of a model)</p>\n<p>Instance methods are defined like so:</p>\n<pre><code>// define a schema\nvar animalSchema = new Schema({ name: String, type: String });\n\n// assign a function to the \"methods\" object of our animalSchema\nanimalSchema.methods.findSimilarTypes = function(cb) {\n    return this.model('Animal').find({ type: this.type }, cb);\n};\n</code></pre>\n<p>Now, all <code>animal</code> instances will have a <code>findSimilarTypes</code> method available on them:</p>\n<pre><code>var Animal = mongoose.model('Animal', animalSchema);\nvar dog = new Animal({ type: 'dog' });\n\ndog.findSimilarTypes(function(err, dogs) {\n    console.log(dogs); // woof\n});\n</code></pre>\n<p>Imagine we were making a Medium.com clone. Our Article model would have a field called <code>claps</code>. We could define an instance method called <code>clap()</code>, which when executed, would increment the field <code>claps</code></p>\n<h2 id=\"static-methods\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#static-methods\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>Static Methods</h2>\n<p>Whereas instance methods are defined on the instance (document), static methods are defined on the Model itself.</p>\n<pre><code>//static method\nconst fido = await Animal.findByName('fido');\n\n//instance method\nconst dogs = await fido.findSimilarTypes();\n</code></pre>\n<p>The previous two could not be swapped (ex. <code>Animals.findSimilarTypes()</code>), since it would not make sense. </p>\n<ul>\n<li>Since <code>Animals</code> is a model and it has no <code>type</code>. This naturally would only exist on an instance of the model</li>\n</ul>\n<h2 id=\"query-helper\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#query-helper\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>Query Helper</h2>\n<p>Instance methods for Mongoose queries:</p>\n<pre><code>animalSchema.query.byName = function(name) {\n    return this.where({ name: new RegExp(name, 'i') });\n};\nvar Animal = mongoose.model('Animal', animalSchema);\n\nAnimal.find().byName('fido').exec(function(err, animals) {\n    console.log(animals);\n});\n\nAnimal.findOne().byName('fido').exec(function(err, animal) {\n    console.log(animal);\n});\n</code></pre>\n<h2 id=\"virtual\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#virtual\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>Virtual</h2>\n<p>Lets us define <code>getters</code> and <code>setters</code> that don't get persisted to the database</p>\n<ul>\n<li>Imagine we need a variable <code>fullName</code>, but on the <code>User</code> model, we only store <code>first</code> and <code>last</code>. The naive way would be to concatenate these 2 variables each time. Instead, lets define a virtual so that we can use this \"pseudo-field\" in our application:</li>\n</ul>\n<pre><code>personSchema.virtual('fullname').get(function() {\n    return `${this.first} ${this.last}`\n}\n</code></pre>\n<h3 id=\"accessing-the-parent-documents-from-the-child-document\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#accessing-the-parent-documents-from-the-child-document\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>Accessing the parent documents from the child document</h3>\n<ul>\n<li>ex. Tour has <em>1:many</em> relationship with reviews</li>\n<li>We can add a pre-hook MW function onto the tour model</li>\n</ul>\n<pre><code>parentSchema.virtual('reviews', { //the name of the virtual field\n  ref: 'Review', //the child model\n  foreignField: 'tour', //name of the field in the child model that contains the reference to the current (parent) model\n  localField: '_id' //name of the field where the ID is stored on the current (parent) model.\n});\n</code></pre>\n<p>Then, to actually populate this virtual field, we just have to use the <code>populate()</code> method within our <code>getTour</code> handler.</p>\n<h2 id=\"nested-routes\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#nested-routes\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>Nested routes</h2>\n<ul>\n<li>Having 2+ resources at the same url</li>\n<li></li>\n</ul>\n<h2 id=\"improving-read-performance-with-indices\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#improving-read-performance-with-indices\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>Improving Read Performance with Indices</h2>\n<ul>\n<li>see bottom of <a href=\"https://medium.com/@SigniorGratiano/modelling-data-and-advanced-mongoose-175cdbc68bb1\">https://medium.com/@SigniorGratiano/modelling-data-and-advanced-mongoose-175cdbc68bb1</a></li>\n<li>this also allows us to carry out logic such as \"each user can only review a tour one time\" \n<ul>\n<li><code> reviewSchema.index({ tour: 1, user: 1 }, { unique: true });</code></li>\n</ul>\n</li>\n</ul>\n<h1 id=\"e-resources\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#e-resources\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>E Resources</h1>\n<p><a href=\"https://medium.com/@SigniorGratiano/modelling-data-and-advanced-mongoose-175cdbc68bb1\">Data modeling and Referencing other collections</a></p>","noteIndex":{"id":"olZIVfSs2uLLr3BppFh4K","title":"Root","desc":"","updated":1618676699718,"created":1615482407722,"custom":{"nav_order":0,"permalink":"/"},"fname":"root","type":"note","vault":{"fsPath":"../main/tech","name":"tech"},"contentHash":"777fb4dab9bcf63cbfe772245d7e4871","links":[],"anchors":{"digital-garden":{"type":"header","text":"Digital Garden","value":"digital-garden","line":8,"column":0,"depth":1}},"children":["zFMjbn3xihVNHjUIdZCD1","IK6NOKemuDjhfstJBovKL","RS8qp1GxwtiJopCUHTTtq","ZaTr28eWk1DrXOEsc1YVb","Vi0WYVLZunVM9iR8XZJn3","ngAbg7gluvbt1bY1UIRsi","RCPPXSakm5TvKka8kOmVp","MPx8ykTP57I40WTZvTP7f","ZU5WmdTG1bHoE8RcmZXZG","jqWiyYJff92RjXuUQt9PQ","KihijM8OQvZ4pASkkhqzL","F9vyqvls3OBCujtukqKhy","facc2b01-755a-409f-99f6-57bef2d1501f","m5ov42Vm6mR7RQWTvl1NW","YYt62mSW964cwb5nP0hva","PZxxZ4iESzSlbbHJKxuAZ","UDu62Pa6BaRqlG8uGoMhy","nMCtMXVvjBsJk3iw1zoIO","ANfx9Z4a6ZA0uJuSHtbIJ","BkG557LKUYbH1DnxprEVT","1TaH8zDTM98FZ9SYaeXLM","dc79799f-a55d-48ab-a8be-c48adb1b19c0","f6feef57-b8f5-451f-a09a-7b63f6a07183","4sz47Y0LKs1Si73rWtyyh","5a9fb1df-478e-4687-9be0-5cb97e61ec57","1374e9e9-1cbc-4e1f-b1ca-66b8569533dd","f529cc34-aba0-45ca-ad7e-02ddda318941","0zcauha3il2NqtxZazIo7","9bbd6f68-03b2-41f4-92e4-2ca313e8b450","5a2ab598-fa7e-4471-8bda-9f5831b679ae","uV6w4mZPoohWyZV4Xaad0","RgE0mZLaUjPftFPZsiAoe","mytCOts26Pidush65tdRW","fwUzxfLSPMH1eL8oBoLWx","TbW7PM9bg1y5TGkiWwQ8b","xiSIDeEtIc8X0lpUQlppI","0jxgntiLNHWFuCbzqtFGF","GkdMprLUe4QQULBxmGN6V","4SYc6v5hxY5g6Ip6kjpwO","fqVQpS9FBiXgKsZX3R3sJ","L5JUZlGAGvTxrsEBB7DY8","963c4b54-02bd-4943-a15f-52cf59ffd0f4","TeTedoeS2LdHPR632eCpM","e65188a1-177e-4ab2-99f9-75f85d537621","fajYnbVhCRDi74xn0H30R","bArGdGwqo3iFkyKMyE7qR","4Dcp7gbEVoLLgfu7bXFai","5d700782-fb81-416e-83f9-5dd88260e350","zubgzhNFE6KlTgXcjTz6O","8lpdfWa0cbSq1XJQbcYcY","17I8ZksXvqCH1mRtZDjHp","kF916Ow84qpJJeMRkWMIo","tMLkLcrIHHBz56xVmBLkP","CSePBQ6q7qhowKESqVwt7","laZ4OfLhZNK1Kuy6GaWUr","z5IJblOknQhMzZ5QZh4ye","N36FHxfxzwJfxDY3miWyX","3bb25f58-2b50-4fa3-af55-48ea9f88a081","aOqNcxZh8qN4MoBJcvGTc","u93Rz4fEWGu6VBR30Zraf","9hjMHnKvYT4jLKvuDSXaV","LgW7mTIALODoXc54B3p6S","UYPxfHBFWX7fb6hHU5bB6","qxSOd6SPN8qf9ZUojVFDX","WQoMTf6VXBaxCgksXAVsj","2Mw4XgfyCHXHNOX5yoCIY","UFrwsXzC1yr7Ge8FF8Vbo","a8edc4ac-028b-40ec-872a-e4a005b04b2a","0XJqmcdtcMZu66glBI5O8","lK8r8BXS4ThiUTe4xKIZe","93de42ca-53ea-460a-baa7-b9ec5c47cb1e","Rxs2jaGpdFzqYtP7lAJFJ","aO8W81Z0PyIb6Hs7nOHPW","I01hENHnh8Tqu3Ok8sLzG","evqsPNutOaZ8hcBCqxFQu","zhhxcjZUHdU8uRLwGb9Zh","G1aFACZB2ooWGMGwyd3ZW","YWy1C4tgoaCcw1m8JJsr7","Szj3o5iaNxPpesiCqwrbu","XhvCDW3fIw6h6MhY5ticq","Q70g7SusFZBQXzkuQifv4","AzfWDH3wp7jFpL2EYxBcW","y0fwpZ9qMqirsLiFyOciU","ZF8xj8wwDUqKlrwTrCFZ1","tAJvhqhdfyZZa87QHq1TU","4hRmipi8lxpBLyzWu5JVB","iTg0C7QjvnmqBZeEigJNs","3babc3d2-79ae-470a-9c06-ab8bba2e684e","bF3UsMFya3fMeXWDspVov","ULkfbL9WpktbVYnzhl6Jw","PpNOO8JYWe6dM8wruSa7x","di40pCxDn7IiqE8lFdD46","rmW0mkerqV35I8QPji6lM","3IFIK1ByzeIxZCByryGLN","iImkYAKfkw3beAl6pLbDn","tho65KN0ZpjQlVvP1fEzM","ecDe8DNWrkeQTwpTEvHje","Yqhdd9mSJGN7OJOeyoSD2","NEhsoOfR7J6o01ielAuUm","Ws5tah8tpeyn9tK8VBTg8","Bqpifx2HX3vjLhX9yvhTV","gWAg15uBJgkS2B0wcpMAa","l7V3v2ep1YdDCt7DOr7Ci","yM2PJBdqJnHpD63cPA6sW","qn0bre7eLbi3QMbCfWkUi","fSu0KxFL41IRouotqmbHs","0gtg24Mj1a1bQFPRGQNlO","7iQPBMltLPLbFEz2qbjPu","yoh4pwoXcfELInGKRdYf6","dCGCWXgAmiOZXbdULT1m6","jMavlje07sNa6hSEIE8WA","Xxm0JE4dKHxrQAaZfzvxD","PAEBZCyFBZJyR7OoMZ41E","PQ6km8RgRCuyICBPOYz8f","2bhftt8rGuxYu4pFgNqru","hjYIZpHQWuXfeEoGeJEKW","K2M9bQqVq2eQfm29eslKL","X8obW1iKwYsvNgKWGyCzy","yJwSC7hqYIezTFHf5i0Ev","c4Z7ETcOHUILRMH32Sfjw","qiR6dIu857b9M9kTqjOyK","8vflbCVkwZtYcqdDDTNAz","Ku1OgHMhELajzo61Gx7ye","LUrfhDWo8wuwZu7CN9TV8","osu6JGOnvXJ5gt3tpqWZY","1a6173cd-cf13-4b34-a522-8350bf9a364f","ZgCUp366YrF2Tyky2NT73","S2sBltrPfd8a7ICuD7CuH","oWCuBXOg6JWfZzjmKxmNl","jOmhZ8ovLYTPbpM1vqSDx","FraC6xzLy1ei91l1ICyc9","6ceBas2RE9Q4787GDngH7","734cd78d-0bc9-426b-803d-1efc84dfffe5","k4Bb09px6r0FxIRs49SXV","oaG3H1S9IUBO644nGZigu","Ka7agQJkUMRSWN0uFdkWK","si3z090WsiLasMhJBa1Az","ljKAVERmdEiKLK9hXGKBm","LIcuGYV0DDt1VWbvH6Sed","MgUSrpNCIwDOW4fX3vPOF","bZumdyapJ2H0wWWOmJ45i","QHXEIyeZGIGMVi5Q52UWI","i5Fya3Vzzm0rBT0ctByuo"],"parent":null,"data":{},"body":"\n# Digital Garden\n\nThis Wiki of Personal Information is organized according to domains and their\nsub-domains, along with specific implementation of those domains.\n\nFor instance, Git itself is a domain. Sub-domains of Git, would be `commit`,\n`tags`, `reflog` etc. implementations of each of those could be `cli`, `strat`\n(strategies), `inner` etc.\n\nThe goal of the wiki is to present data in a manner that is from the perspective\nof a querying user. Here, a user is a programmer wanting to get key information\nfrom a specific domain. For instance, if a user wants to use postgres functions\nand hasn't done them in a while, they should be able to query\n`postgres.functions` to see what information is available to them.\n\nThis wiki has been written with myself in mind. While learning each of these\ndomains, I have been sensitive to the \"aha\" moments and have noted down my\ninsights as they arose. I have refrained from capturing information that I\nconsidered obvious or otherwise non-beneficial to my own understanding.\n\nThe ability I hope to gain from this wiki is the ability to step away from any\ngiven domain for a long period of time, and be able to be passably useful for\nwhatever my goals are within a short period of time. Of course, this is all\nvague sounding, and really depends on the domain, along with the ends I am\ntrying to reach.\n\nTo achieve this, the system should be steadfast to:\n- be able to put information in relatively easily, without too much thought\n\trequired to make that determination.\n- be able to extract the information that we need, meaning there is a\n\thigh-degree in confidence in the location of the information. The idea is\n\tthat information loses a large amount of its value when it is unfindable.\n\tTherefore, a relatively strict ideology should be used when determining\n\twhere a piece of information belongs.\n"},"collectionChildren":null,"customHeadContent":null,"config":{"version":3,"useFMTitle":true,"useNoteTitleForLink":true,"noLegacyNoteRef":true,"mermaid":true,"useKatex":true,"dev":{"enablePreviewV2":true},"site":{"assetsPrefix":"/Digital-Garden","siteUrl":"https://tycholiz.github.io","copyAssets":true,"siteHierarchies":["root"],"siteRootDir":"docs","usePrettyRefs":true,"title":"Dendron","description":"Publishable tech notes","duplicateNoteBehavior":{"action":"useVault","payload":["tech"]},"siteLastModified":true,"gh_edit_branch":"main","usePrettyLinks":true,"siteNotesDir":"notes","siteFaviconPath":"favicon.ico","gh_edit_link":true,"gh_edit_link_text":"Edit this page on GitHub","gh_root":"docs/","gh_edit_view_mode":"edit","writeStubs":true,"siteIndex":"root"},"commands":{"lookup":{"note":{"selectionMode":"extract","confirmVaultOnCreate":false,"leaveTrace":false}},"insertNote":{"initialValue":"templates"},"insertNoteLink":{"aliasMode":"none","enableMultiSelect":false},"insertNoteIndex":{"enableMarker":false},"randomNote":{}},"workspace":{"dendronVersion":"0.67.1","vaults":[{"fsPath":"../main/tech","name":"tech"}],"journal":{"dailyDomain":"daily","name":"journal","dateFormat":"y.MM.dd","addBehavior":"childOfDomain"},"scratch":{"name":"scratch","dateFormat":"y.MM.dd.HHmmss","addBehavior":"asOwnDomain"},"graph":{"zoomSpeed":1},"enableAutoCreateOnDefinition":false,"enableXVaultWikiLink":false,"enableRemoteVaultInit":true,"workspaceVaultSyncMode":"noCommit","enableAutoFoldFrontmatter":true,"maxPreviewsCached":10,"maxNoteLength":204800,"task":{"name":"","dateFormat":"","addBehavior":"childOfCurrent","statusSymbols":{"":" ","wip":"w","done":"x","assigned":"a","moved":"m","blocked":"b","delegated":"l","dropped":"d","pending":"y"},"prioritySymbols":{"H":"high","M":"medium","L":"low"},"todoIntegration":false,"createTaskSelectionType":"selection2link"},"enableUserTags":true,"enableHashTags":true},"usePrettyRefs":true}},"__N_SSG":true}