{"pageProps":{"note":{"id":"SL4aNCgB1VUFCemqEumoQ","title":"CI-CD","desc":"","updated":1641406096159,"created":1640288529810,"custom":{},"fname":"gitlab.CI-CD","type":"note","vault":{"fsPath":"../main/tech","name":"tech"},"contentHash":"6a77fa89b29921c6f4698d46ddc1ce54","links":[{"type":"ref","from":{"fname":"gitlab.CI-CD","id":"SL4aNCgB1VUFCemqEumoQ","vaultName":"tech"},"value":"gitlab.CI-CD.pipelines","position":{"start":{"line":3,"column":1,"offset":14},"end":{"line":3,"column":28,"offset":41},"indent":[]},"xvault":false,"to":{"fname":"gitlab.CI-CD.pipelines"}},{"type":"ref","from":{"fname":"gitlab.CI-CD","id":"SL4aNCgB1VUFCemqEumoQ","vaultName":"tech"},"value":"gitlab.CI-CD.stages","position":{"start":{"line":6,"column":1,"offset":53},"end":{"line":6,"column":25,"offset":77},"indent":[]},"xvault":false,"to":{"fname":"gitlab.CI-CD.stages"}},{"type":"ref","from":{"fname":"gitlab.CI-CD","id":"SL4aNCgB1VUFCemqEumoQ","vaultName":"tech"},"value":"gitlab.CI-CD.jobs","position":{"start":{"line":9,"column":1,"offset":87},"end":{"line":9,"column":23,"offset":109},"indent":[]},"xvault":false,"to":{"fname":"gitlab.CI-CD.jobs"}}],"anchors":{"pipelines":{"type":"header","text":"Pipelines","value":"pipelines","line":8,"column":0,"depth":2},"stages":{"type":"header","text":"Stages","value":"stages","line":11,"column":0,"depth":2},"jobs":{"type":"header","text":"Jobs","value":"jobs","line":14,"column":0,"depth":2}},"children":["jqIxYA4fpGL6wIKJNkovK","ltM0gjy87NV4go37RWkbd","00Zg2MBUOK3gzRljklTOp","YJG6pZqJMUiqZfcWrcFtB","ZaY7QkQo0DGJlOUsRq0fG","rzgkKLxkWy3I7Coj8VSBy","mUtwqw1rZHs0MZW9KgbW7","XgQGM8Us5pwUvvD05bZu9","sikVVw7XuEFmfLxwcTIgx"],"parent":"zubgzhNFE6KlTgXcjTz6O","data":{}},"body":"<h1 id=\"ci-cd\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#ci-cd\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>CI-CD</h1>\n<h2 id=\"pipelines\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#pipelines\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>Pipelines</h2>\n<p></p><p></p><div class=\"portal-container\">\n<div class=\"portal-head\">\n<div class=\"portal-backlink\">\n<div class=\"portal-title\">From <span class=\"portal-text-title\">pipelines</span></div>\n<a href=\"/Digital-Garden/notes/YJG6pZqJMUiqZfcWrcFtB\" class=\"portal-arrow\">Go to text <span class=\"right-arrow\">→</span></a>\n</div>\n</div>\n<div id=\"portal-parent-anchor\" class=\"portal-parent\" markdown=\"1\">\n<div class=\"portal-parent-fader-top\"></div>\n<div class=\"portal-parent-fader-bottom\"></div><p>Pipelines are the top-level component of continuous integration, delivery, and deployment.</p>\n<p>A pipeline is a set of instructions (ie. <a href=\"/Digital-Garden/notes/00Zg2MBUOK3gzRljklTOp\">jobs</a>) that are executed in an order that we define</p>\n<p>A merge request can have many pipelines, and each pipeline must belong to one merge request.</p>\n<p>Normally a pipeline is created when you push to a branch on Gitlab</p>\n<p>Pipelines comprise:</p>\n<ul>\n<li>Jobs, which define what to do. For example, jobs that compile or test code.</li>\n<li>Stages, which define when to run the jobs. For example, stages that run tests after stages that compile the code.</li>\n</ul>\n<p>If all jobs in a stage succeed, the pipeline moves on to the next stage.\nIf any job in a stage fails, the next stage is not (usually) executed and the pipeline ends early.</p>\n<p>A typical pipeline might consist of four stages, executed in the following order:</p>\n<ul>\n<li>A build stage, with a job called compile.</li>\n<li>A test stage, with two jobs called test1 and test2.</li>\n<li>A staging stage, with a job called deploy-to-stage.</li>\n<li>A production stage, with a job called deploy-to-prod.</li>\n</ul>\n<h2 id=\"types-of-pipeline\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#types-of-pipeline\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>Types of Pipeline</h2>\n<p>Pipelines come in various configurations</p>\n<h3 id=\"basic-pipelines\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#basic-pipelines\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>Basic pipelines</h3>\n<p>run everything in each stage concurrently, followed by the next stage. Run the pipeline each time changes are pushed to a branch.</p>\n<h3 id=\"directed-acyclic-graph-pipeline-dag\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#directed-acyclic-graph-pipeline-dag\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>Directed Acyclic Graph Pipeline (DAG)</h3>\n<p>pipelines are based on relationships between jobs and can run more quickly than basic pipelines.</p>\n<pre><code>- we achieve this with the `needs` keyword, which allows us to be explicit about the job's dependencies (ex. a post-install stage *needs* an install stage to have succeeded first)\n</code></pre>\n<h3 id=\"multi-project-pipelines\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#multi-project-pipelines\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>Multi-project pipelines</h3>\n<p>combine pipelines for different projects together.</p>\n<h3 id=\"parent-child-pipelines\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#parent-child-pipelines\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>Parent-Child pipelines</h3>\n<p>break down complex pipelines into one parent pipeline that can trigger multiple child sub-pipelines, which all run in the same project and with the same SHA. This pipeline architecture is commonly used for mono-repos.</p>\n<h3 id=\"pipelines-for-merge-requests\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#pipelines-for-merge-requests\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>Pipelines for Merge Requests</h3>\n<p>Run only when commits associated with an MR are pushed (rather than for every commit).</p>\n<ul>\n<li>Merge Request jobs run in a separate pipeline from Commit jobs.</li>\n<li>These pipelines are labeled as <code>detached</code> in the UI</li>\n</ul>\n<p>Pipelines for merge requests can run when you:</p>\n<ul>\n<li>Create a new merge request.</li>\n<li>Commit changes to the source branch for the merge request.</li>\n<li>Select the Run pipeline button from the Pipelines tab in the merge request.</li>\n</ul>\n<p>Can be configured with <code>rules</code> or <code>only/except</code></p>\n<h3 id=\"pipelines-for-merged-results\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#pipelines-for-merged-results\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>Pipelines for Merged Results</h3>\n<p>merge request pipelines that act as though the changes from the source branch have already been merged into the target branch.</p>\n<h3 id=\"merge-trains\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#merge-trains\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>Merge Trains</h3>\n<p>Merge trains use pipelines for merged results to queue merges one after the other.</p></div></div><p></p><p></p>\n<h2 id=\"stages\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#stages\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>Stages</h2>\n<p></p><p></p><div class=\"portal-container\">\n<div class=\"portal-head\">\n<div class=\"portal-backlink\">\n<div class=\"portal-title\">From <span class=\"portal-text-title\">stages</span></div>\n<a href=\"/Digital-Garden/notes/mUtwqw1rZHs0MZW9KgbW7\" class=\"portal-arrow\">Go to text <span class=\"right-arrow\">→</span></a>\n</div>\n</div>\n<div id=\"portal-parent-anchor\" class=\"portal-parent\" markdown=\"1\">\n<div class=\"portal-parent-fader-top\"></div>\n<div class=\"portal-parent-fader-bottom\"></div><p>The order that we list our stages defines the execution order for jobs:</p>\n<ul>\n<li>Jobs in the same stage run in parallel.</li>\n<li>Jobs in the next stage run after the jobs from the previous stage complete successfully.</li>\n</ul>\n<p>If stages is not defined in the .gitlab-ci.yml file, the default pipeline stages are:</p>\n<ul>\n<li><code>.pre</code></li>\n<li><code>build</code></li>\n<li><code>test</code></li>\n<li><code>deploy</code></li>\n<li><code>.post</code></li>\n</ul>\n<p>If a job does not specify a stage, the job is assigned the <code>test</code> stage.</p>\n<p>To make a job start earlier and ignore the stage order, use the <code>needs</code> keyword.</p>\n</div></div><p></p><p></p>\n<h2 id=\"jobs\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#jobs\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>Jobs</h2>\n<p></p><p></p><div class=\"portal-container\">\n<div class=\"portal-head\">\n<div class=\"portal-backlink\">\n<div class=\"portal-title\">From <span class=\"portal-text-title\">jobs</span></div>\n<a href=\"/Digital-Garden/notes/00Zg2MBUOK3gzRljklTOp\" class=\"portal-arrow\">Go to text <span class=\"right-arrow\">→</span></a>\n</div>\n</div>\n<div id=\"portal-parent-anchor\" class=\"portal-parent\" markdown=\"1\">\n<div class=\"portal-parent-fader-top\"></div>\n<div class=\"portal-parent-fader-bottom\"></div><p>A job is an atomic unit that is picked up by the runner.</p>\n<ul>\n<li>If we were acting as the runner, we would simply run a script, like <code>npm run test</code> or <code>npm run lint</code>. These are 2 different jobs, and they are picked up by the runner.</li>\n<li>jobs are executed in the environment of the runner.</li>\n</ul>\n<p>Multiple jobs in the same stage are executed in parallel</p>\n<p>Jobs are defined at the top-level of the <code>gitlab-ci.yml</code> file.</p>\n<ul>\n<li>you might have jobs called Lint, Test, Deploy Preview, etc</li>\n</ul>\n<p>What is important is that each job is run independently from each other.</p>\n<p>with rules, we can modify the order that jobs within a stage will be run.</p>\n<p>Jobs prepended with a <code>.</code> will be hidden, and will not be processed by Gitlab CI/CD.</p>\n<ul>\n<li>You can use hidden jobs as templates for reusable configuration with <code>extends</code> keyword or YAML anchors.</li>\n</ul>\n<h3 id=\"running-jobs-conditionally-rules\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#running-jobs-conditionally-rules\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>Running jobs conditionally (<code>rules</code>)</h3>\n<pre class=\"language-yml\"><code class=\"language-yml\"><span class=\"token key atrule\">default-job</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">script</span><span class=\"token punctuation\">:</span>\n    <span class=\"token punctuation\">-</span> yarn test\n  <span class=\"token key atrule\">rules</span><span class=\"token punctuation\">:</span>\n    <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">if</span><span class=\"token punctuation\">:</span> $CI_COMMIT_BRANCH\n</code></pre>\n<h3 id=\"groups-of-jobs\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#groups-of-jobs\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>Groups of jobs</h3>\n<pre class=\"language-yml\"><code class=\"language-yml\"><span class=\"token key atrule\">build ruby 1/3</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">stage</span><span class=\"token punctuation\">:</span> build\n  <span class=\"token key atrule\">script</span><span class=\"token punctuation\">:</span>\n    <span class=\"token punctuation\">-</span> echo \"ruby1\"\n\n<span class=\"token key atrule\">build ruby 2/3</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">stage</span><span class=\"token punctuation\">:</span> build\n  <span class=\"token key atrule\">script</span><span class=\"token punctuation\">:</span>\n    <span class=\"token punctuation\">-</span> echo \"ruby2\"\n\n<span class=\"token key atrule\">build ruby 3/3</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">stage</span><span class=\"token punctuation\">:</span> build\n  <span class=\"token key atrule\">script</span><span class=\"token punctuation\">:</span>\n    <span class=\"token punctuation\">-</span> echo \"ruby3\"\n</code></pre>\n<p>Each job can run in a separate isolated <a href=\"/Digital-Garden/notes/a9w8WlKMHZZRdHc8EPBsD\">Docker container</a></p>\n<ul>\n<li><a href=\"https://docs.gitlab.com/ee/ci/docker/using_docker_images.html\">docs</a></li>\n</ul>\n<h3 id=\"resource-group\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#resource-group\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>Resource Group</h3>\n<p>Allows us to make sure only one job per resource group is working at a time</p>\n<ul>\n<li>ex. consider 2 different pipelines of the same repo that both deploy to the same place. Of course, deployments should happen sequentially, so we put both of those jobs in the same resource_group, guaranteeing that they will run one after the other.</li>\n</ul>\n<p>A job can be specified as part of a <code>resource_group</code> which ensures a job is mutually exclusive across different pipelines for the same project.</p>\n<ul>\n<li>if multiple jobs that belong to the same resource group are queued simultaneously, only one of the jobs starts. The other jobs wait until the resource_group is free.</li>\n<li>ex. <code>resource_group=prod</code> puts a limitation that only one job in the <code>prod</code> resource group may run at a time.</li>\n<li>Resource groups behave similar to semaphores in other programming languages.</li>\n</ul>\n<h3 id=\"service\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#service\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>Service</h3>\n<p>When we use services, we specify 2 keywords:</p>\n<ul>\n<li>services</li>\n<li>images</li>\n</ul>\n<p>A job can define a Docker image</p>\n<hr>\n<p>You can’t use these keywords as job names:</p>\n<ul>\n<li>image</li>\n<li>services</li>\n<li>stages</li>\n<li>types</li>\n<li>before_script</li>\n<li>after_script</li>\n<li>variables</li>\n<li>cache</li>\n<li>include</li>\n</ul></div></div><p></p><p></p>\n<hr>\n<p>Gitlab CI can be used with external Git hosts, like Github.</p>\n<ul>\n<li><a href=\"https://docs.gitlab.com/ee/ci/ci_cd_for_external_repos/\">docs</a></li>\n</ul>\n<hr>\n<h2 id=\"children\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#children\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>Children</h2>\n<ol>\n<li><a href=\"/Digital-Garden/notes/sikVVw7XuEFmfLxwcTIgx\">.gitlab-ci.yml file</a></li>\n<li><a href=\"/Digital-Garden/notes/XgQGM8Us5pwUvvD05bZu9\">Gitlab CI Variables</a></li>\n<li><a href=\"/Digital-Garden/notes/jqIxYA4fpGL6wIKJNkovK\">artifact</a></li>\n<li><a href=\"/Digital-Garden/notes/ltM0gjy87NV4go37RWkbd\">cache</a></li>\n<li><a href=\"/Digital-Garden/notes/00Zg2MBUOK3gzRljklTOp\">jobs</a></li>\n<li><a href=\"/Digital-Garden/notes/YJG6pZqJMUiqZfcWrcFtB\">pipelines</a></li>\n<li><a href=\"/Digital-Garden/notes/ZaY7QkQo0DGJlOUsRq0fG\">review-app</a></li>\n<li><a href=\"/Digital-Garden/notes/rzgkKLxkWy3I7Coj8VSBy\">runner</a></li>\n<li><a href=\"/Digital-Garden/notes/mUtwqw1rZHs0MZW9KgbW7\">stages</a></li>\n</ol>","noteIndex":{"id":"olZIVfSs2uLLr3BppFh4K","title":"Root","desc":"","updated":1618676699718,"created":1615482407722,"custom":{"nav_order":0,"permalink":"/"},"fname":"root","type":"note","vault":{"fsPath":"../main/tech","name":"tech"},"contentHash":"777fb4dab9bcf63cbfe772245d7e4871","links":[],"anchors":{"digital-garden":{"type":"header","text":"Digital Garden","value":"digital-garden","line":8,"column":0,"depth":1}},"children":["zFMjbn3xihVNHjUIdZCD1","IK6NOKemuDjhfstJBovKL","RS8qp1GxwtiJopCUHTTtq","ZaTr28eWk1DrXOEsc1YVb","Vi0WYVLZunVM9iR8XZJn3","ngAbg7gluvbt1bY1UIRsi","RCPPXSakm5TvKka8kOmVp","MPx8ykTP57I40WTZvTP7f","ZU5WmdTG1bHoE8RcmZXZG","jqWiyYJff92RjXuUQt9PQ","KihijM8OQvZ4pASkkhqzL","F9vyqvls3OBCujtukqKhy","facc2b01-755a-409f-99f6-57bef2d1501f","m5ov42Vm6mR7RQWTvl1NW","YYt62mSW964cwb5nP0hva","PZxxZ4iESzSlbbHJKxuAZ","UDu62Pa6BaRqlG8uGoMhy","nMCtMXVvjBsJk3iw1zoIO","ANfx9Z4a6ZA0uJuSHtbIJ","BkG557LKUYbH1DnxprEVT","1TaH8zDTM98FZ9SYaeXLM","dc79799f-a55d-48ab-a8be-c48adb1b19c0","f6feef57-b8f5-451f-a09a-7b63f6a07183","4sz47Y0LKs1Si73rWtyyh","5a9fb1df-478e-4687-9be0-5cb97e61ec57","1374e9e9-1cbc-4e1f-b1ca-66b8569533dd","f529cc34-aba0-45ca-ad7e-02ddda318941","0zcauha3il2NqtxZazIo7","9bbd6f68-03b2-41f4-92e4-2ca313e8b450","5a2ab598-fa7e-4471-8bda-9f5831b679ae","uV6w4mZPoohWyZV4Xaad0","RgE0mZLaUjPftFPZsiAoe","mytCOts26Pidush65tdRW","fwUzxfLSPMH1eL8oBoLWx","TbW7PM9bg1y5TGkiWwQ8b","xiSIDeEtIc8X0lpUQlppI","0jxgntiLNHWFuCbzqtFGF","GkdMprLUe4QQULBxmGN6V","4SYc6v5hxY5g6Ip6kjpwO","fqVQpS9FBiXgKsZX3R3sJ","L5JUZlGAGvTxrsEBB7DY8","963c4b54-02bd-4943-a15f-52cf59ffd0f4","TeTedoeS2LdHPR632eCpM","e65188a1-177e-4ab2-99f9-75f85d537621","fajYnbVhCRDi74xn0H30R","bArGdGwqo3iFkyKMyE7qR","4Dcp7gbEVoLLgfu7bXFai","5d700782-fb81-416e-83f9-5dd88260e350","zubgzhNFE6KlTgXcjTz6O","8lpdfWa0cbSq1XJQbcYcY","17I8ZksXvqCH1mRtZDjHp","kF916Ow84qpJJeMRkWMIo","tMLkLcrIHHBz56xVmBLkP","CSePBQ6q7qhowKESqVwt7","laZ4OfLhZNK1Kuy6GaWUr","z5IJblOknQhMzZ5QZh4ye","N36FHxfxzwJfxDY3miWyX","3bb25f58-2b50-4fa3-af55-48ea9f88a081","aOqNcxZh8qN4MoBJcvGTc","u93Rz4fEWGu6VBR30Zraf","9hjMHnKvYT4jLKvuDSXaV","LgW7mTIALODoXc54B3p6S","UYPxfHBFWX7fb6hHU5bB6","qxSOd6SPN8qf9ZUojVFDX","WQoMTf6VXBaxCgksXAVsj","2Mw4XgfyCHXHNOX5yoCIY","UFrwsXzC1yr7Ge8FF8Vbo","a8edc4ac-028b-40ec-872a-e4a005b04b2a","0XJqmcdtcMZu66glBI5O8","lK8r8BXS4ThiUTe4xKIZe","93de42ca-53ea-460a-baa7-b9ec5c47cb1e","Rxs2jaGpdFzqYtP7lAJFJ","aO8W81Z0PyIb6Hs7nOHPW","I01hENHnh8Tqu3Ok8sLzG","evqsPNutOaZ8hcBCqxFQu","zhhxcjZUHdU8uRLwGb9Zh","G1aFACZB2ooWGMGwyd3ZW","YWy1C4tgoaCcw1m8JJsr7","Szj3o5iaNxPpesiCqwrbu","XhvCDW3fIw6h6MhY5ticq","Q70g7SusFZBQXzkuQifv4","AzfWDH3wp7jFpL2EYxBcW","y0fwpZ9qMqirsLiFyOciU","ZF8xj8wwDUqKlrwTrCFZ1","tAJvhqhdfyZZa87QHq1TU","4hRmipi8lxpBLyzWu5JVB","iTg0C7QjvnmqBZeEigJNs","3babc3d2-79ae-470a-9c06-ab8bba2e684e","bF3UsMFya3fMeXWDspVov","ULkfbL9WpktbVYnzhl6Jw","PpNOO8JYWe6dM8wruSa7x","di40pCxDn7IiqE8lFdD46","rmW0mkerqV35I8QPji6lM","3IFIK1ByzeIxZCByryGLN","iImkYAKfkw3beAl6pLbDn","tho65KN0ZpjQlVvP1fEzM","ecDe8DNWrkeQTwpTEvHje","Yqhdd9mSJGN7OJOeyoSD2","NEhsoOfR7J6o01ielAuUm","Ws5tah8tpeyn9tK8VBTg8","Bqpifx2HX3vjLhX9yvhTV","gWAg15uBJgkS2B0wcpMAa","l7V3v2ep1YdDCt7DOr7Ci","yM2PJBdqJnHpD63cPA6sW","qn0bre7eLbi3QMbCfWkUi","fSu0KxFL41IRouotqmbHs","0gtg24Mj1a1bQFPRGQNlO","7iQPBMltLPLbFEz2qbjPu","yoh4pwoXcfELInGKRdYf6","dCGCWXgAmiOZXbdULT1m6","jMavlje07sNa6hSEIE8WA","Xxm0JE4dKHxrQAaZfzvxD","PAEBZCyFBZJyR7OoMZ41E","PQ6km8RgRCuyICBPOYz8f","2bhftt8rGuxYu4pFgNqru","hjYIZpHQWuXfeEoGeJEKW","K2M9bQqVq2eQfm29eslKL","X8obW1iKwYsvNgKWGyCzy","yJwSC7hqYIezTFHf5i0Ev","c4Z7ETcOHUILRMH32Sfjw","qiR6dIu857b9M9kTqjOyK","8vflbCVkwZtYcqdDDTNAz","Ku1OgHMhELajzo61Gx7ye","LUrfhDWo8wuwZu7CN9TV8","osu6JGOnvXJ5gt3tpqWZY","1a6173cd-cf13-4b34-a522-8350bf9a364f","ZgCUp366YrF2Tyky2NT73","S2sBltrPfd8a7ICuD7CuH","oWCuBXOg6JWfZzjmKxmNl","jOmhZ8ovLYTPbpM1vqSDx","FraC6xzLy1ei91l1ICyc9","6ceBas2RE9Q4787GDngH7","734cd78d-0bc9-426b-803d-1efc84dfffe5","k4Bb09px6r0FxIRs49SXV","oaG3H1S9IUBO644nGZigu","Ka7agQJkUMRSWN0uFdkWK","si3z090WsiLasMhJBa1Az","ljKAVERmdEiKLK9hXGKBm","LIcuGYV0DDt1VWbvH6Sed","MgUSrpNCIwDOW4fX3vPOF","bZumdyapJ2H0wWWOmJ45i","QHXEIyeZGIGMVi5Q52UWI","i5Fya3Vzzm0rBT0ctByuo"],"parent":null,"data":{},"body":"\n# Digital Garden\n\nThis Wiki of Personal Information is organized according to domains and their\nsub-domains, along with specific implementation of those domains.\n\nFor instance, Git itself is a domain. Sub-domains of Git, would be `commit`,\n`tags`, `reflog` etc. implementations of each of those could be `cli`, `strat`\n(strategies), `inner` etc.\n\nThe goal of the wiki is to present data in a manner that is from the perspective\nof a querying user. Here, a user is a programmer wanting to get key information\nfrom a specific domain. For instance, if a user wants to use postgres functions\nand hasn't done them in a while, they should be able to query\n`postgres.functions` to see what information is available to them.\n\nThis wiki has been written with myself in mind. While learning each of these\ndomains, I have been sensitive to the \"aha\" moments and have noted down my\ninsights as they arose. I have refrained from capturing information that I\nconsidered obvious or otherwise non-beneficial to my own understanding.\n\nThe ability I hope to gain from this wiki is the ability to step away from any\ngiven domain for a long period of time, and be able to be passably useful for\nwhatever my goals are within a short period of time. Of course, this is all\nvague sounding, and really depends on the domain, along with the ends I am\ntrying to reach.\n\nTo achieve this, the system should be steadfast to:\n- be able to put information in relatively easily, without too much thought\n\trequired to make that determination.\n- be able to extract the information that we need, meaning there is a\n\thigh-degree in confidence in the location of the information. The idea is\n\tthat information loses a large amount of its value when it is unfindable.\n\tTherefore, a relatively strict ideology should be used when determining\n\twhere a piece of information belongs.\n"},"collectionChildren":null,"customHeadContent":null,"config":{"version":3,"useFMTitle":true,"useNoteTitleForLink":true,"noLegacyNoteRef":true,"mermaid":true,"useKatex":true,"dev":{"enablePreviewV2":true},"site":{"assetsPrefix":"/Digital-Garden","siteUrl":"https://tycholiz.github.io","copyAssets":true,"siteHierarchies":["root"],"siteRootDir":"docs","usePrettyRefs":true,"title":"Dendron","description":"Publishable tech notes","duplicateNoteBehavior":{"action":"useVault","payload":["tech"]},"siteLastModified":true,"gh_edit_branch":"main","usePrettyLinks":true,"siteNotesDir":"notes","siteFaviconPath":"favicon.ico","gh_edit_link":true,"gh_edit_link_text":"Edit this page on GitHub","gh_root":"docs/","gh_edit_view_mode":"edit","writeStubs":true,"siteIndex":"root"},"commands":{"lookup":{"note":{"selectionMode":"extract","confirmVaultOnCreate":false,"leaveTrace":false}},"insertNote":{"initialValue":"templates"},"insertNoteLink":{"aliasMode":"none","enableMultiSelect":false},"insertNoteIndex":{"enableMarker":false},"randomNote":{}},"workspace":{"dendronVersion":"0.67.1","vaults":[{"fsPath":"../main/tech","name":"tech"}],"journal":{"dailyDomain":"daily","name":"journal","dateFormat":"y.MM.dd","addBehavior":"childOfDomain"},"scratch":{"name":"scratch","dateFormat":"y.MM.dd.HHmmss","addBehavior":"asOwnDomain"},"graph":{"zoomSpeed":1},"enableAutoCreateOnDefinition":false,"enableXVaultWikiLink":false,"enableRemoteVaultInit":true,"workspaceVaultSyncMode":"noCommit","enableAutoFoldFrontmatter":true,"maxPreviewsCached":10,"maxNoteLength":204800,"task":{"name":"","dateFormat":"","addBehavior":"childOfCurrent","statusSymbols":{"":" ","wip":"w","done":"x","assigned":"a","moved":"m","blocked":"b","delegated":"l","dropped":"d","pending":"y"},"prioritySymbols":{"H":"high","M":"medium","L":"low"},"todoIntegration":false,"createTaskSelectionType":"selection2link"},"enableUserTags":true,"enableHashTags":true},"usePrettyRefs":true}},"__N_SSG":true}