{"pageProps":{"note":{"id":"5uuohllUAxCmbMFJb8Pj9","title":"Dynamo Streams","desc":"","updated":1641054902510,"created":1639433200836,"custom":{},"fname":"aws.svc.dynamo.streams","type":"note","vault":{"fsPath":"../main/tech","name":"tech"},"contentHash":"5a11251e363abde822ef0851e9dcb131","links":[{"type":"wiki","from":{"fname":"aws.svc.dynamo.streams","id":"5uuohllUAxCmbMFJb8Pj9","vaultName":"tech"},"value":"general.lang.data-structs.log","alias":"change logs","position":{"start":{"line":8,"column":71,"offset":450},"end":{"line":8,"column":116,"offset":495},"indent":[]},"xvault":false,"sameFile":false,"to":{"fname":"general.lang.data-structs.log"}},{"type":"wiki","from":{"fname":"aws.svc.dynamo.streams","id":"5uuohllUAxCmbMFJb8Pj9","vaultName":"tech"},"value":"aws.svc.lambda","alias":"AWS Lambdas","position":{"start":{"line":15,"column":40,"offset":911},"end":{"line":15,"column":70,"offset":941},"indent":[]},"xvault":false,"sameFile":false,"to":{"fname":"aws.svc.lambda"}},{"type":"wiki","from":{"fname":"aws.svc.dynamo.streams","id":"5uuohllUAxCmbMFJb8Pj9","vaultName":"tech"},"value":"sql.view.materialized","alias":"materialized views","position":{"start":{"line":33,"column":72,"offset":2232},"end":{"line":33,"column":116,"offset":2276},"indent":[]},"xvault":false,"sameFile":false,"to":{"fname":"sql.view.materialized"}},{"type":"wiki","from":{"fname":"aws.svc.dynamo.streams","id":"5uuohllUAxCmbMFJb8Pj9","vaultName":"tech"},"value":"general.objects.iterator","alias":"iterator","position":{"start":{"line":54,"column":9,"offset":3250},"end":{"line":54,"column":46,"offset":3287},"indent":[]},"xvault":false,"sameFile":false,"to":{"fname":"general.objects.iterator"}}],"anchors":{"endpoints":{"type":"header","text":"Endpoints","value":"endpoints","line":24,"column":0,"depth":3},"problem-sets-solved-by-dynamodb-streams":{"type":"header","text":"Problem sets solved by DynamoDB Streams","value":"problem-sets-solved-by-dynamodb-streams","line":32,"column":0,"depth":2},"components-of-a-dynamodb-stream":{"type":"header","text":"Components of a DynamoDB Stream","value":"components-of-a-dynamodb-stream","line":43,"column":0,"depth":2},"shard":{"type":"header","text":"Shard","value":"shard","line":49,"column":0,"depth":3},"sharditerator":{"type":"header","text":"ShardIterator","value":"sharditerator","line":59,"column":0,"depth":4},"stream-record":{"type":"header","text":"(Stream) Record","value":"stream-record","line":67,"column":0,"depth":3},"sequence-number":{"type":"header","text":"Sequence Number","value":"sequence-number","line":73,"column":0,"depth":4},"how-to-access-individual-stream-records":{"type":"header","text":"How to access individual stream records","value":"how-to-access-individual-stream-records","line":82,"column":0,"depth":2},"streams-api":{"type":"header","text":"Streams API","value":"streams-api","line":88,"column":0,"depth":2},"ue-resources":{"type":"header","text":"UE Resources","value":"ue-resources","line":95,"column":0,"depth":1}},"children":[],"parent":"gEztUcJYazBs8J8k0gi7o","data":{}},"body":"<h1 id=\"dynamo-streams\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#dynamo-streams\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>Dynamo Streams</h1>\n<p>A DynamoDB Stream is a time-ordered sequence of modifications made to items in a single DynamoDB table.</p>\n<ul>\n<li>each stream record provides information about the item-level modification that was made.</li>\n<li>When you enable a stream on a table, DynamoDB captures information about every modification to data items in the table.\n<ul>\n<li>disabled by default</li>\n</ul>\n</li>\n<li>DynamoDB Streams are near realtime.</li>\n</ul>\n<p>A Dynamo Stream is basically Dynamo's way of exposing its table-level <a href=\"/Digital-Garden/notes/mH9p012Girn7AC2S2mhAp\">change logs</a>.</p>\n<p>Data is durably stored for up to 24 hours.</p>\n<p>DynamoDB streams are a bit like a direct messaging queue integration (Kinesis/Kafka) with a table that contains all the events that are happening in the table.</p>\n<ul>\n<li>This differs from usual streaming where data can be a complete business object. In a DynamoDB stream, users are limited to the table that triggered the stream events.</li>\n</ul>\n<p>DynamoDB streams can be processed with <a href=\"/Digital-Garden/notes/OSdV9FvBG3wDbRNLllg0V\">AWS Lambdas</a>.</p>\n<ul>\n<li>To achieve best separation of concerns, use one Lambda function per DynamoDB Stream. It will help you keep IAM permissions minimal and code as simple as possible</li>\n</ul>\n<h3 id=\"endpoints\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#endpoints\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>Endpoints</h3>\n<p>DynamoDB and DynamoDB Streams are accessed via different endpoints.</p>\n<ul>\n<li>the DynamoDB endpoint lets us work with database tables and indexes</li>\n<li>the DynamoDB Streams endpoint lets us work with records</li>\n</ul>\n<p>The naming convention for DynamoDB Streams endpoints is <code>streams.dynamodb.&#x3C;region>.amazonaws.com</code>.</p>\n<ul>\n<li>ex. if you use the endpoint <code>dynamodb.us-west-2.amazonaws.com</code> to access DynamoDB, you would use the endpoint <code>streams.dynamodb.us-west-2.amazonaws.com</code> to access DynamoDB Streams.</li>\n</ul>\n<h2 id=\"problem-sets-solved-by-dynamodb-streams\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#problem-sets-solved-by-dynamodb-streams\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>Problem sets solved by DynamoDB Streams</h2>\n<p>DynamoDB Streams are great if you want to decouple your application core business logic from effects that should happen afterward.</p>\n<ul>\n<li>\n<p>Your base code can be minimal while you can still \"plug-in\" more Lambda functions reacting to changes as your software evolves.</p>\n</li>\n<li>\n<p>How do you set up a relationship across multiple tables in which, based on the value of an item from one table, you update the item in a second table?</p>\n</li>\n<li>\n<p>How do you trigger an event based on a particular item change?</p>\n</li>\n<li>\n<p>How do you audit or archive data?</p>\n</li>\n<li>\n<p>How do you replicate data across multiple tables (similar to that of <a href=\"/Digital-Garden/notes/3OMg1deJDuVeA3uR0oSsY\">materialized views</a>/streams/replication in relational data stores)?</p>\n</li>\n</ul>\n<p>DynamoDB Streams works particularly well with AWS Lambda due to its event-driven nature.</p>\n<h2 id=\"components-of-a-dynamodb-stream\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#components-of-a-dynamodb-stream\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>Components of a DynamoDB Stream</h2>\n<p>The following diagram shows the relationship between a stream, shards in the stream, and stream records in the shard.</p>\n<p><img src=\"/Digital-Garden/assets/images/2021-12-13-14-37-18.png\"></p>\n<h3 id=\"shard\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#shard\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>Shard</h3>\n<p>Stream records from a single stream are organized into uniquely identifiable groups called <em>shards</em>.</p>\n<ul>\n<li>Each shard acts as a container for multiple stream records, and contains information required for accessing and iterating through these records.</li>\n</ul>\n<p>Shards are ephemeral: They are created and deleted automatically, as needed. Any shard can also split into multiple new shards; this also occurs automatically.</p>\n<p>Shards are distributed by nature.</p>\n<p>We know ahead of time how many shards there will be. Even if new records are added to the stream after the fact, this number of shards doesn't change.</p>\n<h4 id=\"sharditerator\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#sharditerator\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>ShardIterator</h4>\n<p>A shard <a href=\"/Digital-Garden/notes/uyc7zM5lyRzHIsmnsSkFT\">iterator</a> provides information about how to retrieve the stream records from within a shard. Use the shard iterator in a subsequent <code>GetRecords</code> request to read the stream records from the shard.</p>\n<p>Each ShardIterator has a ShardIteratorType which determines how the shard iterator is used to start reading stream records from the shard.</p>\n<ul>\n<li><a href=\"https://docs.aws.amazon.com/amazondynamodb/latest/APIReference/API_streams_GetShardIterator.html\">(docs)</a></li>\n</ul>\n<p>a ShardIterator specifies a location within a shard, but that location could be either the oldest/newest/etc so NextShardIterator allows you to determine where the next set of records are to then iterate through</p>\n<h3 id=\"stream-record\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#stream-record\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>(Stream) Record</h3>\n<p>A record is a description of a unique event within a stream.</p>\n<p>A record contains information about a data modification to a single item in a DynamoDB table.</p>\n<ul>\n<li>You can configure the stream so that the stream records capture additional information, such as the \"before\" and \"after\" images of modified items.</li>\n</ul>\n<h4 id=\"sequence-number\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#sequence-number\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>Sequence Number</h4>\n<p>Each record has a sequence number that locates it in chronological order within a given shard.</p>\n<ul>\n<li>it is unique per partition-key within its shard.\n<ul>\n<li>in the same partition-key, sequence numbers generally increase over timeâ€” The longer the time period between write requests, the larger the sequence numbers become.\n<ul>\n<li>however, there is no guarantee the sequence number will increase by 1.</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<p>The sequence number reflects the order in which the record was published to the stream.</p>\n<ul>\n<li>Therefore, the sequence number will stay sequential so long as it is in the same partition.</li>\n</ul>\n<h2 id=\"how-to-access-individual-stream-records\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#how-to-access-individual-stream-records\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>How to access individual stream records</h2>\n<p>To access a stream and process the stream records within, you must do the following:</p>\n<ol>\n<li>Determine the unique ARN of the stream that you want to access.</li>\n<li>Determine which shards in the stream contain the stream records that you are interested in.</li>\n<li>Access the shards and retrieve the stream records that you want.</li>\n</ol>\n<h2 id=\"streams-api\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#streams-api\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>Streams API</h2>\n<p>The DynamoDB Streams API provides the following actions for use by application programs:</p>\n<ul>\n<li><code>ListStreams</code> â€” Returns a list of stream descriptors for the current account and endpoint. You can optionally request just the stream descriptors for a particular table name.</li>\n<li><code>DescribeStream</code> â€” Returns detailed information about a given stream. The output includes a list of shards associated with the stream, including the shard IDs.</li>\n<li><code>GetShardIterator</code> â€” Returns a shard iterator, which describes a location within a shard. You can request that the iterator provide access to the oldest point, the newest point, or a particular point in the stream.</li>\n<li><code>GetRecords</code> â€” Returns the stream records from within a given shard. You must provide the shard iterator returned from a GetShardIterator request.</li>\n</ul>\n<h1 id=\"ue-resources\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#ue-resources\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>UE Resources</h1>\n<p><a href=\"https://www.macrometa.com/event-stream-processing/dynamodb-streams\">https://www.macrometa.com/event-stream-processing/dynamodb-streams</a></p>","noteIndex":{"id":"olZIVfSs2uLLr3BppFh4K","title":"Root","desc":"","updated":1618676699718,"created":1615482407722,"custom":{"nav_order":0,"permalink":"/"},"fname":"root","type":"note","vault":{"fsPath":"../main/tech","name":"tech"},"contentHash":"777fb4dab9bcf63cbfe772245d7e4871","links":[],"anchors":{"digital-garden":{"type":"header","text":"Digital Garden","value":"digital-garden","line":8,"column":0,"depth":1}},"children":["zFMjbn3xihVNHjUIdZCD1","IK6NOKemuDjhfstJBovKL","RS8qp1GxwtiJopCUHTTtq","ZaTr28eWk1DrXOEsc1YVb","Vi0WYVLZunVM9iR8XZJn3","ngAbg7gluvbt1bY1UIRsi","RCPPXSakm5TvKka8kOmVp","MPx8ykTP57I40WTZvTP7f","ZU5WmdTG1bHoE8RcmZXZG","jqWiyYJff92RjXuUQt9PQ","KihijM8OQvZ4pASkkhqzL","F9vyqvls3OBCujtukqKhy","facc2b01-755a-409f-99f6-57bef2d1501f","m5ov42Vm6mR7RQWTvl1NW","YYt62mSW964cwb5nP0hva","PZxxZ4iESzSlbbHJKxuAZ","UDu62Pa6BaRqlG8uGoMhy","nMCtMXVvjBsJk3iw1zoIO","ANfx9Z4a6ZA0uJuSHtbIJ","BkG557LKUYbH1DnxprEVT","1TaH8zDTM98FZ9SYaeXLM","dc79799f-a55d-48ab-a8be-c48adb1b19c0","f6feef57-b8f5-451f-a09a-7b63f6a07183","4sz47Y0LKs1Si73rWtyyh","5a9fb1df-478e-4687-9be0-5cb97e61ec57","1374e9e9-1cbc-4e1f-b1ca-66b8569533dd","f529cc34-aba0-45ca-ad7e-02ddda318941","0zcauha3il2NqtxZazIo7","9bbd6f68-03b2-41f4-92e4-2ca313e8b450","5a2ab598-fa7e-4471-8bda-9f5831b679ae","uV6w4mZPoohWyZV4Xaad0","RgE0mZLaUjPftFPZsiAoe","mytCOts26Pidush65tdRW","fwUzxfLSPMH1eL8oBoLWx","TbW7PM9bg1y5TGkiWwQ8b","xiSIDeEtIc8X0lpUQlppI","0jxgntiLNHWFuCbzqtFGF","GkdMprLUe4QQULBxmGN6V","4SYc6v5hxY5g6Ip6kjpwO","fqVQpS9FBiXgKsZX3R3sJ","L5JUZlGAGvTxrsEBB7DY8","963c4b54-02bd-4943-a15f-52cf59ffd0f4","TeTedoeS2LdHPR632eCpM","e65188a1-177e-4ab2-99f9-75f85d537621","fajYnbVhCRDi74xn0H30R","bArGdGwqo3iFkyKMyE7qR","4Dcp7gbEVoLLgfu7bXFai","5d700782-fb81-416e-83f9-5dd88260e350","zubgzhNFE6KlTgXcjTz6O","8lpdfWa0cbSq1XJQbcYcY","17I8ZksXvqCH1mRtZDjHp","kF916Ow84qpJJeMRkWMIo","tMLkLcrIHHBz56xVmBLkP","CSePBQ6q7qhowKESqVwt7","laZ4OfLhZNK1Kuy6GaWUr","z5IJblOknQhMzZ5QZh4ye","N36FHxfxzwJfxDY3miWyX","3bb25f58-2b50-4fa3-af55-48ea9f88a081","aOqNcxZh8qN4MoBJcvGTc","u93Rz4fEWGu6VBR30Zraf","9hjMHnKvYT4jLKvuDSXaV","LgW7mTIALODoXc54B3p6S","UYPxfHBFWX7fb6hHU5bB6","qxSOd6SPN8qf9ZUojVFDX","WQoMTf6VXBaxCgksXAVsj","2Mw4XgfyCHXHNOX5yoCIY","UFrwsXzC1yr7Ge8FF8Vbo","a8edc4ac-028b-40ec-872a-e4a005b04b2a","0XJqmcdtcMZu66glBI5O8","lK8r8BXS4ThiUTe4xKIZe","93de42ca-53ea-460a-baa7-b9ec5c47cb1e","Rxs2jaGpdFzqYtP7lAJFJ","aO8W81Z0PyIb6Hs7nOHPW","I01hENHnh8Tqu3Ok8sLzG","evqsPNutOaZ8hcBCqxFQu","zhhxcjZUHdU8uRLwGb9Zh","G1aFACZB2ooWGMGwyd3ZW","YWy1C4tgoaCcw1m8JJsr7","Szj3o5iaNxPpesiCqwrbu","XhvCDW3fIw6h6MhY5ticq","Q70g7SusFZBQXzkuQifv4","AzfWDH3wp7jFpL2EYxBcW","y0fwpZ9qMqirsLiFyOciU","ZF8xj8wwDUqKlrwTrCFZ1","tAJvhqhdfyZZa87QHq1TU","4hRmipi8lxpBLyzWu5JVB","iTg0C7QjvnmqBZeEigJNs","3babc3d2-79ae-470a-9c06-ab8bba2e684e","bF3UsMFya3fMeXWDspVov","ULkfbL9WpktbVYnzhl6Jw","PpNOO8JYWe6dM8wruSa7x","di40pCxDn7IiqE8lFdD46","rmW0mkerqV35I8QPji6lM","3IFIK1ByzeIxZCByryGLN","iImkYAKfkw3beAl6pLbDn","tho65KN0ZpjQlVvP1fEzM","ecDe8DNWrkeQTwpTEvHje","Yqhdd9mSJGN7OJOeyoSD2","NEhsoOfR7J6o01ielAuUm","Ws5tah8tpeyn9tK8VBTg8","Bqpifx2HX3vjLhX9yvhTV","gWAg15uBJgkS2B0wcpMAa","l7V3v2ep1YdDCt7DOr7Ci","yM2PJBdqJnHpD63cPA6sW","qn0bre7eLbi3QMbCfWkUi","fSu0KxFL41IRouotqmbHs","0gtg24Mj1a1bQFPRGQNlO","7iQPBMltLPLbFEz2qbjPu","yoh4pwoXcfELInGKRdYf6","dCGCWXgAmiOZXbdULT1m6","jMavlje07sNa6hSEIE8WA","Xxm0JE4dKHxrQAaZfzvxD","PAEBZCyFBZJyR7OoMZ41E","PQ6km8RgRCuyICBPOYz8f","2bhftt8rGuxYu4pFgNqru","hjYIZpHQWuXfeEoGeJEKW","K2M9bQqVq2eQfm29eslKL","X8obW1iKwYsvNgKWGyCzy","yJwSC7hqYIezTFHf5i0Ev","c4Z7ETcOHUILRMH32Sfjw","qiR6dIu857b9M9kTqjOyK","8vflbCVkwZtYcqdDDTNAz","Ku1OgHMhELajzo61Gx7ye","LUrfhDWo8wuwZu7CN9TV8","osu6JGOnvXJ5gt3tpqWZY","1a6173cd-cf13-4b34-a522-8350bf9a364f","ZgCUp366YrF2Tyky2NT73","S2sBltrPfd8a7ICuD7CuH","oWCuBXOg6JWfZzjmKxmNl","jOmhZ8ovLYTPbpM1vqSDx","FraC6xzLy1ei91l1ICyc9","6ceBas2RE9Q4787GDngH7","734cd78d-0bc9-426b-803d-1efc84dfffe5","k4Bb09px6r0FxIRs49SXV","oaG3H1S9IUBO644nGZigu","Ka7agQJkUMRSWN0uFdkWK","si3z090WsiLasMhJBa1Az","ljKAVERmdEiKLK9hXGKBm","LIcuGYV0DDt1VWbvH6Sed","MgUSrpNCIwDOW4fX3vPOF","bZumdyapJ2H0wWWOmJ45i","QHXEIyeZGIGMVi5Q52UWI","i5Fya3Vzzm0rBT0ctByuo"],"parent":null,"data":{},"body":"\n# Digital Garden\n\nThis Wiki of Personal Information is organized according to domains and their\nsub-domains, along with specific implementation of those domains.\n\nFor instance, Git itself is a domain. Sub-domains of Git, would be `commit`,\n`tags`, `reflog` etc. implementations of each of those could be `cli`, `strat`\n(strategies), `inner` etc.\n\nThe goal of the wiki is to present data in a manner that is from the perspective\nof a querying user. Here, a user is a programmer wanting to get key information\nfrom a specific domain. For instance, if a user wants to use postgres functions\nand hasn't done them in a while, they should be able to query\n`postgres.functions` to see what information is available to them.\n\nThis wiki has been written with myself in mind. While learning each of these\ndomains, I have been sensitive to the \"aha\" moments and have noted down my\ninsights as they arose. I have refrained from capturing information that I\nconsidered obvious or otherwise non-beneficial to my own understanding.\n\nThe ability I hope to gain from this wiki is the ability to step away from any\ngiven domain for a long period of time, and be able to be passably useful for\nwhatever my goals are within a short period of time. Of course, this is all\nvague sounding, and really depends on the domain, along with the ends I am\ntrying to reach.\n\nTo achieve this, the system should be steadfast to:\n- be able to put information in relatively easily, without too much thought\n\trequired to make that determination.\n- be able to extract the information that we need, meaning there is a\n\thigh-degree in confidence in the location of the information. The idea is\n\tthat information loses a large amount of its value when it is unfindable.\n\tTherefore, a relatively strict ideology should be used when determining\n\twhere a piece of information belongs.\n"},"collectionChildren":null,"customHeadContent":null,"config":{"version":3,"useFMTitle":true,"useNoteTitleForLink":true,"noLegacyNoteRef":true,"mermaid":true,"useKatex":true,"dev":{"enablePreviewV2":true},"site":{"assetsPrefix":"/Digital-Garden","siteUrl":"https://tycholiz.github.io","copyAssets":true,"siteHierarchies":["root"],"siteRootDir":"docs","usePrettyRefs":true,"title":"Dendron","description":"Publishable tech notes","duplicateNoteBehavior":{"action":"useVault","payload":["tech"]},"siteLastModified":true,"gh_edit_branch":"main","usePrettyLinks":true,"siteNotesDir":"notes","siteFaviconPath":"favicon.ico","gh_edit_link":true,"gh_edit_link_text":"Edit this page on GitHub","gh_root":"docs/","gh_edit_view_mode":"edit","writeStubs":true,"siteIndex":"root"},"commands":{"lookup":{"note":{"selectionMode":"extract","confirmVaultOnCreate":false,"leaveTrace":false}},"insertNote":{"initialValue":"templates"},"insertNoteLink":{"aliasMode":"none","enableMultiSelect":false},"insertNoteIndex":{"enableMarker":false},"randomNote":{}},"workspace":{"dendronVersion":"0.67.1","vaults":[{"fsPath":"../main/tech","name":"tech"}],"journal":{"dailyDomain":"daily","name":"journal","dateFormat":"y.MM.dd","addBehavior":"childOfDomain"},"scratch":{"name":"scratch","dateFormat":"y.MM.dd.HHmmss","addBehavior":"asOwnDomain"},"graph":{"zoomSpeed":1},"enableAutoCreateOnDefinition":false,"enableXVaultWikiLink":false,"enableRemoteVaultInit":true,"workspaceVaultSyncMode":"noCommit","enableAutoFoldFrontmatter":true,"maxPreviewsCached":10,"maxNoteLength":204800,"task":{"name":"","dateFormat":"","addBehavior":"childOfCurrent","statusSymbols":{"":" ","wip":"w","done":"x","assigned":"a","moved":"m","blocked":"b","delegated":"l","dropped":"d","pending":"y"},"prioritySymbols":{"H":"high","M":"medium","L":"low"},"todoIntegration":false,"createTaskSelectionType":"selection2link"},"enableUserTags":true,"enableHashTags":true},"usePrettyRefs":true}},"__N_SSG":true}