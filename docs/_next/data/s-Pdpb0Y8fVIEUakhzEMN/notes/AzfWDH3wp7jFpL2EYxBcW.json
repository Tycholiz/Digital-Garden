{"pageProps":{"note":{"id":"AzfWDH3wp7jFpL2EYxBcW","title":"Nginx","desc":"","updated":1615270208490,"created":1615270186589,"custom":{},"fname":"nginx","type":"note","vault":{"fsPath":"../main/tech","name":"tech"},"contentHash":"b421b301bd41c7c9543e453dfb2c5fff","links":[],"anchors":{"overview":{"type":"header","text":"Overview","value":"overview","line":8,"column":0,"depth":2},"config-file":{"type":"header","text":"Config file","value":"config-file","line":15,"column":0,"depth":3},"blocks":{"type":"header","text":"Blocks","value":"blocks","line":25,"column":0,"depth":2},"server-block":{"type":"header","text":"Server Block","value":"server-block","line":29,"column":0,"depth":3},"location-block":{"type":"header","text":"Location Block","value":"location-block","line":45,"column":0,"depth":3},"tasks-of-nginx":{"type":"header","text":"Tasks of Nginx","value":"tasks-of-nginx","line":73,"column":0,"depth":2},"serving-static-content":{"type":"header","text":"Serving Static Content","value":"serving-static-content","line":74,"column":0,"depth":3},"reverse-proxy-server":{"type":"header","text":"Reverse Proxy Server","value":"reverse-proxy-server","line":86,"column":0,"depth":3},"debugging":{"type":"header","text":"Debugging","value":"debugging","line":102,"column":0,"depth":2},"pitfalls":{"type":"header","text":"Pitfalls","value":"pitfalls","line":106,"column":0,"depth":3}},"children":["kN2VXDxgpmbqNwAfumuEu"],"parent":"olZIVfSs2uLLr3BppFh4K","data":{}},"body":"<h1 id=\"nginx\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#nginx\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>Nginx</h1>\n<h2 id=\"overview\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#overview\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>Overview</h2>\n<ul>\n<li>Nginx has 1 master process, and multiple worker processes.\n<ul>\n<li>The master's job is to read configuration files, and to manage the worker processes.</li>\n<li>The worker processes handle the requests.</li>\n</ul>\n</li>\n<li>Nginx uses an event-based model to distribute requests among workers</li>\n<li>The # of workers is specified in the config file, and may either be fixed, or adjustable based on how many cores the CPU has. </li>\n</ul>\n<h3 id=\"config-file\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#config-file\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>Config file</h3>\n<ul>\n<li>The nginx config file <code>nginx.conf</code> is stored either in <code>/usr/local/nginx/conf</code>, <code>/etc/nginx</code>, or <code>/usr/local/etc/nginx</code>.</li>\n<li>nginx consists of modules which are controlled by directives specified in the configuration file\n<ul>\n<li>Directives can either be simple directives or block directives\n<ul>\n<li>simple ends with <code>;</code>, block uses <code>{}</code></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>If a directive can have other directives inside, it is called a Context \n<ul>\n<li>ex. <code>events</code>, <code>http</code>, <code>server</code>, <code>location</code></li>\n</ul>\n</li>\n<li>If a directive is not placed within a Context, then it is considered to be in the Main Context. \n<ul>\n<li>The <code>events</code> and <code>http</code> directives reside in the Main Context, <code>server</code> in <code>http</code>, and <code>location</code> in <code>server</code>.</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"blocks\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#blocks\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>Blocks</h2>\n<ul>\n<li>Nginx divides the configurations meant to serve different content into Blocks, which live in a hierarchical structure.</li>\n<li>Each time a client request is made to the server, Nginx begins a process of determining which hierarchical block should be used to handle the request.</li>\n</ul>\n<h3 id=\"server-block\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#server-block\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>Server Block</h3>\n<ul>\n<li>Defines a virtual server used to handle requests of a defined type\n<ul>\n<li>each Server Block functions as a separate virtual web server instance</li>\n</ul>\n</li>\n<li>Based on the domain name, port and IP address requested, we can configure multiple server blocks to handle each combination.</li>\n<li>The <code>server_name</code> and <code>listen</code> directives are used to determine which server block should be used to fulfill a request. They are used to bind to tcp sockets.\n<ul>\n<li>With <code>listen</code>, we can use a lone IP, a lone port, or a combo of the two. If we only specify one, then defaults are used\n<ul>\n<li>default port: 80</li>\n<li>default IP: 0.0.0.0</li>\n</ul>\n</li>\n<li>the <code>server_name</code> directive is only evaluated when nginx needs to distinguish between server blocks that match to the same level of specificity in the <code>listen</code> directive. Put another way, it is a \"specificity tie-breaker\" \n<ul>\n<li>in other words, if <code>example.com</code> is hosted on <code>192.168.1.10:80</code>, a request will always be served by a server block that specifies <code>listen 192.168.1.10</code>, even if there is another server block that specifies <code>server_name example.com</code></li>\n</ul>\n</li>\n<li>Finally, if further specificity is needed, then the Host header from the request (which contains the URI that the client was trying to reach) is used. \n<ul>\n<li>When using wildcard matching, the longest match beginning with a wildcard is used\n<ul>\n<li>ex. if the request has a Host header of <code>www.example.com</code>, and we have 3 server blocks with <code>server_name</code> of <code>*.example.com</code>, <code>www.example.*</code> and <code>*.com</code>, <code>*.example.com</code> would win out.</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>With server blocks, we can run more than one website on a single host</li>\n<li>in Apache, called <em>VirtualHost</em> </li>\n</ul>\n<h3 id=\"location-block\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#location-block\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>Location Block</h3>\n<ul>\n<li>Lives within a Server Block (or nested in other location blocks).</li>\n<li>Determine how Nginx should handle the part of the request that comes after IP:port (ie. the URI).</li>\n<li>Similar to how Nginx has a specificity-based process for determining which server block will process the request, Nginx has an algorithm to determine which location block within the server should be used for handling requests.</li>\n<li>Location blocks take the following form:</li>\n</ul>\n<pre><code>location &#x3C;optional_modifier> &#x3C;location_match> {\n}\n</code></pre>\n<ul>\n<li>The <code>location_match</code> defines what Nginx should check the request URI against.</li>\n<li>The <code>optional_modifier</code> affects the way Nginx will attempt to match the location block.\n<ul>\n<li>ex. check for prefix match (default), check for exact match (<code>=</code>), check for case-sensitive Regex (<code>~</code>)</li>\n</ul>\n</li>\n<li>The URI specified after <code>location</code> will be added to the path specified in the <em>root directive</em>\n<ul>\n<li>ex. if we specify <code>root /var/www/</code> and the location block specifies <code>/images/</code>, then the path to the requested file on the local FS will be <code>/var/www/images</code></li>\n</ul>\n</li>\n<li>ex. Imagine we had a server block:</li>\n</ul>\n<pre><code>server {\n    location / {\n        root /data/www;\n    }\n\n    location /images/ {\n        root /data;\n    }\n}\n</code></pre>\n<p>in response to a request with URI starting with <code>/images/</code>, the server will send files from the <code>/data/images</code> directory. </p>\n<h2 id=\"tasks-of-nginx\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#tasks-of-nginx\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>Tasks of Nginx</h2>\n<h3 id=\"serving-static-content\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#serving-static-content\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>Serving Static Content</h3>\n<ul>\n<li>Nginx can be configured to serve static content, such as HTML and images.</li>\n<li>this involves setting up of a server block inside the http block with two location blocks.\n<ul>\n<li>multiple server blocks are able to be added, each specifying a different port.</li>\n</ul>\n</li>\n</ul>\n<pre><code>http {\n\tserver {\n\t\t\n\t}\n}\n</code></pre>\n<h3 id=\"reverse-proxy-server\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#reverse-proxy-server\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>Reverse Proxy Server</h3>\n<ul>\n<li>When Nginx proxies a request, it sends the request to a specified proxied server, fetches the response, and sends it back to the client\n<ul>\n<li>it is possible to proxy requests to another HTTP server (eg. another Nginx server) or to a non-HTTP server (eg. express.js)\n<ul>\n<li>We use a specified protocol like FastCGI to do this</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>We can establish a proxy server by using the <code>proxy_pass</code> directive within a <em>location block</em>.\n<ul>\n<li>The value of <code>proxy_pass</code> is the address of the proxy server:</li>\n</ul>\n</li>\n</ul>\n<pre><code>location /some/path/ {\n    proxy_pass http://www.example.com/link/;\n}\n</code></pre>\n<ul>\n<li>In this config, all requests processed to <code>/some/path/</code> to be sent to the proxy server at <code>http://www.example.com/link/</code>.\n<ul>\n<li>ex. the request with the URI of <code>/some/path/page.html</code> will be proxied to <code>http://www.example.com/link/page.html</code></li>\n</ul>\n</li>\n<li>to pass a request to a non-HTTP server, the appropriate <code>*_pass</code> directive should be used\n<ul>\n<li>ex. <code>fastcgi_pass</code></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"debugging\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#debugging\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>Debugging</h2>\n<ul>\n<li>upon changing nginx.conf, we need to reload the nginx server with <code>nginx -s reload</code>.</li>\n<li>logs are stored at either <code>/usr/local/nginx/logs</code> or <code>/var/log/nginx</code></li>\n</ul>\n<h3 id=\"pitfalls\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#pitfalls\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>Pitfalls</h3>\n<ul>\n<li>A <em>root directive</em> should occur outside of the location block. We can then use another <em>root directive</em> within a <em>location block</em> if we want to override it.\n<ul>\n<li>Conversely, if you were to add a root to every location block then a location block that isn’t matched will have no root. Therefore, it is important that a root directive occur prior to your location blocks, which can then override this directive if they need to.</li>\n</ul>\n</li>\n<li><a href=\"https://www.nginx.com/resources/wiki/start/topics/tutorials/config_pitfalls/\">source</a></li>\n</ul>\n<hr>\n<h2 id=\"children\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#children\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>Children</h2>\n<ol>\n<li><a href=\"/Digital-Garden/notes/kN2VXDxgpmbqNwAfumuEu\">Conf</a></li>\n</ol>","noteIndex":{"id":"olZIVfSs2uLLr3BppFh4K","title":"Root","desc":"","updated":1618676699718,"created":1615482407722,"custom":{"nav_order":0,"permalink":"/"},"fname":"root","type":"note","vault":{"fsPath":"../main/tech","name":"tech"},"contentHash":"777fb4dab9bcf63cbfe772245d7e4871","links":[],"anchors":{"digital-garden":{"type":"header","text":"Digital Garden","value":"digital-garden","line":8,"column":0,"depth":1}},"children":["zFMjbn3xihVNHjUIdZCD1","IK6NOKemuDjhfstJBovKL","RS8qp1GxwtiJopCUHTTtq","ZaTr28eWk1DrXOEsc1YVb","Vi0WYVLZunVM9iR8XZJn3","ngAbg7gluvbt1bY1UIRsi","RCPPXSakm5TvKka8kOmVp","MPx8ykTP57I40WTZvTP7f","ZU5WmdTG1bHoE8RcmZXZG","jqWiyYJff92RjXuUQt9PQ","KihijM8OQvZ4pASkkhqzL","F9vyqvls3OBCujtukqKhy","facc2b01-755a-409f-99f6-57bef2d1501f","m5ov42Vm6mR7RQWTvl1NW","YYt62mSW964cwb5nP0hva","PZxxZ4iESzSlbbHJKxuAZ","UDu62Pa6BaRqlG8uGoMhy","nMCtMXVvjBsJk3iw1zoIO","ANfx9Z4a6ZA0uJuSHtbIJ","BkG557LKUYbH1DnxprEVT","1TaH8zDTM98FZ9SYaeXLM","dc79799f-a55d-48ab-a8be-c48adb1b19c0","f6feef57-b8f5-451f-a09a-7b63f6a07183","4sz47Y0LKs1Si73rWtyyh","5a9fb1df-478e-4687-9be0-5cb97e61ec57","1374e9e9-1cbc-4e1f-b1ca-66b8569533dd","f529cc34-aba0-45ca-ad7e-02ddda318941","0zcauha3il2NqtxZazIo7","9bbd6f68-03b2-41f4-92e4-2ca313e8b450","5a2ab598-fa7e-4471-8bda-9f5831b679ae","uV6w4mZPoohWyZV4Xaad0","RgE0mZLaUjPftFPZsiAoe","mytCOts26Pidush65tdRW","fwUzxfLSPMH1eL8oBoLWx","TbW7PM9bg1y5TGkiWwQ8b","xiSIDeEtIc8X0lpUQlppI","0jxgntiLNHWFuCbzqtFGF","GkdMprLUe4QQULBxmGN6V","4SYc6v5hxY5g6Ip6kjpwO","fqVQpS9FBiXgKsZX3R3sJ","L5JUZlGAGvTxrsEBB7DY8","963c4b54-02bd-4943-a15f-52cf59ffd0f4","TeTedoeS2LdHPR632eCpM","e65188a1-177e-4ab2-99f9-75f85d537621","fajYnbVhCRDi74xn0H30R","bArGdGwqo3iFkyKMyE7qR","4Dcp7gbEVoLLgfu7bXFai","5d700782-fb81-416e-83f9-5dd88260e350","zubgzhNFE6KlTgXcjTz6O","8lpdfWa0cbSq1XJQbcYcY","17I8ZksXvqCH1mRtZDjHp","kF916Ow84qpJJeMRkWMIo","tMLkLcrIHHBz56xVmBLkP","CSePBQ6q7qhowKESqVwt7","laZ4OfLhZNK1Kuy6GaWUr","z5IJblOknQhMzZ5QZh4ye","N36FHxfxzwJfxDY3miWyX","3bb25f58-2b50-4fa3-af55-48ea9f88a081","aOqNcxZh8qN4MoBJcvGTc","u93Rz4fEWGu6VBR30Zraf","9hjMHnKvYT4jLKvuDSXaV","LgW7mTIALODoXc54B3p6S","UYPxfHBFWX7fb6hHU5bB6","qxSOd6SPN8qf9ZUojVFDX","WQoMTf6VXBaxCgksXAVsj","2Mw4XgfyCHXHNOX5yoCIY","UFrwsXzC1yr7Ge8FF8Vbo","a8edc4ac-028b-40ec-872a-e4a005b04b2a","0XJqmcdtcMZu66glBI5O8","lK8r8BXS4ThiUTe4xKIZe","93de42ca-53ea-460a-baa7-b9ec5c47cb1e","Rxs2jaGpdFzqYtP7lAJFJ","aO8W81Z0PyIb6Hs7nOHPW","I01hENHnh8Tqu3Ok8sLzG","evqsPNutOaZ8hcBCqxFQu","zhhxcjZUHdU8uRLwGb9Zh","G1aFACZB2ooWGMGwyd3ZW","YWy1C4tgoaCcw1m8JJsr7","Szj3o5iaNxPpesiCqwrbu","XhvCDW3fIw6h6MhY5ticq","Q70g7SusFZBQXzkuQifv4","AzfWDH3wp7jFpL2EYxBcW","y0fwpZ9qMqirsLiFyOciU","ZF8xj8wwDUqKlrwTrCFZ1","tAJvhqhdfyZZa87QHq1TU","4hRmipi8lxpBLyzWu5JVB","iTg0C7QjvnmqBZeEigJNs","3babc3d2-79ae-470a-9c06-ab8bba2e684e","bF3UsMFya3fMeXWDspVov","ULkfbL9WpktbVYnzhl6Jw","PpNOO8JYWe6dM8wruSa7x","di40pCxDn7IiqE8lFdD46","rmW0mkerqV35I8QPji6lM","3IFIK1ByzeIxZCByryGLN","iImkYAKfkw3beAl6pLbDn","tho65KN0ZpjQlVvP1fEzM","ecDe8DNWrkeQTwpTEvHje","Yqhdd9mSJGN7OJOeyoSD2","NEhsoOfR7J6o01ielAuUm","Ws5tah8tpeyn9tK8VBTg8","Bqpifx2HX3vjLhX9yvhTV","gWAg15uBJgkS2B0wcpMAa","l7V3v2ep1YdDCt7DOr7Ci","yM2PJBdqJnHpD63cPA6sW","qn0bre7eLbi3QMbCfWkUi","fSu0KxFL41IRouotqmbHs","0gtg24Mj1a1bQFPRGQNlO","7iQPBMltLPLbFEz2qbjPu","yoh4pwoXcfELInGKRdYf6","dCGCWXgAmiOZXbdULT1m6","jMavlje07sNa6hSEIE8WA","Xxm0JE4dKHxrQAaZfzvxD","PAEBZCyFBZJyR7OoMZ41E","PQ6km8RgRCuyICBPOYz8f","2bhftt8rGuxYu4pFgNqru","hjYIZpHQWuXfeEoGeJEKW","K2M9bQqVq2eQfm29eslKL","X8obW1iKwYsvNgKWGyCzy","yJwSC7hqYIezTFHf5i0Ev","c4Z7ETcOHUILRMH32Sfjw","qiR6dIu857b9M9kTqjOyK","8vflbCVkwZtYcqdDDTNAz","Ku1OgHMhELajzo61Gx7ye","LUrfhDWo8wuwZu7CN9TV8","osu6JGOnvXJ5gt3tpqWZY","1a6173cd-cf13-4b34-a522-8350bf9a364f","ZgCUp366YrF2Tyky2NT73","S2sBltrPfd8a7ICuD7CuH","oWCuBXOg6JWfZzjmKxmNl","jOmhZ8ovLYTPbpM1vqSDx","FraC6xzLy1ei91l1ICyc9","6ceBas2RE9Q4787GDngH7","734cd78d-0bc9-426b-803d-1efc84dfffe5","k4Bb09px6r0FxIRs49SXV","oaG3H1S9IUBO644nGZigu","Ka7agQJkUMRSWN0uFdkWK","si3z090WsiLasMhJBa1Az","ljKAVERmdEiKLK9hXGKBm","LIcuGYV0DDt1VWbvH6Sed","MgUSrpNCIwDOW4fX3vPOF","bZumdyapJ2H0wWWOmJ45i","QHXEIyeZGIGMVi5Q52UWI","i5Fya3Vzzm0rBT0ctByuo"],"parent":null,"data":{},"body":"\n# Digital Garden\n\nThis Wiki of Personal Information is organized according to domains and their\nsub-domains, along with specific implementation of those domains.\n\nFor instance, Git itself is a domain. Sub-domains of Git, would be `commit`,\n`tags`, `reflog` etc. implementations of each of those could be `cli`, `strat`\n(strategies), `inner` etc.\n\nThe goal of the wiki is to present data in a manner that is from the perspective\nof a querying user. Here, a user is a programmer wanting to get key information\nfrom a specific domain. For instance, if a user wants to use postgres functions\nand hasn't done them in a while, they should be able to query\n`postgres.functions` to see what information is available to them.\n\nThis wiki has been written with myself in mind. While learning each of these\ndomains, I have been sensitive to the \"aha\" moments and have noted down my\ninsights as they arose. I have refrained from capturing information that I\nconsidered obvious or otherwise non-beneficial to my own understanding.\n\nThe ability I hope to gain from this wiki is the ability to step away from any\ngiven domain for a long period of time, and be able to be passably useful for\nwhatever my goals are within a short period of time. Of course, this is all\nvague sounding, and really depends on the domain, along with the ends I am\ntrying to reach.\n\nTo achieve this, the system should be steadfast to:\n- be able to put information in relatively easily, without too much thought\n\trequired to make that determination.\n- be able to extract the information that we need, meaning there is a\n\thigh-degree in confidence in the location of the information. The idea is\n\tthat information loses a large amount of its value when it is unfindable.\n\tTherefore, a relatively strict ideology should be used when determining\n\twhere a piece of information belongs.\n"},"collectionChildren":null,"customHeadContent":null,"config":{"version":3,"useFMTitle":true,"useNoteTitleForLink":true,"noLegacyNoteRef":true,"mermaid":true,"useKatex":true,"dev":{"enablePreviewV2":true},"site":{"assetsPrefix":"/Digital-Garden","siteUrl":"https://tycholiz.github.io","copyAssets":true,"siteHierarchies":["root"],"siteRootDir":"docs","usePrettyRefs":true,"title":"Dendron","description":"Publishable tech notes","duplicateNoteBehavior":{"action":"useVault","payload":["tech"]},"siteLastModified":true,"gh_edit_branch":"main","usePrettyLinks":true,"siteNotesDir":"notes","siteFaviconPath":"favicon.ico","gh_edit_link":true,"gh_edit_link_text":"Edit this page on GitHub","gh_root":"docs/","gh_edit_view_mode":"edit","writeStubs":true,"siteIndex":"root"},"commands":{"lookup":{"note":{"selectionMode":"extract","confirmVaultOnCreate":false,"leaveTrace":false}},"insertNote":{"initialValue":"templates"},"insertNoteLink":{"aliasMode":"none","enableMultiSelect":false},"insertNoteIndex":{"enableMarker":false},"randomNote":{}},"workspace":{"dendronVersion":"0.67.1","vaults":[{"fsPath":"../main/tech","name":"tech"}],"journal":{"dailyDomain":"daily","name":"journal","dateFormat":"y.MM.dd","addBehavior":"childOfDomain"},"scratch":{"name":"scratch","dateFormat":"y.MM.dd.HHmmss","addBehavior":"asOwnDomain"},"graph":{"zoomSpeed":1},"enableAutoCreateOnDefinition":false,"enableXVaultWikiLink":false,"enableRemoteVaultInit":true,"workspaceVaultSyncMode":"noCommit","enableAutoFoldFrontmatter":true,"maxPreviewsCached":10,"maxNoteLength":204800,"task":{"name":"","dateFormat":"","addBehavior":"childOfCurrent","statusSymbols":{"":" ","wip":"w","done":"x","assigned":"a","moved":"m","blocked":"b","delegated":"l","dropped":"d","pending":"y"},"prioritySymbols":{"H":"high","M":"medium","L":"low"},"todoIntegration":false,"createTaskSelectionType":"selection2link"},"enableUserTags":true,"enableHashTags":true},"usePrettyRefs":true}},"__N_SSG":true}