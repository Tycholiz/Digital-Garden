{"pageProps":{"note":{"id":"ryBzcGWSKyybRXnyKxteV","title":"Service","desc":"","updated":1624072462264,"created":1622066718177,"custom":{},"fname":"k8s.objects.service","type":"note","vault":{"fsPath":"../main/tech","name":"tech"},"contentHash":"d9c664513f05a9abc2be104177fd837c","links":[{"type":"wiki","from":{"fname":"k8s.objects.service","id":"ryBzcGWSKyybRXnyKxteV","vaultName":"tech"},"value":"k8s.components.js.node.kube-proxy","alias":"Kube Proxy","position":{"start":{"line":15,"column":60,"offset":889},"end":{"line":15,"column":108,"offset":937},"indent":[]},"xvault":false,"sameFile":false,"to":{"fname":"k8s.components.js.node.kube-proxy"}},{"type":"wiki","from":{"fname":"k8s.objects.service","id":"ryBzcGWSKyybRXnyKxteV","vaultName":"tech"},"value":"k8s.components.js.node.kube-dns","alias":"Kube DNS","position":{"start":{"line":15,"column":139,"offset":968},"end":{"line":15,"column":183,"offset":1012},"indent":[]},"xvault":false,"sameFile":false,"to":{"fname":"k8s.components.js.node.kube-dns"}},{"type":"ref","from":{"fname":"k8s.objects.service","id":"ryBzcGWSKyybRXnyKxteV","vaultName":"tech"},"value":"k8s.kubectl.cli","position":{"start":{"line":42,"column":1,"offset":2608},"end":{"line":42,"column":69,"offset":2676},"indent":[]},"xvault":true,"to":{"fname":"k8s.kubectl.cli","anchorHeader":"list-env-variables-in-a-pod,1:#*","vaultName":"code"}},{"from":{"fname":"k8s.objects.ingress","vaultName":"tech"},"type":"backlink","position":{"start":{"line":3,"column":55,"offset":169},"end":{"line":3,"column":87,"offset":201},"indent":[]},"value":"k8s.objects.service"}],"anchors":{"service-discovery":{"type":"header","text":"Service discovery","value":"service-discovery","line":33,"column":0,"depth":2},"services-and-env-variables":{"type":"header","text":"Services and Env Variables","value":"services-and-env-variables","line":45,"column":0,"depth":3},"service-discovery-breakdown":{"type":"header","text":"Service discovery breakdown","value":"service-discovery-breakdown","line":54,"column":0,"depth":3},"motivation":{"type":"header","text":"Motivation","value":"motivation","line":69,"column":0,"depth":3},"under-the-hood--adding-a-service":{"type":"header","text":"Under the hood — Adding a service","value":"under-the-hood--adding-a-service","line":75,"column":0,"depth":3},"selector":{"type":"header","text":"Selector","value":"selector","line":89,"column":0,"depth":3},"request-forwarding":{"type":"header","text":"Request forwarding","value":"request-forwarding","line":101,"column":0,"depth":3}},"children":["9YspU1V7eJ9rz91kiTrUN"],"parent":"G8flDlvSL0SmiOVLt7fDX","data":{}},"body":"<h1 id=\"service\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#service\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>Service</h1>\n<p>Without services, there is no way for pods to communicate with each other. The only communication that is available by default is between containers within a pod (via localhost)</p>\n<p>Services should not be used to enable external access to an application.</p>\n<p>Services are based on resources.</p>\n<ul>\n<li>ex. we create a service based on Pods through a ReplicaSet. Put another way, a service is created by exposing the ReplicaSet. This is why we specify the resource type when we are running <code>kubectl expose</code></li>\n</ul>\n<p>A service is an abstract way to expose an application (running on a set of Pods) as a network service.</p>\n<ul>\n<li>this decouples work definitions from the pods</li>\n<li>can be thought of as a logical set of pods and a policy by which to access them\n<ul>\n<li>the front end shouldn't care which backend it uses. Services allow us to achieve this decoupling</li>\n</ul>\n</li>\n</ul>\n<p>A service provides access to pods from inside the cluster (<a href=\"/Digital-Garden/notes/clSKUsYY2MnJsItlIXbTa\">Kube Proxy</a>) or from outside the cluster (<a href=\"/Digital-Garden/notes/7cJuYu1XU2jd1A4C0WS7v\">Kube DNS</a>)</p>\n<p>A service tells the rest of the Kubernetes environment (including other pods and replication controllers) what services your application provides. While pods come and go, the service IP addresses and ports remain the same.  Other applications can find your service through Kurbernetes service discovery</p>\n<p>Since pods of a single service can exist on different machines, it makes sense for us to be able to interact with the service itself, so that we can orchestrate activities between all containers that are part of a service(?)</p>\n<p>When a service is created, it inherits all of the labels of the resource type (eg. ReplicaSet) that the service is based on.</p>\n<ul>\n<li>The service is not directly associated with any controller (eg. ReplicaSet), but rather it is associated with the underlying Pods via the matching labels.</li>\n</ul>\n<p>The problem with services is that each application can be reached through a different port, and we cannot expect users to know the port of each service in our cluster.</p>\n<ul>\n<li>it is a bad practice to publish fixed ports through Services, because it is likely to result in conflicts or, at the very least, create the additional burden of carefully keeping track of which port belongs to which Service.</li>\n</ul>\n<h2 id=\"service-discovery\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#service-discovery\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>Service discovery</h2>\n<p>Services can be discovered through two principal modes:</p>\n<ul>\n<li>Environment variables</li>\n<li>DNS\n<ul>\n<li>DNS is an easier approach</li>\n</ul>\n</li>\n</ul>\n<p>Kubernetes converts Service names into DNSes and adds them to the DNS server.</p>\n<ul>\n<li>This is a cluster add-on that is already set up by Minikube.</li>\n</ul>\n<h3 id=\"services-and-env-variables\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#services-and-env-variables\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>Services and Env Variables</h3>\n<p>Every Pod gets environment variables for each of the active Services\n</p><p></p><div class=\"portal-container\">\n<div class=\"portal-head\">\n<div class=\"portal-backlink\">\n<div class=\"portal-title\">From <span class=\"portal-text-title\">CLI</span></div>\n<a href=\"/Digital-Garden/notes/HnABgT2HZRrecgV5YHg8X\" class=\"portal-arrow\">Go to text <span class=\"right-arrow\">→</span></a>\n</div>\n</div>\n<div id=\"portal-parent-anchor\" class=\"portal-parent\" markdown=\"1\">\n<div class=\"portal-parent-fader-top\"></div>\n<div class=\"portal-parent-fader-bottom\"></div><p><code>kubectl exec &#x3C;POD_NAME> env</code></p>\n<ul>\n<li>list environment variables available in a Pod</li>\n</ul>\n</div></div><p></p><p></p>\n<p>Env provide a reference we can use to connect to a Service and, therefore to the related Pods.</p>\n<p>Through the service IP (<code>kubectl describe svc &#x3C;servicename></code>), we can access the service externally. This IP matches the values of the environment variables <code>GO_DEMO_2_DB_*</code> and <code>GO_DEMO_2_DB_SERVICE_HOST</code>.</p>\n<h3 id=\"service-discovery-breakdown\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#service-discovery-breakdown\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>Service discovery breakdown</h3>\n<ol>\n<li>When the api container go-demo-2 tries to connect with the go-demo-2-db Service, it looks at the nameserver configured in /etc/resolv.conf.\n<ul>\n<li>kubelet configured the nameserver with the kube-dns Service IP (10.96.0.10) during the Pod scheduling process.</li>\n</ul>\n</li>\n<li>The container queries the DNS server listening to port 53. go-demo-2-db DNS gets resolved to the service IP 10.0.0.19.\n<ul>\n<li>This DNS record was added by kube-dns during the service creation process.</li>\n</ul>\n</li>\n<li>The container uses the service IP which forwards requests through the iptables rules.\n<ul>\n<li>They were added by kube-proxy during Service and Endpoint creation process.</li>\n</ul>\n</li>\n<li>Since we only have one replica of the go-demo-2-db Pod, iptables forwards requests to just one endpoint.\n<ul>\n<li>If we had multiple replicas, iptables would act as a load balancer and forward requests randomly among Endpoints of the Service</li>\n</ul>\n</li>\n</ol>\n<p><img src=\"/Digital-Garden/assets/images/2021-06-01-08-40-26.png\"></p>\n<hr>\n<h3 id=\"motivation\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#motivation\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>Motivation</h3>\n<p>Each Pod gets its own IP address, however in a Deployment, the set of Pods running in one moment in time could be different from the set of Pods running that application a moment later.</p>\n<p>This leads to a problem: if some set of Pods (call them “backends”) provides functionality to other Pods (call them “frontends”) inside your cluster, how do the frontends find out and keep track of which IP address to connect to, so that the frontend can use the backend part of the workload?</p>\n<h3 id=\"under-the-hood--adding-a-service\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#under-the-hood--adding-a-service\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>Under the hood — Adding a service</h3>\n<ol>\n<li>In running <code>kubectl expose rs -f rs/go-demo-2.yml</code>, Kubernetes client (kubectl) sent a request to the API server requesting the creation of the Service based on Pods created through the go-demo-2 ReplicaSet.</li>\n<li>Endpoint controller is watching the API server for new service events. It detected that there is a new Service object.</li>\n<li>Endpoint controller created endpoint objects with the same name as the Service, and it used Service selector to identify endpoints (in this case the IP and the port of go-demo-2 Pods).</li>\n<li>kube-proxy is watching for service and endpoint objects. It detected that there is a new Service and a new endpoint object.</li>\n<li>kube-proxy added iptables rules which capture traffic to the Service port and redirect it to endpoints. For each endpoint object, it adds iptables rule which selects a Pod.</li>\n<li>The kube-dns add-on is watching for Service. It detected that there is a new service.</li>\n<li>The kube-dns added db's record to the dns server (skydns).\n<img src=\"/Digital-Garden/assets/images/2021-05-31-10-06-52.png\">\n<img src=\"/Digital-Garden/assets/images/2021-05-31-21-38-25.png\"></li>\n</ol>\n<hr>\n<h3 id=\"selector\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#selector\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>Selector</h3>\n<p>A service contains selector labels which are used to establish communication with the Pods containing the matching labels. There is no relation between the service and the ReplicaSet; both reference Pods through labels.</p>\n<p>The selector is used by the Service to know which Pods should receive requests. It works in the same way as ReplicaSet selectors. In this case, we defined that the service should forward requests to Pods with labels type set to backend and service set to go-demo. Those two labels are set in the Pods spec of the ReplicaSet.</p>\n<pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">selector</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">type</span><span class=\"token punctuation\">:</span> backend\n  <span class=\"token key atrule\">service</span><span class=\"token punctuation\">:</span> go<span class=\"token punctuation\">-</span>demo<span class=\"token punctuation\">-</span><span class=\"token number\">2</span>\n</code></pre>\n<h3 id=\"request-forwarding\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#request-forwarding\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>Request forwarding</h3>\n<p>Each Pod has a unique IP. Incoming requests will be forwarded on to Pods in a round-robin style, that is similar to load balancing.</p>\n<hr>\n<h2 id=\"backlinks\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#backlinks\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>Backlinks</h2>\n<ul>\n<li><a href=\"/Digital-Garden/notes/4b0Xz0VUtXbFaFl1Pri9E\">Ingress</a></li>\n</ul>\n<hr>\n<h2 id=\"children\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#children\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>Children</h2>\n<ol>\n<li><a href=\"/Digital-Garden/notes/9YspU1V7eJ9rz91kiTrUN\">Types</a></li>\n</ol>","noteIndex":{"id":"olZIVfSs2uLLr3BppFh4K","title":"Root","desc":"","updated":1618676699718,"created":1615482407722,"custom":{"nav_order":0,"permalink":"/"},"fname":"root","type":"note","vault":{"fsPath":"../main/tech","name":"tech"},"contentHash":"777fb4dab9bcf63cbfe772245d7e4871","links":[],"anchors":{"digital-garden":{"type":"header","text":"Digital Garden","value":"digital-garden","line":8,"column":0,"depth":1}},"children":["zFMjbn3xihVNHjUIdZCD1","IK6NOKemuDjhfstJBovKL","RS8qp1GxwtiJopCUHTTtq","ZaTr28eWk1DrXOEsc1YVb","Vi0WYVLZunVM9iR8XZJn3","ngAbg7gluvbt1bY1UIRsi","RCPPXSakm5TvKka8kOmVp","MPx8ykTP57I40WTZvTP7f","ZU5WmdTG1bHoE8RcmZXZG","jqWiyYJff92RjXuUQt9PQ","KihijM8OQvZ4pASkkhqzL","F9vyqvls3OBCujtukqKhy","facc2b01-755a-409f-99f6-57bef2d1501f","m5ov42Vm6mR7RQWTvl1NW","YYt62mSW964cwb5nP0hva","PZxxZ4iESzSlbbHJKxuAZ","UDu62Pa6BaRqlG8uGoMhy","nMCtMXVvjBsJk3iw1zoIO","ANfx9Z4a6ZA0uJuSHtbIJ","BkG557LKUYbH1DnxprEVT","1TaH8zDTM98FZ9SYaeXLM","dc79799f-a55d-48ab-a8be-c48adb1b19c0","f6feef57-b8f5-451f-a09a-7b63f6a07183","4sz47Y0LKs1Si73rWtyyh","5a9fb1df-478e-4687-9be0-5cb97e61ec57","1374e9e9-1cbc-4e1f-b1ca-66b8569533dd","f529cc34-aba0-45ca-ad7e-02ddda318941","0zcauha3il2NqtxZazIo7","9bbd6f68-03b2-41f4-92e4-2ca313e8b450","5a2ab598-fa7e-4471-8bda-9f5831b679ae","uV6w4mZPoohWyZV4Xaad0","RgE0mZLaUjPftFPZsiAoe","mytCOts26Pidush65tdRW","fwUzxfLSPMH1eL8oBoLWx","TbW7PM9bg1y5TGkiWwQ8b","xiSIDeEtIc8X0lpUQlppI","0jxgntiLNHWFuCbzqtFGF","GkdMprLUe4QQULBxmGN6V","4SYc6v5hxY5g6Ip6kjpwO","fqVQpS9FBiXgKsZX3R3sJ","L5JUZlGAGvTxrsEBB7DY8","963c4b54-02bd-4943-a15f-52cf59ffd0f4","TeTedoeS2LdHPR632eCpM","e65188a1-177e-4ab2-99f9-75f85d537621","fajYnbVhCRDi74xn0H30R","bArGdGwqo3iFkyKMyE7qR","4Dcp7gbEVoLLgfu7bXFai","5d700782-fb81-416e-83f9-5dd88260e350","zubgzhNFE6KlTgXcjTz6O","8lpdfWa0cbSq1XJQbcYcY","17I8ZksXvqCH1mRtZDjHp","kF916Ow84qpJJeMRkWMIo","tMLkLcrIHHBz56xVmBLkP","CSePBQ6q7qhowKESqVwt7","laZ4OfLhZNK1Kuy6GaWUr","z5IJblOknQhMzZ5QZh4ye","N36FHxfxzwJfxDY3miWyX","3bb25f58-2b50-4fa3-af55-48ea9f88a081","aOqNcxZh8qN4MoBJcvGTc","u93Rz4fEWGu6VBR30Zraf","9hjMHnKvYT4jLKvuDSXaV","LgW7mTIALODoXc54B3p6S","UYPxfHBFWX7fb6hHU5bB6","qxSOd6SPN8qf9ZUojVFDX","WQoMTf6VXBaxCgksXAVsj","2Mw4XgfyCHXHNOX5yoCIY","UFrwsXzC1yr7Ge8FF8Vbo","a8edc4ac-028b-40ec-872a-e4a005b04b2a","0XJqmcdtcMZu66glBI5O8","lK8r8BXS4ThiUTe4xKIZe","93de42ca-53ea-460a-baa7-b9ec5c47cb1e","Rxs2jaGpdFzqYtP7lAJFJ","aO8W81Z0PyIb6Hs7nOHPW","I01hENHnh8Tqu3Ok8sLzG","evqsPNutOaZ8hcBCqxFQu","zhhxcjZUHdU8uRLwGb9Zh","G1aFACZB2ooWGMGwyd3ZW","YWy1C4tgoaCcw1m8JJsr7","Szj3o5iaNxPpesiCqwrbu","XhvCDW3fIw6h6MhY5ticq","Q70g7SusFZBQXzkuQifv4","AzfWDH3wp7jFpL2EYxBcW","y0fwpZ9qMqirsLiFyOciU","ZF8xj8wwDUqKlrwTrCFZ1","tAJvhqhdfyZZa87QHq1TU","4hRmipi8lxpBLyzWu5JVB","iTg0C7QjvnmqBZeEigJNs","3babc3d2-79ae-470a-9c06-ab8bba2e684e","bF3UsMFya3fMeXWDspVov","ULkfbL9WpktbVYnzhl6Jw","PpNOO8JYWe6dM8wruSa7x","di40pCxDn7IiqE8lFdD46","rmW0mkerqV35I8QPji6lM","3IFIK1ByzeIxZCByryGLN","iImkYAKfkw3beAl6pLbDn","tho65KN0ZpjQlVvP1fEzM","ecDe8DNWrkeQTwpTEvHje","Yqhdd9mSJGN7OJOeyoSD2","NEhsoOfR7J6o01ielAuUm","Ws5tah8tpeyn9tK8VBTg8","Bqpifx2HX3vjLhX9yvhTV","gWAg15uBJgkS2B0wcpMAa","l7V3v2ep1YdDCt7DOr7Ci","yM2PJBdqJnHpD63cPA6sW","qn0bre7eLbi3QMbCfWkUi","fSu0KxFL41IRouotqmbHs","0gtg24Mj1a1bQFPRGQNlO","7iQPBMltLPLbFEz2qbjPu","yoh4pwoXcfELInGKRdYf6","dCGCWXgAmiOZXbdULT1m6","jMavlje07sNa6hSEIE8WA","Xxm0JE4dKHxrQAaZfzvxD","PAEBZCyFBZJyR7OoMZ41E","PQ6km8RgRCuyICBPOYz8f","2bhftt8rGuxYu4pFgNqru","hjYIZpHQWuXfeEoGeJEKW","K2M9bQqVq2eQfm29eslKL","X8obW1iKwYsvNgKWGyCzy","yJwSC7hqYIezTFHf5i0Ev","c4Z7ETcOHUILRMH32Sfjw","qiR6dIu857b9M9kTqjOyK","8vflbCVkwZtYcqdDDTNAz","Ku1OgHMhELajzo61Gx7ye","LUrfhDWo8wuwZu7CN9TV8","osu6JGOnvXJ5gt3tpqWZY","1a6173cd-cf13-4b34-a522-8350bf9a364f","ZgCUp366YrF2Tyky2NT73","S2sBltrPfd8a7ICuD7CuH","oWCuBXOg6JWfZzjmKxmNl","jOmhZ8ovLYTPbpM1vqSDx","FraC6xzLy1ei91l1ICyc9","6ceBas2RE9Q4787GDngH7","734cd78d-0bc9-426b-803d-1efc84dfffe5","k4Bb09px6r0FxIRs49SXV","oaG3H1S9IUBO644nGZigu","Ka7agQJkUMRSWN0uFdkWK","si3z090WsiLasMhJBa1Az","ljKAVERmdEiKLK9hXGKBm","LIcuGYV0DDt1VWbvH6Sed","MgUSrpNCIwDOW4fX3vPOF","bZumdyapJ2H0wWWOmJ45i","QHXEIyeZGIGMVi5Q52UWI","i5Fya3Vzzm0rBT0ctByuo"],"parent":null,"data":{},"body":"\n# Digital Garden\n\nThis Wiki of Personal Information is organized according to domains and their\nsub-domains, along with specific implementation of those domains.\n\nFor instance, Git itself is a domain. Sub-domains of Git, would be `commit`,\n`tags`, `reflog` etc. implementations of each of those could be `cli`, `strat`\n(strategies), `inner` etc.\n\nThe goal of the wiki is to present data in a manner that is from the perspective\nof a querying user. Here, a user is a programmer wanting to get key information\nfrom a specific domain. For instance, if a user wants to use postgres functions\nand hasn't done them in a while, they should be able to query\n`postgres.functions` to see what information is available to them.\n\nThis wiki has been written with myself in mind. While learning each of these\ndomains, I have been sensitive to the \"aha\" moments and have noted down my\ninsights as they arose. I have refrained from capturing information that I\nconsidered obvious or otherwise non-beneficial to my own understanding.\n\nThe ability I hope to gain from this wiki is the ability to step away from any\ngiven domain for a long period of time, and be able to be passably useful for\nwhatever my goals are within a short period of time. Of course, this is all\nvague sounding, and really depends on the domain, along with the ends I am\ntrying to reach.\n\nTo achieve this, the system should be steadfast to:\n- be able to put information in relatively easily, without too much thought\n\trequired to make that determination.\n- be able to extract the information that we need, meaning there is a\n\thigh-degree in confidence in the location of the information. The idea is\n\tthat information loses a large amount of its value when it is unfindable.\n\tTherefore, a relatively strict ideology should be used when determining\n\twhere a piece of information belongs.\n"},"collectionChildren":null,"customHeadContent":null,"config":{"version":3,"useFMTitle":true,"useNoteTitleForLink":true,"noLegacyNoteRef":true,"mermaid":true,"useKatex":true,"dev":{"enablePreviewV2":true},"site":{"assetsPrefix":"/Digital-Garden","siteUrl":"https://tycholiz.github.io","copyAssets":true,"siteHierarchies":["root"],"siteRootDir":"docs","usePrettyRefs":true,"title":"Dendron","description":"Publishable tech notes","duplicateNoteBehavior":{"action":"useVault","payload":["tech"]},"siteLastModified":true,"gh_edit_branch":"main","usePrettyLinks":true,"siteNotesDir":"notes","siteFaviconPath":"favicon.ico","gh_edit_link":true,"gh_edit_link_text":"Edit this page on GitHub","gh_root":"docs/","gh_edit_view_mode":"edit","writeStubs":true,"siteIndex":"root"},"commands":{"lookup":{"note":{"selectionMode":"extract","confirmVaultOnCreate":false,"leaveTrace":false}},"insertNote":{"initialValue":"templates"},"insertNoteLink":{"aliasMode":"none","enableMultiSelect":false},"insertNoteIndex":{"enableMarker":false},"randomNote":{}},"workspace":{"dendronVersion":"0.67.1","vaults":[{"fsPath":"../main/tech","name":"tech"}],"journal":{"dailyDomain":"daily","name":"journal","dateFormat":"y.MM.dd","addBehavior":"childOfDomain"},"scratch":{"name":"scratch","dateFormat":"y.MM.dd.HHmmss","addBehavior":"asOwnDomain"},"graph":{"zoomSpeed":1},"enableAutoCreateOnDefinition":false,"enableXVaultWikiLink":false,"enableRemoteVaultInit":true,"workspaceVaultSyncMode":"noCommit","enableAutoFoldFrontmatter":true,"maxPreviewsCached":10,"maxNoteLength":204800,"task":{"name":"","dateFormat":"","addBehavior":"childOfCurrent","statusSymbols":{"":" ","wip":"w","done":"x","assigned":"a","moved":"m","blocked":"b","delegated":"l","dropped":"d","pending":"y"},"prioritySymbols":{"H":"high","M":"medium","L":"low"},"todoIntegration":false,"createTaskSelectionType":"selection2link"},"enableUserTags":true,"enableHashTags":true},"usePrettyRefs":true}},"__N_SSG":true}