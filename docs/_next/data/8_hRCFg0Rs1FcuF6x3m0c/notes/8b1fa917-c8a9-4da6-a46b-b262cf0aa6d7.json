{"pageProps":{"note":{"id":"8b1fa917-c8a9-4da6-a46b-b262cf0aa6d7","title":"Pod","vault":{"fsPath":"../main/tech","name":"tech"},"type":"note","desc":"","links":[{"type":"wiki","from":{"fname":"k8s.objects.pod","id":"8b1fa917-c8a9-4da6-a46b-b262cf0aa6d7","vaultName":"tech"},"value":"k8s.components.node.kubelet","alias":"reference","position":{"start":{"line":109,"column":1,"offset":4724},"end":{"line":109,"column":42,"offset":4765},"indent":[]},"xvault":false,"sameFile":false,"to":{"fname":"k8s.components.node.kubelet"}}],"anchors":{"how-many-containers-in-a-pod":{"type":"header","text":"How many containers in a pod?","value":"how-many-containers-in-a-pod","line":70,"column":0},"podtemplate":{"type":"header","text":"PodTemplate","value":"podtemplate","line":84,"column":0},"pod-scheduling":{"type":"header","text":"Pod Scheduling","value":"pod-scheduling","line":92,"column":0},"major-components":{"type":"header","text":"Major components","value":"major-components","line":94,"column":0},"api-server":{"type":"header","text":"API Server","value":"api-server","line":98,"column":0},"scheduler":{"type":"header","text":"Scheduler","value":"scheduler","line":107,"column":0},"kubelet":{"type":"header","text":"Kubelet","value":"kubelet","line":113,"column":0},"process-of-creating-a-pod":{"type":"header","text":"Process of creating a pod","value":"process-of-creating-a-pod","line":117,"column":0},"pod-definition-file":{"type":"header","text":"Pod Definition File","value":"pod-definition-file","line":130,"column":0}},"fname":"k8s.objects.pod","updated":1630081466842,"created":1622064644283,"parent":"G8flDlvSL0SmiOVLt7fDX","children":["c78e2268-dc60-43a1-b8fb-6668ee127e14"],"data":{},"contentHash":"444e2eb33574e03cc1b1eb7f881620c5","custom":{}},"body":"<h1 id=\"pod\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#pod\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>Pod</h1>\n<p>A Pod is a way to represent a running process in a cluster.</p>\n<ul>\n<li>Pod refers to a pod of whales or pea pod</li>\n</ul>\n<p>A pod is a collection of containers that share resources</p>\n<ul>\n<li>Though realistically, we tend to only have a single container in a Pod. We might see more than 1, but it normally isn't more than 2 or 3.</li>\n</ul>\n<p>A pod is designed to run multiple cooperative processes that could be seen as a single cohesive piece of work. This is the level of abstraction that we live at in Kubernetes.</p>\n<p>Pods are the building blocks of Kubernetes, just as containers are the building block of Docker.</p>\n<ul>\n<li>In Docker, we think in terms of processes. In Kubernetes, we think in terms of multiple processes (co-existing to perform one task)</li>\n</ul>\n<p>All the containers in a pod run on the same machine. </p>\n<ul>\n<li>That is, a pod cannot be split across multiple nodes</li>\n</ul>\n<p>A pod provides a way to set <code>.env</code> variables, mount storage, and feed other information into a container</p>\n<p>A pod encapsulates one or more containers deployed together on one host, thereby sharing the same resources (of the host)</p>\n<ul>\n<li>ex. if we have 5 containers of a mongodb service deployed, and 3 of them were on the same host (ex. same machine), those 3 together would be called a Pod</li>\n</ul>\n<p>Pods are not long-lived services. Even though Kubernetes is doing its best to ensure that the containers in a Pod are (almost) always up-and-running, the same cannot be said for Pods. In Kubernetes, containers are fault-tolerant, but pods are not.</p>\n<ul>\n<li>If a Pod fails, gets destroyed, or gets evicted from a Node, it will not be rescheduled.</li>\n<li>Similarly, if a whole node is destroyed, all the Pods on it will cease to exist.</li>\n</ul>\n<p>Each pod gets its own IP address, though it is unreliable, since pods are designed to be short-lived; so the creation of a new pod would result in a new IP</p>\n<p>When the container inside a pod exits, the pod dies too.</p>\n<p>When a container inside a pod fails, Kubernetes will create a new container based off the same image:</p>\n<pre class=\"language-sh\"><code class=\"language-sh\">$ kubectl exec -it db pkill mongod\n$ kubectl get pods\n</code></pre>\n<p>produces (note how RESTARTS is 1):</p>\n<pre><code>NAME READY STATUS  RESTARTS AGE\ndb   1/1   Running 1        13m\n</code></pre>\n<p>Everything in a pod is tightly coupled.</p>\n<p>The containers in a pod are not necessarily Docker containers, though it is the most common implementation.</p>\n<p>Normally pods are not created by hand. Instead, we depend on higher level constructs like Controllers to do that for us.</p>\n<p>Pods...</p>\n<ul>\n<li>are mortal. They are born and cannot be resurrected once they die.</li>\n<li>are not intended to run multiple instances of the same application,</li>\n</ul>\n<p>Containers within a pod...</p>\n<ul>\n<li>share an IP address and port space, and can find each other via localhost.</li>\n<li>share storage space</li>\n</ul>\n<p>In a pre-container world, being executed on the same physical or virtual machine would mean being executed on the same logical host.</p>\n<ul>\n<li>logical host would contain relatively tightly coupled code</li>\n</ul>\n<h3 id=\"how-many-containers-in-a-pod\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#how-many-containers-in-a-pod\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>How many containers in a pod?</h3>\n<p>Even though a Pod can contain any number of containers, the most common use case is to use the <strong>single-container-in-a-Pod</strong> model</p>\n<ul>\n<li>Imagine we had your express api server image and a postgres image. If we put both of these in a single pod, we would no longer be able to have different numbers of containers. For instance, we could not have 2 api containers and 1 postgres container.</li>\n</ul>\n<p>There are scenarios when having multiple containers in a Pod is a good idea. However, they are very specific and, in most cases, are based on one container that acts as the main service and the rest serving as side-cars.</p>\n<p>A frequent use case is multi-container Pods used for:</p>\n<ul>\n<li>Continuous integration (CI)</li>\n<li>Continious Delivery (CD)</li>\n<li>Continuous Deployment processes (CDP)</li>\n</ul>\n<h3 id=\"podtemplate\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#podtemplate\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>PodTemplate</h3>\n<p>When we create a pod, a hash of the PodTemplate is taken and it appended to the Pod name. This means that 2 pods created from identical PodTemplates on different machines will produce the same hash.</p>\n<ul>\n<li>This is also how Git SHAs work.</li>\n</ul>\n<p>spec: PodTemplate is in the ReplicaSet</p>\n<h2 id=\"pod-scheduling\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#pod-scheduling\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>Pod Scheduling</h2>\n<h3 id=\"major-components\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#major-components\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>Major components</h3>\n<p>There are 3 major components: API Server, Scheduler, Kubelet</p>\n<h4 id=\"api-server\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#api-server\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>API Server</h4>\n<p>Central component of the K8s cluster</p>\n<ul>\n<li>runs on the master node\n<ul>\n<li>with Minikube, both master and worker nodes are baked into the same VM. Realistically, the K8s cluster should have the two separated on different hosts.</li>\n</ul>\n</li>\n</ul>\n<p>Most of the coordination in Kubernetes consists of a component writing to the API Server resource that another component is watching. The second component will then react to changes almost immediately.</p>\n<h4 id=\"scheduler\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#scheduler\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>Scheduler</h4>\n<p>The scheduler is also running on the master node.</p>\n<ul>\n<li>Its job is to watch for unassigned pods and assign them to a node which has available resources (CPU and memory) matching Pod requirements.</li>\n</ul>\n<h4 id=\"kubelet\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#kubelet\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>Kubelet</h4>\n<p><a href=\"/Digital-Garden/notes/2755e5c4-8604-4147-af9c-1cd544a674e2\">reference</a></p>\n<h3 id=\"process-of-creating-a-pod\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#process-of-creating-a-pod\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>Process of creating a pod</h3>\n<p>ie. when running <code>kubectl create -f pod/db.yml</code></p>\n<ol>\n<li>kubectl (the K8s client) sends a request to the API Server, requesting the creation of a pod</li>\n<li>Since the scheduler is watching the API server for new events, it detected that there is an unassigned Pod.</li>\n<li>The scheduler decided which node to assign the Pod to and sent that information to the API server.</li>\n<li>Kubelet is also watching the API server. It detected that the Pod was assigned to the node it is running on.</li>\n<li>Kubelet sent a request to Docker requesting the creation of the containers that form the Pod. In our case, the Pod defines a single container based on the mongo image.</li>\n<li>Finally, Kubelet sent a request to the API server notifying it that the Pod was created successfully.</li>\n</ol>\n<p><img src=\"/Digital-Garden/assets/images/2021-05-28-11-22-21.png\" alt=\"Pod Scheduling Sequence\"></p>\n<h2 id=\"pod-definition-file\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#pod-definition-file\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>Pod Definition File</h2>\n<pre class=\"language-yml\"><code class=\"language-yml\"><span class=\"token comment\"># using v1 of the K8s Pods API</span>\n<span class=\"token key atrule\">apiVersion</span><span class=\"token punctuation\">:</span> v1\n<span class=\"token key atrule\">kind</span><span class=\"token punctuation\">:</span> Pod\n<span class=\"token key atrule\">metadata</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> db\n  <span class=\"token key atrule\">labels</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">type</span><span class=\"token punctuation\">:</span> db\n    <span class=\"token key atrule\">vendor</span><span class=\"token punctuation\">:</span> MongoLabs\n<span class=\"token key atrule\">spec</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">containers</span><span class=\"token punctuation\">:</span>\n  <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> db\n    <span class=\"token key atrule\">image</span><span class=\"token punctuation\">:</span> mongo<span class=\"token punctuation\">:</span><span class=\"token number\">3.3</span>\n    <span class=\"token key atrule\">command</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"mongod\"</span><span class=\"token punctuation\">]</span> <span class=\"token comment\"># the command that should be executed when the container starts</span>\n    <span class=\"token key atrule\">args</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"--rest\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"--httpinterface\"</span><span class=\"token punctuation\">]</span>\n\n</code></pre>\n<hr>\n<h2 id=\"children\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#children\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>Children</h2>\n<ol>\n<li><a href=\"/Digital-Garden/notes/c78e2268-dc60-43a1-b8fb-6668ee127e14\">CLI</a></li>\n</ol>","noteIndex":{"id":"0e1ca097-be9f-4e4c-a7ed-d6dfb05cd4e8","title":"Root","vault":{"fsPath":"../main/tech","name":"tech"},"type":"note","desc":"","links":[],"anchors":{"digital-garden":{"type":"header","text":"Digital Garden","value":"digital-garden","line":8,"column":0}},"fname":"root","updated":1618676699718,"created":1615482407722,"parent":null,"children":["723b0cf7-a5f3-4c71-a811-2c782faa4cc4","mcq7ZV8MBAMVYrXg","dMS8QtNyJCwovtfh6ERrp","ZaTr28eWk1DrXOEsc1YVb","WH8jEz5lviqlnG5f","a19c5ab0-fd8c-4bd0-9aed-da5abefabc45","4586ac41-3af7-4176-aaf0-440ad1773bc9","610b951b-7363-471f-acd5-210710b9d104","f29f31f3-7235-41ad-83a1-b64f3f466916","3445f14b-9f67-412d-9762-dc14ee7c90e4","c3304982-eb1c-45ec-8556-4599d2286b5c","facc2b01-755a-409f-99f6-57bef2d1501f","b965d9fa-c200-4a8d-9323-73b9c2565812","4d5aab64-f4a4-40a0-9155-f28aaf49d38a","a95e8592-84c0-4698-a0d9-07e8e130b322","234faa4d-432f-43f4-99fb-08ac4c01bf9b","105fd41a-910d-4b94-8686-98c3933931f2","f3bcc3d9-7232-41f4-aaaf-86a99b56dc65","ANfx9Z4a6ZA0uJuSHtbIJ","4668ac41-f2d5-40c0-9144-efb456d8663b","j8xePJ5wfKsznvM5DP5q6","dc79799f-a55d-48ab-a8be-c48adb1b19c0","f6feef57-b8f5-451f-a09a-7b63f6a07183","12797f4e-92d0-447e-adc7-e5cb4ff4c883","5a9fb1df-478e-4687-9be0-5cb97e61ec57","1374e9e9-1cbc-4e1f-b1ca-66b8569533dd","f529cc34-aba0-45ca-ad7e-02ddda318941","0zcauha3il2NqtxZazIo7","9bbd6f68-03b2-41f4-92e4-2ca313e8b450","5a2ab598-fa7e-4471-8bda-9f5831b679ae","3b7ffbbf-762e-411f-8fad-5e2b1b95e384","81e5a201-c843-49d1-b291-f99d818cee0c","295ca45b-6851-4d38-9ecb-1d7e4a885849","vdjkh6890a6Ye6vvbN0CD","b3b7587a-fbd2-48a9-aef1-4efc90458e82","znCO2WghOAWC8nBGb4Ooa","7cc5d9c3-20d8-4fef-aca2-7d6dcdc7b3d7","f32fab12-3c92-4e91-8d61-01e17e734910","fqVQpS9FBiXgKsZX3R3sJ","53b47d5a-542b-4fab-8f6c-c70574ab7a48","963c4b54-02bd-4943-a15f-52cf59ffd0f4","739907b4-b36d-4ad1-866d-c9f8050de776","e65188a1-177e-4ab2-99f9-75f85d537621","fajYnbVhCRDi74xn0H30R","bArGdGwqo3iFkyKMyE7qR","ffYYlFAOinMkMeUg","5d700782-fb81-416e-83f9-5dd88260e350","w3MsVswhiuHRpAOQ","s2PhLzio3pcBg3bQ","d8118e61-b25f-4a6f-8f88-4e7ddd69827f","e1c5eaef-0205-4e6d-ab9f-5a207d58cc12","55a2161d-d415-4fbd-98cb-ff8aed19e6ee","67265fd9-7fbd-4bf7-b3c9-ced802b8a830","dvxpt2xKPsfCOTR4lY8Qp","a68b9a8c-a9c9-4133-8230-2671b2d8d86b","3bb25f58-2b50-4fa3-af55-48ea9f88a081","egctyVUjVesp2xA5t0ZYt","76420b75-f886-43ad-a876-c4fd4ad09ff2","1310c9cf-0160-4ad5-aad7-cf355c9313ac","6c54da8e-be6f-4ce3-b642-ef3108533df9","77ebb3d5-30b3-44e0-badc-02314bfd4f12","0e4f1336-2037-42e7-a854-054718e9359f","6412cc53-4648-46c1-8be6-c6d1c301baa1","c56bb2bc-4c2b-4bce-87e7-f1e655aa449a","UFrwsXzC1yr7Ge8FF8Vbo","a8edc4ac-028b-40ec-872a-e4a005b04b2a","38d933b3-770f-49df-b1ac-f2ae4f6061fd","vqPq_S-Il3EV72fUR41r6","93de42ca-53ea-460a-baa7-b9ec5c47cb1e","3bcd5b24-cdfa-45ad-b249-55ae92119ed3","aO8W81Z0PyIb6Hs7nOHPW","27f2c279-9420-4375-9487-5493c1dbbefc","Xt8o0SFdV1BIvmCKb1Ign","05537701-5721-425c-a0d5-8ec5da941220","1b6e8550-252e-4f9f-a586-05044cb97f0a","4866aa20-2068-47f0-afd1-c2b96a24f951","PXd6hUzi0wF7oPnT","f7c590dc-921d-4b6f-8f8e-e075b0c16035","f4355062-fdda-4c6f-a969-3f8a10c15475","c299d2dd-7cbd-4b81-976a-37b808ee41a8","9c56d34a-84ee-481e-ac5a-13fa56750a3c","60f0e948-b809-40de-aac1-180423cbebcd","dfab2e99-6155-482d-a598-8b8cc11f7ddc","e6ff7608-3de4-46e3-93a7-24ba07f70f42","bb4b4e79-9835-4284-bcac-d3de9b203e1a","3babc3d2-79ae-470a-9c06-ab8bba2e684e","4eeb4df6-2842-4db4-84ce-1992975f36a5","dff06309-f792-4ee2-a0ef-529972167027","d1aaf074-9c4c-4926-9106-44b71fd92529","20206ec8-0739-464e-b41d-65307a0c5aa6","3IFIK1ByzeIxZCByryGLN","0ba5c14a-800b-4614-ad5b-0ae7102e269e","db9cdb23-f02b-426c-b27e-baafb72916bd","7a81c659-7511-48c0-a78f-552d0e6cfff7","8e83deb1-8f7c-439e-b991-70e544645bfb","ubXzUle7zxv25VkjiLmpR","fb9dbfa7-978e-4f56-aeb7-3c97fb6c9e93","b6226bd4-551d-4670-a956-158bdce3f5a6","f691cb23-bc18-4b33-b454-155b1e785d62","a02e32ca-2839-46bc-a452-684f01a4e671","887233a2-8653-46ef-adce-2e482007942b","b6746509-f9f8-4823-b3b9-0d6d5f1fdb69","vlb4ItR9EQCCw9ACUA5h7","f39cc3a8-8357-49e5-8cdb-04450d05d913","1426c9b1-f3c1-4c01-8efd-a732c782c48c","dCGCWXgAmiOZXbdULT1m6","e02953c0-95d2-4101-a117-f8e0221800f0","GL8aMKtYOxcE560XF4HUK","9cc2f536-ad6d-49d2-bf6a-30284dfa1158","f9503aa6-bceb-4b11-89cd-d7e6f50d5cb0","e9bf14ec-5801-4be8-ba1e-3034dc742fa6","fee6c25b-8ea8-45bf-89d5-8c6d036b03b6","b28d278d-4fa0-4eac-9d26-dd6b10eb169d","yJwSC7hqYIezTFHf5i0Ev","5B2iI6ltu8TF5LJWAfXUE","4db45135-9630-4554-8ad4-6ca853621fca","MA3EsQQpV6iMx8j3hkJPK","84143a1b-aa79-40ff-bcae-6d9858fec127","osu6JGOnvXJ5gt3tpqWZY","1a6173cd-cf13-4b34-a522-8350bf9a364f","xRWsry32YkvSjs2Z","39SlH3nIiO6oQSwmZaMXT","TJrAQeEG6EjrEarYyIbYK","240d9848-b03d-445a-8787-090d79024b6a","5730411b-fefa-49e0-aced-451f5b148299","63a922b8-2d60-4ea7-9f47-bcfaa0caef7e","734cd78d-0bc9-426b-803d-1efc84dfffe5","3baf3651-9e5a-46bd-bba1-f0c0caf7385c","6733cf80-f2b1-41eb-8ddf-e2fa947f6b43","si3z090WsiLasMhJBa1Az","3577d6e8-1437-4f7b-9da2-c353ed232038"],"data":{},"contentHash":"7730693db0d19d3a73665766d9c0a1c5","custom":{"nav_order":0,"permalink":"/"},"body":"\n# Digital Garden\n\nThis Wiki of Personal Information is organized according to domains and their\nsub-domains, along with specific implementation of those domains.\n\nFor instance, Git itself is a domain. Sub-domains of Git, would be `commit`,\n`tags`, `reflog` etc. implementations of each of those could be `cli`, `strat`\n(strategies), `inner` etc.\n\nThe goal of the wiki is to present data in a manner that is from the perspective\nof a querying user. Here, a user is a programmer wanting to get key information\nfrom a specific domain. For instance, if a user wants to use postgres functions\nand hasn't done them in a while, they should be able to query\n`postgres.functions` to see what information is available to them.\n\nThis wiki has been written with myself in mind. While learning each of these\ndomains, I have been sensitive to the \"aha\" moments and have noted down my\ninsights as they arose. I have refrained from capturing information that I\nconsidered obvious or otherwise non-beneficial to my own understanding.\n\nThe ability I hope to gain from this wiki is the ability to step away from any\ngiven domain for a long period of time, and be able to be passably useful for\nwhatever my goals are within a short period of time. Of course, this is all\nvague sounding, and really depends on the domain, along with the ends I am\ntrying to reach.\n\nTo achieve this, the system should be steadfast to:\n- be able to put information in relatively easily, without too much thought\n\trequired to make that determination.\n- be able to extract the information that we need, meaning there is a\n\thigh-degree in confidence in the location of the information. The idea is\n\tthat information loses a large amount of its value when it is unfindable.\n\tTherefore, a relatively strict ideology should be used when determining\n\twhere a piece of information belongs.\n"},"collectionChildren":null,"customHeadContent":null,"config":{"version":3,"useFMTitle":true,"useNoteTitleForLink":true,"noLegacyNoteRef":true,"mermaid":true,"useKatex":true,"dev":{"enablePreviewV2":true},"site":{"assetsPrefix":"/Digital-Garden","siteUrl":"https://tycholiz.github.io","copyAssets":true,"siteHierarchies":["root"],"siteRootDir":"docs","usePrettyRefs":true,"title":"Dendron","description":"Publishable tech notes","duplicateNoteBehavior":{"action":"useVault","payload":["tech"]},"siteLastModified":true,"gh_edit_branch":"main","usePrettyLinks":true,"siteNotesDir":"notes","siteFaviconPath":"favicon.ico","gh_edit_link":true,"gh_edit_link_text":"Edit this page on GitHub","gh_root":"docs/","gh_edit_view_mode":"edit","writeStubs":true,"siteIndex":"root"},"commands":{"lookup":{"note":{"selectionMode":"extract","confirmVaultOnCreate":false,"leaveTrace":false}},"insertNote":{"initialValue":"templates"},"insertNoteLink":{"aliasMode":"none","enableMultiSelect":false},"insertNoteIndex":{"enableMarker":false},"randomNote":{}},"workspace":{"dendronVersion":"0.67.1","vaults":[{"fsPath":"../main/tech","name":"tech"}],"journal":{"dailyDomain":"daily","name":"journal","dateFormat":"y.MM.dd","addBehavior":"childOfDomain"},"scratch":{"name":"scratch","dateFormat":"y.MM.dd.HHmmss","addBehavior":"asOwnDomain"},"graph":{"zoomSpeed":1},"enableAutoCreateOnDefinition":false,"enableXVaultWikiLink":false,"enableRemoteVaultInit":true,"workspaceVaultSyncMode":"noCommit","enableAutoFoldFrontmatter":true,"maxPreviewsCached":10,"maxNoteLength":204800,"task":{"name":"","dateFormat":"","addBehavior":"childOfCurrent","statusSymbols":{"":" ","wip":"w","done":"x","assigned":"a","moved":"m","blocked":"b","delegated":"l","dropped":"d","pending":"y"},"prioritySymbols":{"H":"high","M":"medium","L":"low"},"todoIntegration":false,"createTaskSelectionType":"selection2link"},"enableUserTags":true,"enableHashTags":true},"usePrettyRefs":true}},"__N_SSG":true}